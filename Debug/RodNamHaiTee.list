
RodNamHaiTee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  08009ce8  08009ce8  00019ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a454  0800a454  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800a454  0800a454  0001a454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a45c  0800a45c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a45c  0800a45c  0001a45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800a464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007d14  20000204  0800a668  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007f18  0800a668  00027f18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d19e  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f96  00000000  00000000  0002d3d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002f368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002fce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c4f  00000000  00000000  000305b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b607  00000000  00000000  000481ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093448  00000000  00000000  00053806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6c4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e04  00000000  00000000  000e6ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ccc 	.word	0x08009ccc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	08009ccc 	.word	0x08009ccc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <serialSend>:
int parHumidity = 50;
int parWater = 5;
int parDoEvery = 20;
int powerSaveMode = 1;

void serialSend(char* str){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, str, strlen(str), 10);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff f8e5 	bl	80001f4 <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	b29a      	uxth	r2, r3
 800102e:	230a      	movs	r3, #10
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <serialSend+0x24>)
 8001034:	f002 fe31 	bl	8003c9a <HAL_UART_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200056bc 	.word	0x200056bc

08001044 <wifisend>:

#define log(x)	serialSend(x)
void wifisend(char* str){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, str, strlen(str), 10);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff f8d1 	bl	80001f4 <strlen>
 8001052:	4603      	mov	r3, r0
 8001054:	b29a      	uxth	r2, r3
 8001056:	230a      	movs	r3, #10
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <wifisend+0x24>)
 800105c:	f002 fe1d 	bl	8003c9a <HAL_UART_Transmit>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20005678 	.word	0x20005678

0800106c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) { // Current UART
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_UART_RxCpltCallback+0x68>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d111      	bne.n	80010a0 <HAL_UART_RxCpltCallback+0x34>
		Rx_data[Rx_indx++] = Rx_byte;    // Add data to Rx_Buffer
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_UART_RxCpltCallback+0x6c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	b2d1      	uxtb	r1, r2
 8001086:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_UART_RxCpltCallback+0x6c>)
 8001088:	7011      	strb	r1, [r2, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_UART_RxCpltCallback+0x70>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2d9      	uxtb	r1, r3
 8001092:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <HAL_UART_RxCpltCallback+0x74>)
 8001094:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &Rx_byte, 1);
 8001096:	2201      	movs	r2, #1
 8001098:	4910      	ldr	r1, [pc, #64]	; (80010dc <HAL_UART_RxCpltCallback+0x70>)
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <HAL_UART_RxCpltCallback+0x68>)
 800109c:	f002 fe8f 	bl	8003dbe <HAL_UART_Receive_IT>
	}
	if (huart == &huart2) { // Current UART
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <HAL_UART_RxCpltCallback+0x78>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d111      	bne.n	80010cc <HAL_UART_RxCpltCallback+0x60>
		Rx_data2[Rx_indx2++] = Rx_byte2;    // Add data to Rx_Buffer
 80010a8:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <HAL_UART_RxCpltCallback+0x7c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	b2d1      	uxtb	r1, r2
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_UART_RxCpltCallback+0x7c>)
 80010b4:	7011      	strb	r1, [r2, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <HAL_UART_RxCpltCallback+0x80>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2d9      	uxtb	r1, r3
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_UART_RxCpltCallback+0x84>)
 80010c0:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart2, &Rx_byte2, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	4909      	ldr	r1, [pc, #36]	; (80010ec <HAL_UART_RxCpltCallback+0x80>)
 80010c6:	4807      	ldr	r0, [pc, #28]	; (80010e4 <HAL_UART_RxCpltCallback+0x78>)
 80010c8:	f002 fe79 	bl	8003dbe <HAL_UART_Receive_IT>
	}
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20005678 	.word	0x20005678
 80010d8:	20000220 	.word	0x20000220
 80010dc:	20007f00 	.word	0x20007f00
 80010e0:	20002e2c 	.word	0x20002e2c
 80010e4:	200056bc 	.word	0x200056bc
 80010e8:	20000221 	.word	0x20000221
 80010ec:	2000562c 	.word	0x2000562c
 80010f0:	2000062c 	.word	0x2000062c

080010f4 <sendCommand>:

void sendCommand(char* id,float hum,int soil,float temp,float light,int relay){
 80010f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010f8:	b0b0      	sub	sp, #192	; 0xc0
 80010fa:	af0a      	add	r7, sp, #40	; 0x28
 80010fc:	6178      	str	r0, [r7, #20]
 80010fe:	ed87 0a04 	vstr	s0, [r7, #16]
 8001102:	60f9      	str	r1, [r7, #12]
 8001104:	edc7 0a02 	vstr	s1, [r7, #8]
 8001108:	ed87 1a01 	vstr	s2, [r7, #4]
 800110c:	603a      	str	r2, [r7, #0]
	char command[128];
	sprintf(command,"sendData('%s %f %d %f %f %d')\r\n",id,hum,soil,temp,light,relay);
 800110e:	6938      	ldr	r0, [r7, #16]
 8001110:	f7ff fa32 	bl	8000578 <__aeabi_f2d>
 8001114:	4604      	mov	r4, r0
 8001116:	460d      	mov	r5, r1
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f7ff fa2d 	bl	8000578 <__aeabi_f2d>
 800111e:	4680      	mov	r8, r0
 8001120:	4689      	mov	r9, r1
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff fa28 	bl	8000578 <__aeabi_f2d>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	f107 0018 	add.w	r0, r7, #24
 8001130:	6839      	ldr	r1, [r7, #0]
 8001132:	9108      	str	r1, [sp, #32]
 8001134:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001138:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	e9cd 4500 	strd	r4, r5, [sp]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	4909      	ldr	r1, [pc, #36]	; (800116c <sendCommand+0x78>)
 8001148:	f004 fbdc 	bl	8005904 <siprintf>
	log(command);
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff63 	bl	800101c <serialSend>
	wifisend(command);
 8001156:	f107 0318 	add.w	r3, r7, #24
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff72 	bl	8001044 <wifisend>
}
 8001160:	bf00      	nop
 8001162:	3798      	adds	r7, #152	; 0x98
 8001164:	46bd      	mov	sp, r7
 8001166:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800116a:	bf00      	nop
 800116c:	08009ce8 	.word	0x08009ce8

08001170 <readLineUart>:

int  readLineUart(char* buffer){
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	for(int i = 0;i< Rx_indx;i++){
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e00b      	b.n	8001196 <readLineUart+0x26>
		buffer[i] = Rx_data[i];
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	4912      	ldr	r1, [pc, #72]	; (80011d0 <readLineUart+0x60>)
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	440a      	add	r2, r1
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i< Rx_indx;i++){
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <readLineUart+0x64>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4293      	cmp	r3, r2
 80011a2:	dbec      	blt.n	800117e <readLineUart+0xe>
	}
	int ret = Rx_indx;
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <readLineUart+0x64>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	60bb      	str	r3, [r7, #8]
	buffer[Rx_indx] = 0;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <readLineUart+0x64>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4413      	add	r3, r2
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
	Rx_indx = 0;
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <readLineUart+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
	return ret;
 80011c2:	68bb      	ldr	r3, [r7, #8]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	20002e2c 	.word	0x20002e2c
 80011d4:	20000220 	.word	0x20000220

080011d8 <readLineUart2>:

int  readLineUart2(char* buffer){
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	for(int i = 0;i< Rx_indx2;i++){
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	e00b      	b.n	80011fe <readLineUart2+0x26>
		buffer[i] = Rx_data2[i];
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	4413      	add	r3, r2
 80011ec:	4912      	ldr	r1, [pc, #72]	; (8001238 <readLineUart2+0x60>)
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	440a      	add	r2, r1
 80011f2:	7812      	ldrb	r2, [r2, #0]
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i< Rx_indx2;i++){
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <readLineUart2+0x64>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4293      	cmp	r3, r2
 800120a:	dbec      	blt.n	80011e6 <readLineUart2+0xe>
	}
	int ret = Rx_indx2;
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <readLineUart2+0x64>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	60bb      	str	r3, [r7, #8]
	buffer[Rx_indx2] = 0;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <readLineUart2+0x64>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
	Rx_indx2 = 0;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <readLineUart2+0x64>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
	return ret;
 800122a:	68bb      	ldr	r3, [r7, #8]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	2000062c 	.word	0x2000062c
 800123c:	20000221 	.word	0x20000221

08001240 <powerOnSensor>:
//DHT_DataTypedef DHT11_Data;
float Temperature, Humidity = 1.0;
uint16_t SoilHumidity = 0;
float light = 40.0;
int relayRunning = 0;
void powerOnSensor(){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	log("powerOnSensor\n");
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <powerOnSensor+0x24>)
 8001246:	f7ff fee9 	bl	800101c <serialSend>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1); //On
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <powerOnSensor+0x28>)
 8001252:	f002 f847 	bl	80032e4 <HAL_GPIO_WritePin>
	// delay 2 sec for DHT
	HAL_Delay(2000);
 8001256:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800125a:	f001 f939 	bl	80024d0 <HAL_Delay>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	08009d14 	.word	0x08009d14
 8001268:	40020800 	.word	0x40020800

0800126c <powerOffSensor>:
void powerOffSensor(){
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	log("powerOffSensor\n");
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <powerOffSensor+0x1c>)
 8001272:	f7ff fed3 	bl	800101c <serialSend>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0); //On
 8001276:	2200      	movs	r2, #0
 8001278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <powerOffSensor+0x20>)
 800127e:	f002 f831 	bl	80032e4 <HAL_GPIO_WritePin>

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	08009d24 	.word	0x08009d24
 800128c:	40020800 	.word	0x40020800

08001290 <relayOn>:
void relayOn(){
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	log("relayOn\n");
 8001294:	4806      	ldr	r0, [pc, #24]	; (80012b0 <relayOn+0x20>)
 8001296:	f7ff fec1 	bl	800101c <serialSend>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1); //On
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <relayOn+0x24>)
 80012a2:	f002 f81f 	bl	80032e4 <HAL_GPIO_WritePin>
	relayRunning = 1;
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <relayOn+0x28>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	08009d34 	.word	0x08009d34
 80012b4:	40020400 	.word	0x40020400
 80012b8:	20000224 	.word	0x20000224

080012bc <relayOff>:

void relayOff(){
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	log("relayOff\n");
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <relayOff+0x20>)
 80012c2:	f7ff feab 	bl	800101c <serialSend>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0); //On
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012cc:	4804      	ldr	r0, [pc, #16]	; (80012e0 <relayOff+0x24>)
 80012ce:	f002 f809 	bl	80032e4 <HAL_GPIO_WritePin>
	relayRunning = 0;
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <relayOff+0x28>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	08009d40 	.word	0x08009d40
 80012e0:	40020400 	.word	0x40020400
 80012e4:	20000224 	.word	0x20000224

080012e8 <getWifiStatus>:
	for(int i=0;i<len;i++){
		sprintf(tmp,"%02X ",buffer[i]);log(tmp);
	}
	log("\r\n");
}
int getWifiStatus(){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b092      	sub	sp, #72	; 0x48
 80012ec:	af00      	add	r7, sp, #0
	char cmd[64];
	//wifisend("showConnectionStatus()\n");
	wifisend("print(connected)\n");
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <getWifiStatus+0x70>)
 80012f0:	f7ff fea8 	bl	8001044 <wifisend>
	HAL_Delay(200);
 80012f4:	20c8      	movs	r0, #200	; 0xc8
 80012f6:	f001 f8eb 	bl	80024d0 <HAL_Delay>
	int numread = readLineUart(str);
 80012fa:	4818      	ldr	r0, [pc, #96]	; (800135c <getWifiStatus+0x74>)
 80012fc:	f7ff ff38 	bl	8001170 <readLineUart>
 8001300:	6478      	str	r0, [r7, #68]	; 0x44

	if(numread >0){
 8001302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001304:	2b00      	cmp	r3, #0
 8001306:	dd22      	ble.n	800134e <getWifiStatus+0x66>
		char *ptr = strstr(str,"\n");
 8001308:	210a      	movs	r1, #10
 800130a:	4814      	ldr	r0, [pc, #80]	; (800135c <getWifiStatus+0x74>)
 800130c:	f004 fb8b 	bl	8005a26 <strchr>
 8001310:	6438      	str	r0, [r7, #64]	; 0x40
		if(ptr!=NULL){
 8001312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001314:	2b00      	cmp	r3, #0
 8001316:	d01a      	beq.n	800134e <getWifiStatus+0x66>
			//log(ptr);
			if(sscanf(ptr,"%s",cmd) == 1){
 8001318:	463b      	mov	r3, r7
 800131a:	461a      	mov	r2, r3
 800131c:	4910      	ldr	r1, [pc, #64]	; (8001360 <getWifiStatus+0x78>)
 800131e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001320:	f004 fb10 	bl	8005944 <siscanf>
 8001324:	4603      	mov	r3, r0
 8001326:	2b01      	cmp	r3, #1
 8001328:	d111      	bne.n	800134e <getWifiStatus+0x66>
				//sprintf(tmp,"%d %d\r\n",numread,strlen(str));log(tmp);
				//sprintf(tmp,"[%s]",ptr);log(tmp);
				//dumpData(ptr,strlen(ptr));
				if(strcmp(cmd,"true")==0){
 800132a:	463b      	mov	r3, r7
 800132c:	490d      	ldr	r1, [pc, #52]	; (8001364 <getWifiStatus+0x7c>)
 800132e:	4618      	mov	r0, r3
 8001330:	f7fe ff56 	bl	80001e0 <strcmp>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d104      	bne.n	8001344 <getWifiStatus+0x5c>
					log("connected\r\n");
 800133a:	480b      	ldr	r0, [pc, #44]	; (8001368 <getWifiStatus+0x80>)
 800133c:	f7ff fe6e 	bl	800101c <serialSend>
					return 1;
 8001340:	2301      	movs	r3, #1
 8001342:	e004      	b.n	800134e <getWifiStatus+0x66>
				}
				else{
					log("disconnect\r\n");
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <getWifiStatus+0x84>)
 8001346:	f7ff fe69 	bl	800101c <serialSend>
					return 0;
 800134a:	2300      	movs	r3, #0
 800134c:	e7ff      	b.n	800134e <getWifiStatus+0x66>
				}
			}
		}
	}
}
 800134e:	4618      	mov	r0, r3
 8001350:	3748      	adds	r7, #72	; 0x48
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	08009d58 	.word	0x08009d58
 800135c:	20005700 	.word	0x20005700
 8001360:	08009d6c 	.word	0x08009d6c
 8001364:	08009d70 	.word	0x08009d70
 8001368:	08009d78 	.word	0x08009d78
 800136c:	08009d84 	.word	0x08009d84

08001370 <getDHT>:
int getDHT(int debug){
 8001370:	b580      	push	{r7, lr}
 8001372:	b096      	sub	sp, #88	; 0x58
 8001374:	af02      	add	r7, sp, #8
 8001376:	6078      	str	r0, [r7, #4]
	if(debug == 2){
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d101      	bne.n	8001382 <getDHT+0x12>
		powerOnSensor();
 800137e:	f7ff ff5f 	bl	8001240 <powerOnSensor>
	}

	char tmp[64];
	wifisend("getDHT()\n");
 8001382:	481c      	ldr	r0, [pc, #112]	; (80013f4 <getDHT+0x84>)
 8001384:	f7ff fe5e 	bl	8001044 <wifisend>
	HAL_Delay(2000);
 8001388:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800138c:	f001 f8a0 	bl	80024d0 <HAL_Delay>
	int numread = readLineUart(str);
 8001390:	4819      	ldr	r0, [pc, #100]	; (80013f8 <getDHT+0x88>)
 8001392:	f7ff feed 	bl	8001170 <readLineUart>
 8001396:	64f8      	str	r0, [r7, #76]	; 0x4c
	//sprintf(tmplog,"numread=%d\r\n",numread);log(tmplog);
	if(numread >0){
 8001398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800139a:	2b00      	cmp	r3, #0
 800139c:	dd20      	ble.n	80013e0 <getDHT+0x70>
		if(debug == 1){
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d102      	bne.n	80013aa <getDHT+0x3a>
			log(str);
 80013a4:	4814      	ldr	r0, [pc, #80]	; (80013f8 <getDHT+0x88>)
 80013a6:	f7ff fe39 	bl	800101c <serialSend>
		}
		char *ptr = strstr(str,"\n");
 80013aa:	210a      	movs	r1, #10
 80013ac:	4812      	ldr	r0, [pc, #72]	; (80013f8 <getDHT+0x88>)
 80013ae:	f004 fb3a 	bl	8005a26 <strchr>
 80013b2:	64b8      	str	r0, [r7, #72]	; 0x48
		if(ptr!=NULL){
 80013b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d012      	beq.n	80013e0 <getDHT+0x70>
			//log(ptr);
			if(sscanf(ptr,"%s %f %f",&tmp[0],&Temperature,&Humidity)==3){
 80013ba:	f107 0208 	add.w	r2, r7, #8
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <getDHT+0x8c>)
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <getDHT+0x90>)
 80013c4:	490f      	ldr	r1, [pc, #60]	; (8001404 <getDHT+0x94>)
 80013c6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80013c8:	f004 fabc 	bl	8005944 <siscanf>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d106      	bne.n	80013e0 <getDHT+0x70>
				if(debug == 2){
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d101      	bne.n	80013dc <getDHT+0x6c>
					powerOffSensor();
 80013d8:	f7ff ff48 	bl	800126c <powerOffSensor>
				}

				return 1;
 80013dc:	2301      	movs	r3, #1
 80013de:	e005      	b.n	80013ec <getDHT+0x7c>
			}
		}
	}
	if(debug == 2){
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d101      	bne.n	80013ea <getDHT+0x7a>
		powerOffSensor();
 80013e6:	f7ff ff41 	bl	800126c <powerOffSensor>
	}
	return 0;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3750      	adds	r7, #80	; 0x50
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	08009d94 	.word	0x08009d94
 80013f8:	20005700 	.word	0x20005700
 80013fc:	2000001c 	.word	0x2000001c
 8001400:	20000624 	.word	0x20000624
 8001404:	08009da0 	.word	0x08009da0

08001408 <getSoil>:

void getSoil(int debug){
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	if(debug == 2){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b02      	cmp	r3, #2
 8001414:	d101      	bne.n	800141a <getSoil+0x12>
		powerOnSensor();
 8001416:	f7ff ff13 	bl	8001240 <powerOnSensor>
	}
	HAL_ADC_Start(&hadc1);
 800141a:	480b      	ldr	r0, [pc, #44]	; (8001448 <getSoil+0x40>)
 800141c:	f001 f8c0 	bl	80025a0 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 100);
 8001420:	2164      	movs	r1, #100	; 0x64
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <getSoil+0x40>)
 8001424:	f001 f970 	bl	8002708 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	SoilHumidity = HAL_ADC_GetValue(&hadc1);
 8001428:	4807      	ldr	r0, [pc, #28]	; (8001448 <getSoil+0x40>)
 800142a:	f001 f9f8 	bl	800281e <HAL_ADC_GetValue>
 800142e:	4603      	mov	r3, r0
 8001430:	b29a      	uxth	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <getSoil+0x44>)
 8001434:	801a      	strh	r2, [r3, #0]
	if(debug == 2){
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d101      	bne.n	8001440 <getSoil+0x38>
		powerOffSensor();
 800143c:	f7ff ff16 	bl	800126c <powerOffSensor>
	}
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20005630 	.word	0x20005630
 800144c:	20000222 	.word	0x20000222

08001450 <upload>:

void upload(){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
	sendCommand(deviceID, Humidity, SoilHumidity, Temperature, light, relayRunning);
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <upload+0x58>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a14      	ldr	r2, [pc, #80]	; (80014ac <upload+0x5c>)
 800145c:	edd2 7a00 	vldr	s15, [r2]
 8001460:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <upload+0x60>)
 8001462:	8812      	ldrh	r2, [r2, #0]
 8001464:	4611      	mov	r1, r2
 8001466:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <upload+0x64>)
 8001468:	ed92 7a00 	vldr	s14, [r2]
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <upload+0x68>)
 800146e:	edd2 6a00 	vldr	s13, [r2]
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <upload+0x6c>)
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	eeb0 1a66 	vmov.f32	s2, s13
 800147a:	eef0 0a47 	vmov.f32	s1, s14
 800147e:	eeb0 0a67 	vmov.f32	s0, s15
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fe36 	bl	80010f4 <sendCommand>
	HAL_Delay(2000);
 8001488:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800148c:	f001 f820 	bl	80024d0 <HAL_Delay>
	int numread = readLineUart(str);
 8001490:	480b      	ldr	r0, [pc, #44]	; (80014c0 <upload+0x70>)
 8001492:	f7ff fe6d 	bl	8001170 <readLineUart>
 8001496:	6078      	str	r0, [r7, #4]
	log(str);
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <upload+0x70>)
 800149a:	f7ff fdbf 	bl	800101c <serialSend>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000018 	.word	0x20000018
 80014ac:	2000001c 	.word	0x2000001c
 80014b0:	20000222 	.word	0x20000222
 80014b4:	20000624 	.word	0x20000624
 80014b8:	20000020 	.word	0x20000020
 80014bc:	20000224 	.word	0x20000224
 80014c0:	20005700 	.word	0x20005700
 80014c4:	00000000 	.word	0x00000000

080014c8 <shoudWater>:

int shoudWater(float Humidity, int SoilHumidity, float Temperature){
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af04      	add	r7, sp, #16
 80014ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80014d2:	60b8      	str	r0, [r7, #8]
 80014d4:	edc7 0a01 	vstr	s1, [r7, #4]
//	temp //อุณหภูมิ
//	x //ค่าความชื้นในดิน
//	if (SoilHumidity <1400) SoilHumidity =1400;
//	if (SoilHumidity >3600) SoilHumidity =3600;
//	loadSetting();
	float moisture = (4500.0 - SoilHumidity)/4000.0*100.0; //ความชื้น
 80014d8:	68b8      	ldr	r0, [r7, #8]
 80014da:	f7ff f83b 	bl	8000554 <__aeabi_i2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	a149      	add	r1, pc, #292	; (adr r1, 8001608 <shoudWater+0x140>)
 80014e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014e8:	f7fe fee6 	bl	80002b8 <__aeabi_dsub>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <shoudWater+0x120>)
 80014fa:	f7ff f9bf 	bl	800087c <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b38      	ldr	r3, [pc, #224]	; (80015ec <shoudWater+0x124>)
 800150c:	f7ff f88c 	bl	8000628 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb7e 	bl	8000c18 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	617b      	str	r3, [r7, #20]
	if (moisture < parSoilHumidity ) {
 8001520:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <shoudWater+0x128>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	ed97 7a05 	vldr	s14, [r7, #20]
 800152a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	d518      	bpl.n	8001566 <shoudWater+0x9e>
		sprintf(tmp,"bec soil = %f < %f \r\n",moisture,parSoilHumidity );
 8001534:	6978      	ldr	r0, [r7, #20]
 8001536:	f7ff f81f 	bl	8000578 <__aeabi_f2d>
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <shoudWater+0x128>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f818 	bl	8000578 <__aeabi_f2d>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	e9cd 2300 	strd	r2, r3, [sp]
 8001550:	4622      	mov	r2, r4
 8001552:	462b      	mov	r3, r5
 8001554:	4927      	ldr	r1, [pc, #156]	; (80015f4 <shoudWater+0x12c>)
 8001556:	4828      	ldr	r0, [pc, #160]	; (80015f8 <shoudWater+0x130>)
 8001558:	f004 f9d4 	bl	8005904 <siprintf>
		log(tmp);
 800155c:	4826      	ldr	r0, [pc, #152]	; (80015f8 <shoudWater+0x130>)
 800155e:	f7ff fd5d 	bl	800101c <serialSend>
		return 1;
 8001562:	2301      	movs	r3, #1
 8001564:	e03a      	b.n	80015dc <shoudWater+0x114>

	}
	else if(Temperature > parTemperature){
 8001566:	4b25      	ldr	r3, [pc, #148]	; (80015fc <shoudWater+0x134>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001570:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	dd18      	ble.n	80015ac <shoudWater+0xe4>
		sprintf(tmp,"bec temp = %f > %f \r\n",Temperature,parTemperature );
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7fe fffc 	bl	8000578 <__aeabi_f2d>
 8001580:	4604      	mov	r4, r0
 8001582:	460d      	mov	r5, r1
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <shoudWater+0x134>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe fff5 	bl	8000578 <__aeabi_f2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	e9cd 2300 	strd	r2, r3, [sp]
 8001596:	4622      	mov	r2, r4
 8001598:	462b      	mov	r3, r5
 800159a:	4919      	ldr	r1, [pc, #100]	; (8001600 <shoudWater+0x138>)
 800159c:	4816      	ldr	r0, [pc, #88]	; (80015f8 <shoudWater+0x130>)
 800159e:	f004 f9b1 	bl	8005904 <siprintf>
		log(tmp);
 80015a2:	4815      	ldr	r0, [pc, #84]	; (80015f8 <shoudWater+0x130>)
 80015a4:	f7ff fd3a 	bl	800101c <serialSend>
		return 1;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e017      	b.n	80015dc <shoudWater+0x114>
	}
	sprintf(tmp,"DONT bec soil = %f % [%d] temp = %f \r\n",moisture,SoilHumidity,Temperature );
 80015ac:	6978      	ldr	r0, [r7, #20]
 80015ae:	f7fe ffe3 	bl	8000578 <__aeabi_f2d>
 80015b2:	4604      	mov	r4, r0
 80015b4:	460d      	mov	r5, r1
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7fe ffde 	bl	8000578 <__aeabi_f2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	4622      	mov	r2, r4
 80015ca:	462b      	mov	r3, r5
 80015cc:	490d      	ldr	r1, [pc, #52]	; (8001604 <shoudWater+0x13c>)
 80015ce:	480a      	ldr	r0, [pc, #40]	; (80015f8 <shoudWater+0x130>)
 80015d0:	f004 f998 	bl	8005904 <siprintf>
	log(tmp);
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <shoudWater+0x130>)
 80015d6:	f7ff fd21 	bl	800101c <serialSend>

//	if(rand()%5 == 0){
//		return 1;
//	}
	return 0;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bdb0      	pop	{r4, r5, r7, pc}
 80015e4:	f3af 8000 	nop.w
 80015e8:	40af4000 	.word	0x40af4000
 80015ec:	40590000 	.word	0x40590000
 80015f0:	20000004 	.word	0x20000004
 80015f4:	08009dac 	.word	0x08009dac
 80015f8:	20000234 	.word	0x20000234
 80015fc:	20000000 	.word	0x20000000
 8001600:	08009dc4 	.word	0x08009dc4
 8001604:	08009ddc 	.word	0x08009ddc
 8001608:	00000000 	.word	0x00000000
 800160c:	40b19400 	.word	0x40b19400

08001610 <readSensor>:

void readSensor()
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
	powerOnSensor();
 8001614:	f7ff fe14 	bl	8001240 <powerOnSensor>
	getDHT(0);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff fea9 	bl	8001370 <getDHT>
	getSoil(0);
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fef2 	bl	8001408 <getSoil>
	powerOffSensor();
 8001624:	f7ff fe22 	bl	800126c <powerOffSensor>
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <showESPOutput>:

void showESPOutput()
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
	int numread = readLineUart(str);
 8001632:	4807      	ldr	r0, [pc, #28]	; (8001650 <showESPOutput+0x24>)
 8001634:	f7ff fd9c 	bl	8001170 <readLineUart>
 8001638:	6078      	str	r0, [r7, #4]
	if(numread>0){
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	dd02      	ble.n	8001646 <showESPOutput+0x1a>
		log(str);
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <showESPOutput+0x24>)
 8001642:	f7ff fceb 	bl	800101c <serialSend>
	}
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20005700 	.word	0x20005700

08001654 <getSetting>:
void getSetting()
{
 8001654:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001658:	b08a      	sub	sp, #40	; 0x28
 800165a:	af06      	add	r7, sp, #24
	int numread = readLineUart(str);
 800165c:	4834      	ldr	r0, [pc, #208]	; (8001730 <getSetting+0xdc>)
 800165e:	f7ff fd87 	bl	8001170 <readLineUart>
 8001662:	60b8      	str	r0, [r7, #8]
	if(numread>0){
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	dd5c      	ble.n	8001724 <getSetting+0xd0>
//		log(str);
		char *ptr = strstr(str,"\n");
 800166a:	210a      	movs	r1, #10
 800166c:	4830      	ldr	r0, [pc, #192]	; (8001730 <getSetting+0xdc>)
 800166e:	f004 f9da 	bl	8005a26 <strchr>
 8001672:	6078      	str	r0, [r7, #4]
//		float parTemperature = 36.0;
//		float parSoilHumidity = 70;
//		float parHumidity = 50;
//		float parWater = 5;
//		float parDoEvery = 20;
		for(int i = 0;i< strlen(ptr);i++){
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e00d      	b.n	8001696 <getSetting+0x42>
			if(ptr[i] == '"'){
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b22      	cmp	r3, #34	; 0x22
 8001684:	d104      	bne.n	8001690 <getSetting+0x3c>
				ptr[i] = ' ';
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	2220      	movs	r2, #32
 800168e:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i< strlen(ptr);i++){
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	3301      	adds	r3, #1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7fe fdac 	bl	80001f4 <strlen>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8ea      	bhi.n	800167a <getSetting+0x26>
			}
		}
		log(ptr);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff fcb9 	bl	800101c <serialSend>
//		if(sscanf(str,"%d %s",&tmp[0],&parTemperature,&parSoilHumidity,&parHumidity,&parWater,&parDoEvery) ==6){
//					log("good\r\n");
//				}
		int t;
		if(sscanf(ptr,"%s %d %f %f %d %d %d %d",&tmp[0],&t,&parTemperature,&parSoilHumidity,&parHumidity,&parWater,&parDoEvery,&powerSaveMode) ==7){
 80016aa:	463b      	mov	r3, r7
 80016ac:	4a21      	ldr	r2, [pc, #132]	; (8001734 <getSetting+0xe0>)
 80016ae:	9205      	str	r2, [sp, #20]
 80016b0:	4a21      	ldr	r2, [pc, #132]	; (8001738 <getSetting+0xe4>)
 80016b2:	9204      	str	r2, [sp, #16]
 80016b4:	4a21      	ldr	r2, [pc, #132]	; (800173c <getSetting+0xe8>)
 80016b6:	9203      	str	r2, [sp, #12]
 80016b8:	4a21      	ldr	r2, [pc, #132]	; (8001740 <getSetting+0xec>)
 80016ba:	9202      	str	r2, [sp, #8]
 80016bc:	4a21      	ldr	r2, [pc, #132]	; (8001744 <getSetting+0xf0>)
 80016be:	9201      	str	r2, [sp, #4]
 80016c0:	4a21      	ldr	r2, [pc, #132]	; (8001748 <getSetting+0xf4>)
 80016c2:	9200      	str	r2, [sp, #0]
 80016c4:	4a21      	ldr	r2, [pc, #132]	; (800174c <getSetting+0xf8>)
 80016c6:	4922      	ldr	r1, [pc, #136]	; (8001750 <getSetting+0xfc>)
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f004 f93b 	bl	8005944 <siscanf>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b07      	cmp	r3, #7
 80016d2:	d102      	bne.n	80016da <getSetting+0x86>
			log("good\r\n");
 80016d4:	481f      	ldr	r0, [pc, #124]	; (8001754 <getSetting+0x100>)
 80016d6:	f7ff fca1 	bl	800101c <serialSend>
		}
		sprintf(tmp,"setting in STM32: %f %f %d %d %d %d\r\n",parTemperature,parSoilHumidity,parHumidity,parWater,parDoEvery,powerSaveMode);
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <getSetting+0xf4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff4a 	bl	8000578 <__aeabi_f2d>
 80016e4:	4604      	mov	r4, r0
 80016e6:	460d      	mov	r5, r1
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <getSetting+0xf0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff43 	bl	8000578 <__aeabi_f2d>
 80016f2:	4683      	mov	fp, r0
 80016f4:	468c      	mov	ip, r1
 80016f6:	4912      	ldr	r1, [pc, #72]	; (8001740 <getSetting+0xec>)
 80016f8:	6809      	ldr	r1, [r1, #0]
 80016fa:	4810      	ldr	r0, [pc, #64]	; (800173c <getSetting+0xe8>)
 80016fc:	6800      	ldr	r0, [r0, #0]
 80016fe:	4e0e      	ldr	r6, [pc, #56]	; (8001738 <getSetting+0xe4>)
 8001700:	6836      	ldr	r6, [r6, #0]
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <getSetting+0xe0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	9305      	str	r3, [sp, #20]
 8001708:	9604      	str	r6, [sp, #16]
 800170a:	9003      	str	r0, [sp, #12]
 800170c:	9102      	str	r1, [sp, #8]
 800170e:	e9cd bc00 	strd	fp, ip, [sp]
 8001712:	4622      	mov	r2, r4
 8001714:	462b      	mov	r3, r5
 8001716:	4910      	ldr	r1, [pc, #64]	; (8001758 <getSetting+0x104>)
 8001718:	480c      	ldr	r0, [pc, #48]	; (800174c <getSetting+0xf8>)
 800171a:	f004 f8f3 	bl	8005904 <siprintf>
		log(tmp);
 800171e:	480b      	ldr	r0, [pc, #44]	; (800174c <getSetting+0xf8>)
 8001720:	f7ff fc7c 	bl	800101c <serialSend>
	}
}
 8001724:	bf00      	nop
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800172e:	bf00      	nop
 8001730:	20005700 	.word	0x20005700
 8001734:	20000014 	.word	0x20000014
 8001738:	20000010 	.word	0x20000010
 800173c:	2000000c 	.word	0x2000000c
 8001740:	20000008 	.word	0x20000008
 8001744:	20000004 	.word	0x20000004
 8001748:	20000000 	.word	0x20000000
 800174c:	20000234 	.word	0x20000234
 8001750:	08009e04 	.word	0x08009e04
 8001754:	08009e1c 	.word	0x08009e1c
 8001758:	08009e24 	.word	0x08009e24

0800175c <loadSetting>:
void loadSetting()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	wifisend("loadSetting()\n");
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <loadSetting+0x1c>)
 8001762:	f7ff fc6f 	bl	8001044 <wifisend>
	HAL_Delay(1000);
 8001766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800176a:	f000 feb1 	bl	80024d0 <HAL_Delay>
//	showESPOutput();
	getSetting();
 800176e:	f7ff ff71 	bl	8001654 <getSetting>

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	08009e4c 	.word	0x08009e4c

0800177c <processCommand>:

void processCommand()
{
 800177c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001780:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 8001784:	af0a      	add	r7, sp, #40	; 0x28
	char cmd[1024];
	int numread = readLineUart2(cmd);
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fd24 	bl	80011d8 <readLineUart2>
 8001790:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
	if(numread>0){
 8001794:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001798:	2b00      	cmp	r3, #0
 800179a:	f340 80a6 	ble.w	80018ea <processCommand+0x16e>
		sprintf(tmp,"cmd=%s",cmd);log(tmp);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	461a      	mov	r2, r3
 80017a4:	4953      	ldr	r1, [pc, #332]	; (80018f4 <processCommand+0x178>)
 80017a6:	4854      	ldr	r0, [pc, #336]	; (80018f8 <processCommand+0x17c>)
 80017a8:	f004 f8ac 	bl	8005904 <siprintf>
 80017ac:	4852      	ldr	r0, [pc, #328]	; (80018f8 <processCommand+0x17c>)
 80017ae:	f7ff fc35 	bl	800101c <serialSend>
		if(strcmp(cmd,"water\n")==0){
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	4951      	ldr	r1, [pc, #324]	; (80018fc <processCommand+0x180>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fd11 	bl	80001e0 <strcmp>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d116      	bne.n	80017f2 <processCommand+0x76>
			loadSetting();
 80017c4:	f7ff ffca 	bl	800175c <loadSetting>
			readSensor();
 80017c8:	f7ff ff22 	bl	8001610 <readSensor>
			relayOn();
 80017cc:	f7ff fd60 	bl	8001290 <relayOn>
			relayRunning = 2; 	// make it as manual watering
 80017d0:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <processCommand+0x184>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	601a      	str	r2, [r3, #0]
			upload();
 80017d6:	f7ff fe3b 	bl	8001450 <upload>
			HAL_Delay(1000*parWater);
 80017da:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <processCommand+0x188>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fe72 	bl	80024d0 <HAL_Delay>
			relayOff();
 80017ec:	f7ff fd66 	bl	80012bc <relayOff>
			return;
 80017f0:	e07b      	b.n	80018ea <processCommand+0x16e>
		}
		if(strcmp(cmd,"upload\n")==0){
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	4944      	ldr	r1, [pc, #272]	; (8001908 <processCommand+0x18c>)
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fcf1 	bl	80001e0 <strcmp>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d104      	bne.n	800180e <processCommand+0x92>
			readSensor();
 8001804:	f7ff ff04 	bl	8001610 <readSensor>
			upload();
 8001808:	f7ff fe22 	bl	8001450 <upload>
			return;
 800180c:	e06d      	b.n	80018ea <processCommand+0x16e>
		}
		if(strcmp(cmd,"status\n")==0){
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	493e      	ldr	r1, [pc, #248]	; (800190c <processCommand+0x190>)
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fce3 	bl	80001e0 <strcmp>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d12f      	bne.n	8001880 <processCommand+0x104>
			readSensor();
 8001820:	f7ff fef6 	bl	8001610 <readSensor>
			sprintf(tmp,"%s %f %d %f %f %d\r\n",deviceID, Humidity, SoilHumidity, Temperature, light, relayRunning);
 8001824:	4b3a      	ldr	r3, [pc, #232]	; (8001910 <processCommand+0x194>)
 8001826:	681e      	ldr	r6, [r3, #0]
 8001828:	4b3a      	ldr	r3, [pc, #232]	; (8001914 <processCommand+0x198>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fea3 	bl	8000578 <__aeabi_f2d>
 8001832:	4604      	mov	r4, r0
 8001834:	460d      	mov	r5, r1
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <processCommand+0x19c>)
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	4b37      	ldr	r3, [pc, #220]	; (800191c <processCommand+0x1a0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe99 	bl	8000578 <__aeabi_f2d>
 8001846:	4680      	mov	r8, r0
 8001848:	4689      	mov	r9, r1
 800184a:	4b35      	ldr	r3, [pc, #212]	; (8001920 <processCommand+0x1a4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe92 	bl	8000578 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4929      	ldr	r1, [pc, #164]	; (8001900 <processCommand+0x184>)
 800185a:	6809      	ldr	r1, [r1, #0]
 800185c:	9108      	str	r1, [sp, #32]
 800185e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001862:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	9302      	str	r3, [sp, #8]
 800186a:	e9cd 4500 	strd	r4, r5, [sp]
 800186e:	4632      	mov	r2, r6
 8001870:	492c      	ldr	r1, [pc, #176]	; (8001924 <processCommand+0x1a8>)
 8001872:	4821      	ldr	r0, [pc, #132]	; (80018f8 <processCommand+0x17c>)
 8001874:	f004 f846 	bl	8005904 <siprintf>
			log(tmp);
 8001878:	481f      	ldr	r0, [pc, #124]	; (80018f8 <processCommand+0x17c>)
 800187a:	f7ff fbcf 	bl	800101c <serialSend>
			return;
 800187e:	e034      	b.n	80018ea <processCommand+0x16e>
		}
		if(strcmp(cmd,"wifi\n")==0){
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	4928      	ldr	r1, [pc, #160]	; (8001928 <processCommand+0x1ac>)
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fcaa 	bl	80001e0 <strcmp>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <processCommand+0x11c>
			getWifiStatus();
 8001892:	f7ff fd29 	bl	80012e8 <getWifiStatus>
			return;
 8001896:	e028      	b.n	80018ea <processCommand+0x16e>
		}
		if(strcmp(cmd,"ls\n")==0){
 8001898:	f107 030c 	add.w	r3, r7, #12
 800189c:	4923      	ldr	r1, [pc, #140]	; (800192c <processCommand+0x1b0>)
 800189e:	4618      	mov	r0, r3
 80018a0:	f7fe fc9e 	bl	80001e0 <strcmp>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <processCommand+0x134>
			loadSetting();
 80018aa:	f7ff ff57 	bl	800175c <loadSetting>
			return;
 80018ae:	e01c      	b.n	80018ea <processCommand+0x16e>
		}
		if(cmd[0] == '#'){
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b23      	cmp	r3, #35	; 0x23
 80018b8:	d10c      	bne.n	80018d4 <processCommand+0x158>
			wifisend(&cmd[1]);
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	3301      	adds	r3, #1
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fbbf 	bl	8001044 <wifisend>
			HAL_Delay(2000);
 80018c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018ca:	f000 fe01 	bl	80024d0 <HAL_Delay>
			showESPOutput();
 80018ce:	f7ff fead 	bl	800162c <showESPOutput>
			return;
 80018d2:	e00a      	b.n	80018ea <processCommand+0x16e>
		}
		sprintf(tmp,"Unknow command: %s",cmd);log(tmp);
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	461a      	mov	r2, r3
 80018da:	4915      	ldr	r1, [pc, #84]	; (8001930 <processCommand+0x1b4>)
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <processCommand+0x17c>)
 80018de:	f004 f811 	bl	8005904 <siprintf>
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <processCommand+0x17c>)
 80018e4:	f7ff fb9a 	bl	800101c <serialSend>
		return;
 80018e8:	bf00      	nop
	}
}
 80018ea:	f207 4714 	addw	r7, r7, #1044	; 0x414
 80018ee:	46bd      	mov	sp, r7
 80018f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018f4:	08009e5c 	.word	0x08009e5c
 80018f8:	20000234 	.word	0x20000234
 80018fc:	08009e64 	.word	0x08009e64
 8001900:	20000224 	.word	0x20000224
 8001904:	2000000c 	.word	0x2000000c
 8001908:	08009e6c 	.word	0x08009e6c
 800190c:	08009e74 	.word	0x08009e74
 8001910:	20000018 	.word	0x20000018
 8001914:	2000001c 	.word	0x2000001c
 8001918:	20000222 	.word	0x20000222
 800191c:	20000624 	.word	0x20000624
 8001920:	20000020 	.word	0x20000020
 8001924:	08009e7c 	.word	0x08009e7c
 8001928:	08009e90 	.word	0x08009e90
 800192c:	08009e98 	.word	0x08009e98
 8001930:	08009e9c 	.word	0x08009e9c

08001934 <waitingForESP>:

void waitingForESP()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
	// delay 5 sec for ESP reboot
	HAL_Delay(5000);
 800193a:	f241 3088 	movw	r0, #5000	; 0x1388
 800193e:	f000 fdc7 	bl	80024d0 <HAL_Delay>
	log("waitingForESP start\r\n");
 8001942:	4815      	ldr	r0, [pc, #84]	; (8001998 <waitingForESP+0x64>)
 8001944:	f7ff fb6a 	bl	800101c <serialSend>
	for(int i=0;i<600;i++){
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	e019      	b.n	8001982 <waitingForESP+0x4e>
		if(getWifiStatus()==1){
 800194e:	f7ff fccb 	bl	80012e8 <getWifiStatus>
 8001952:	4603      	mov	r3, r0
 8001954:	2b01      	cmp	r3, #1
 8001956:	d103      	bne.n	8001960 <waitingForESP+0x2c>
			log("ESP WIFI ready\r\n");
 8001958:	4810      	ldr	r0, [pc, #64]	; (800199c <waitingForESP+0x68>)
 800195a:	f7ff fb5f 	bl	800101c <serialSend>
			break;
 800195e:	e014      	b.n	800198a <waitingForESP+0x56>
		}else{
			sprintf(tmp,"wait for ESP WIFI %d\r\n",i+1);log(tmp);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3301      	adds	r3, #1
 8001964:	461a      	mov	r2, r3
 8001966:	490e      	ldr	r1, [pc, #56]	; (80019a0 <waitingForESP+0x6c>)
 8001968:	480e      	ldr	r0, [pc, #56]	; (80019a4 <waitingForESP+0x70>)
 800196a:	f003 ffcb 	bl	8005904 <siprintf>
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <waitingForESP+0x70>)
 8001970:	f7ff fb54 	bl	800101c <serialSend>
			HAL_Delay(1000);
 8001974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001978:	f000 fdaa 	bl	80024d0 <HAL_Delay>
	for(int i=0;i<600;i++){
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3301      	adds	r3, #1
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001988:	dbe1      	blt.n	800194e <waitingForESP+0x1a>
		}
	}
	log("waitingForESP end\r\n");
 800198a:	4807      	ldr	r0, [pc, #28]	; (80019a8 <waitingForESP+0x74>)
 800198c:	f7ff fb46 	bl	800101c <serialSend>
}
 8001990:	bf00      	nop
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	08009eb0 	.word	0x08009eb0
 800199c:	08009ec8 	.word	0x08009ec8
 80019a0:	08009edc 	.word	0x08009edc
 80019a4:	20000234 	.word	0x20000234
 80019a8:	08009ef4 	.word	0x08009ef4

080019ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019b0:	b0ab      	sub	sp, #172	; 0xac
 80019b2:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b4:	f000 fd1a 	bl	80023ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b8:	f000 f916 	bl	8001be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019bc:	f000 fa22 	bl	8001e04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019c0:	f000 f9f6 	bl	8001db0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80019c4:	f000 f9ca 	bl	8001d5c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80019c8:	f000 f976 	bl	8001cb8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADCEx_Calibration_Start(&hadc1);
//  ESP_Init("muminoiais_5G", "99775533");
//  HAL_UART_Receive_IT(&huart1, &uart_recv, 1);
  HAL_UART_Receive_IT(&huart1, &Rx_byte, 1);
 80019cc:	2201      	movs	r2, #1
 80019ce:	4971      	ldr	r1, [pc, #452]	; (8001b94 <main+0x1e8>)
 80019d0:	4871      	ldr	r0, [pc, #452]	; (8001b98 <main+0x1ec>)
 80019d2:	f002 f9f4 	bl	8003dbe <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &Rx_byte2, 1);
 80019d6:	2201      	movs	r2, #1
 80019d8:	4970      	ldr	r1, [pc, #448]	; (8001b9c <main+0x1f0>)
 80019da:	4871      	ldr	r0, [pc, #452]	; (8001ba0 <main+0x1f4>)
 80019dc:	f002 f9ef 	bl	8003dbe <HAL_UART_Receive_IT>
  log("**-----------------------------------------------\r\n");
 80019e0:	4870      	ldr	r0, [pc, #448]	; (8001ba4 <main+0x1f8>)
 80019e2:	f7ff fb1b 	bl	800101c <serialSend>
  char UART1_rxBuffer[100] = {'a'};
 80019e6:	2361      	movs	r3, #97	; 0x61
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	2260      	movs	r2, #96	; 0x60
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f003 f8fe 	bl	8004bf4 <memset>




  /*constrain part */
  float tempConst = 30.0;
 80019f8:	4b6b      	ldr	r3, [pc, #428]	; (8001ba8 <main+0x1fc>)
 80019fa:	677b      	str	r3, [r7, #116]	; 0x74
  float soilConst = 1000; // low = moist
 80019fc:	4b6b      	ldr	r3, [pc, #428]	; (8001bac <main+0x200>)
 80019fe:	673b      	str	r3, [r7, #112]	; 0x70
  float  humidConst = 60;  // high = moist
 8001a00:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <main+0x204>)
 8001a02:	66fb      	str	r3, [r7, #108]	; 0x6c
  int count = 1;
 8001a04:	2301      	movs	r3, #1
 8001a06:	67fb      	str	r3, [r7, #124]	; 0x7c

  //waiting for ESP ready by checking wifistatus
  waitingForESP();
 8001a08:	f7ff ff94 	bl	8001934 <waitingForESP>
  loadSetting();
 8001a0c:	f7ff fea6 	bl	800175c <loadSetting>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	count++;
 8001a10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a12:	3301      	adds	r3, #1
 8001a14:	67fb      	str	r3, [r7, #124]	; 0x7c
	/*---------------idiot wire soil data----------------------*/
//	getSoil(0);
//	sprintf(tmp,"count=%d %d\r\n",count,SoilHumidity);log(tmp);
	int val = (60*(parDoEvery))-(count % (60*parDoEvery))-30;
 8001a16:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <main+0x208>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4618      	mov	r0, r3
 8001a24:	4b63      	ldr	r3, [pc, #396]	; (8001bb4 <main+0x208>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	1a9b      	subs	r3, r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	461a      	mov	r2, r3
 8001a32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a34:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a38:	fb02 f201 	mul.w	r2, r2, r1
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	1ac3      	subs	r3, r0, r3
 8001a40:	3b1e      	subs	r3, #30
 8001a42:	67bb      	str	r3, [r7, #120]	; 0x78
	if( val > 300){
 8001a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a46:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a4a:	dd02      	ble.n	8001a52 <main+0xa6>
		val = 300;
 8001a4c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001a50:	67bb      	str	r3, [r7, #120]	; 0x78
	}
	sprintf(tmp,"count=%d  val = %d \r\n",count,val);log(tmp);
 8001a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a54:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a56:	4958      	ldr	r1, [pc, #352]	; (8001bb8 <main+0x20c>)
 8001a58:	4858      	ldr	r0, [pc, #352]	; (8001bbc <main+0x210>)
 8001a5a:	f003 ff53 	bl	8005904 <siprintf>
 8001a5e:	4857      	ldr	r0, [pc, #348]	; (8001bbc <main+0x210>)
 8001a60:	f7ff fadc 	bl	800101c <serialSend>
//	loadSetting();
	if(count % (60*parDoEvery) == 0){
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <main+0x208>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	461a      	mov	r2, r3
 8001a72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a74:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a78:	fb02 f201 	mul.w	r2, r2, r1
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d160      	bne.n	8001b44 <main+0x198>
		loadSetting();
 8001a82:	f7ff fe6b 	bl	800175c <loadSetting>
	//if(count % (10) == 0){
		powerOnSensor();
 8001a86:	f7ff fbdb 	bl	8001240 <powerOnSensor>
		if(getDHT(0)){
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fc70 	bl	8001370 <getDHT>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d054      	beq.n	8001b40 <main+0x194>
			getSoil(0);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7ff fcb6 	bl	8001408 <getSoil>
//			readSensor();
			sprintf(tmp,"%s %f %d %f %f %d\r\n",deviceID, Humidity, SoilHumidity, Temperature, light, relayRunning);
 8001a9c:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <main+0x214>)
 8001a9e:	681e      	ldr	r6, [r3, #0]
 8001aa0:	4b48      	ldr	r3, [pc, #288]	; (8001bc4 <main+0x218>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd67 	bl	8000578 <__aeabi_f2d>
 8001aaa:	4604      	mov	r4, r0
 8001aac:	460d      	mov	r5, r1
 8001aae:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <main+0x21c>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <main+0x220>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fd5d 	bl	8000578 <__aeabi_f2d>
 8001abe:	4680      	mov	r8, r0
 8001ac0:	4689      	mov	r9, r1
 8001ac2:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <main+0x224>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fd56 	bl	8000578 <__aeabi_f2d>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4940      	ldr	r1, [pc, #256]	; (8001bd4 <main+0x228>)
 8001ad2:	6809      	ldr	r1, [r1, #0]
 8001ad4:	9108      	str	r1, [sp, #32]
 8001ad6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001ada:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	9302      	str	r3, [sp, #8]
 8001ae2:	e9cd 4500 	strd	r4, r5, [sp]
 8001ae6:	4632      	mov	r2, r6
 8001ae8:	493b      	ldr	r1, [pc, #236]	; (8001bd8 <main+0x22c>)
 8001aea:	4834      	ldr	r0, [pc, #208]	; (8001bbc <main+0x210>)
 8001aec:	f003 ff0a 	bl	8005904 <siprintf>
			//sprintf(tmp,"%s %.2f %.2f %.2f %.2f %d\r\n",deviceID, Humidity, SoilHumidity, Temperature, light, relayRunning);
			log(tmp);
 8001af0:	4832      	ldr	r0, [pc, #200]	; (8001bbc <main+0x210>)
 8001af2:	f7ff fa93 	bl	800101c <serialSend>
			if(shoudWater(Humidity, SoilHumidity, Temperature)){
 8001af6:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <main+0x218>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <main+0x21c>)
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <main+0x220>)
 8001b04:	ed93 7a00 	vldr	s14, [r3]
 8001b08:	eef0 0a47 	vmov.f32	s1, s14
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b12:	f7ff fcd9 	bl	80014c8 <shoudWater>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00f      	beq.n	8001b3c <main+0x190>
				relayOn();
 8001b1c:	f7ff fbb8 	bl	8001290 <relayOn>
				upload();
 8001b20:	f7ff fc96 	bl	8001450 <upload>
				HAL_Delay(1000*parWater);
 8001b24:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <main+0x230>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fccd 	bl	80024d0 <HAL_Delay>
				relayOff();
 8001b36:	f7ff fbc1 	bl	80012bc <relayOff>
 8001b3a:	e001      	b.n	8001b40 <main+0x194>
			}else{
				upload();
 8001b3c:	f7ff fc88 	bl	8001450 <upload>
			}
		}
		powerOffSensor();
 8001b40:	f7ff fb94 	bl	800126c <powerOffSensor>
	}
//	int val = (60*(parDoEvery))-(count % (60*parDoEvery))-30;
//	sprintf(tmp,"val:  %d\r\n",val);
//	log(tmp);
	if(val >0 && powerSaveMode == 1){
 8001b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	dd1b      	ble.n	8001b82 <main+0x1d6>
 8001b4a:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <main+0x234>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d117      	bne.n	8001b82 <main+0x1d6>
		sprintf(tmp,"deepSleep(%d)\n",val);
 8001b52:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b54:	4923      	ldr	r1, [pc, #140]	; (8001be4 <main+0x238>)
 8001b56:	4819      	ldr	r0, [pc, #100]	; (8001bbc <main+0x210>)
 8001b58:	f003 fed4 	bl	8005904 <siprintf>
		wifisend(tmp);
 8001b5c:	4817      	ldr	r0, [pc, #92]	; (8001bbc <main+0x210>)
 8001b5e:	f7ff fa71 	bl	8001044 <wifisend>
		log(tmp);
 8001b62:	4816      	ldr	r0, [pc, #88]	; (8001bbc <main+0x210>)
 8001b64:	f7ff fa5a 	bl	800101c <serialSend>
		HAL_Delay(val*1000);
 8001b68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fcac 	bl	80024d0 <HAL_Delay>
		count += val;
 8001b78:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b7c:	4413      	add	r3, r2
 8001b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b80:	e003      	b.n	8001b8a <main+0x1de>
	}
	else{
		HAL_Delay(1000);
 8001b82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b86:	f000 fca3 	bl	80024d0 <HAL_Delay>
	}

	showESPOutput();
 8001b8a:	f7ff fd4f 	bl	800162c <showESPOutput>
	processCommand();
 8001b8e:	f7ff fdf5 	bl	800177c <processCommand>
  {
 8001b92:	e73d      	b.n	8001a10 <main+0x64>
 8001b94:	20007f00 	.word	0x20007f00
 8001b98:	20005678 	.word	0x20005678
 8001b9c:	2000562c 	.word	0x2000562c
 8001ba0:	200056bc 	.word	0x200056bc
 8001ba4:	08009f08 	.word	0x08009f08
 8001ba8:	41f00000 	.word	0x41f00000
 8001bac:	447a0000 	.word	0x447a0000
 8001bb0:	42700000 	.word	0x42700000
 8001bb4:	20000010 	.word	0x20000010
 8001bb8:	08009f3c 	.word	0x08009f3c
 8001bbc:	20000234 	.word	0x20000234
 8001bc0:	20000018 	.word	0x20000018
 8001bc4:	2000001c 	.word	0x2000001c
 8001bc8:	20000222 	.word	0x20000222
 8001bcc:	20000624 	.word	0x20000624
 8001bd0:	20000020 	.word	0x20000020
 8001bd4:	20000224 	.word	0x20000224
 8001bd8:	08009e7c 	.word	0x08009e7c
 8001bdc:	2000000c 	.word	0x2000000c
 8001be0:	20000014 	.word	0x20000014
 8001be4:	08009f54 	.word	0x08009f54

08001be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b094      	sub	sp, #80	; 0x50
 8001bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bee:	f107 0320 	add.w	r3, r7, #32
 8001bf2:	2230      	movs	r2, #48	; 0x30
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fffc 	bl	8004bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <SystemClock_Config+0xc8>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4a26      	ldr	r2, [pc, #152]	; (8001cb0 <SystemClock_Config+0xc8>)
 8001c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1c:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <SystemClock_Config+0xc8>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <SystemClock_Config+0xcc>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a20      	ldr	r2, [pc, #128]	; (8001cb4 <SystemClock_Config+0xcc>)
 8001c32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <SystemClock_Config+0xcc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c44:	2302      	movs	r3, #2
 8001c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c4c:	2310      	movs	r3, #16
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c50:	2302      	movs	r3, #2
 8001c52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c54:	2300      	movs	r3, #0
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c58:	2308      	movs	r3, #8
 8001c5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001c5c:	2354      	movs	r3, #84	; 0x54
 8001c5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c60:	2302      	movs	r3, #2
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c64:	2304      	movs	r3, #4
 8001c66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c68:	f107 0320 	add.w	r3, r7, #32
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 fb53 	bl	8003318 <HAL_RCC_OscConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c78:	f000 f97a 	bl	8001f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c80:	2302      	movs	r3, #2
 8001c82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	2102      	movs	r1, #2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f001 fdb5 	bl	8003808 <HAL_RCC_ClockConfig>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ca4:	f000 f964 	bl	8001f70 <Error_Handler>
  }
}
 8001ca8:	bf00      	nop
 8001caa:	3750      	adds	r7, #80	; 0x50
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40007000 	.word	0x40007000

08001cb8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001cca:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001ccc:	4a21      	ldr	r2, [pc, #132]	; (8001d54 <MX_ADC1_Init+0x9c>)
 8001cce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001cd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001cd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001cfa:	4a17      	ldr	r2, [pc, #92]	; (8001d58 <MX_ADC1_Init+0xa0>)
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cfe:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d12:	4b0f      	ldr	r3, [pc, #60]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001d1a:	f000 fbfd 	bl	8002518 <HAL_ADC_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d24:	f000 f924 	bl	8001f70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001d28:	2307      	movs	r3, #7
 8001d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d34:	463b      	mov	r3, r7
 8001d36:	4619      	mov	r1, r3
 8001d38:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_ADC1_Init+0x98>)
 8001d3a:	f000 fd7d 	bl	8002838 <HAL_ADC_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d44:	f000 f914 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20005630 	.word	0x20005630
 8001d54:	40012000 	.word	0x40012000
 8001d58:	0f000001 	.word	0x0f000001

08001d5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_USART1_UART_Init+0x4c>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	; (8001dac <MX_USART1_UART_Init+0x50>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <MX_USART1_UART_Init+0x4c>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_USART1_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_USART1_UART_Init+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_USART1_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_USART1_UART_Init+0x4c>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <MX_USART1_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_USART1_UART_Init+0x4c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_USART1_UART_Init+0x4c>)
 8001d94:	f001 ff34 	bl	8003c00 <HAL_UART_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d9e:	f000 f8e7 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20005678 	.word	0x20005678
 8001dac:	40011000 	.word	0x40011000

08001db0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <MX_USART2_UART_Init+0x50>)
 8001db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_USART2_UART_Init+0x4c>)
 8001de8:	f001 ff0a 	bl	8003c00 <HAL_UART_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001df2:	f000 f8bd 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200056bc 	.word	0x200056bc
 8001e00:	40004400 	.word	0x40004400

08001e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a4f      	ldr	r2, [pc, #316]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b49      	ldr	r3, [pc, #292]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a48      	ldr	r2, [pc, #288]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a41      	ldr	r2, [pc, #260]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b3f      	ldr	r3, [pc, #252]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a3a      	ldr	r2, [pc, #232]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2120      	movs	r1, #32
 8001e8e:	4835      	ldr	r0, [pc, #212]	; (8001f64 <MX_GPIO_Init+0x160>)
 8001e90:	f001 fa28 	bl	80032e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f44f 7144 	mov.w	r1, #784	; 0x310
 8001e9a:	4833      	ldr	r0, [pc, #204]	; (8001f68 <MX_GPIO_Init+0x164>)
 8001e9c:	f001 fa22 	bl	80032e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 8001ea6:	4831      	ldr	r0, [pc, #196]	; (8001f6c <MX_GPIO_Init+0x168>)
 8001ea8:	f001 fa1c 	bl	80032e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eb2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4829      	ldr	r0, [pc, #164]	; (8001f68 <MX_GPIO_Init+0x164>)
 8001ec4:	f001 f88a 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ec8:	2320      	movs	r3, #32
 8001eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	4821      	ldr	r0, [pc, #132]	; (8001f64 <MX_GPIO_Init+0x160>)
 8001ee0:	f001 f87c 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
 8001ee4:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	481a      	ldr	r0, [pc, #104]	; (8001f68 <MX_GPIO_Init+0x164>)
 8001efe:	f001 f86d 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4814      	ldr	r0, [pc, #80]	; (8001f6c <MX_GPIO_Init+0x168>)
 8001f1c:	f001 f85e 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	480c      	ldr	r0, [pc, #48]	; (8001f68 <MX_GPIO_Init+0x164>)
 8001f36:	f001 f851 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	4806      	ldr	r0, [pc, #24]	; (8001f6c <MX_GPIO_Init+0x168>)
 8001f54:	f001 f842 	bl	8002fdc <HAL_GPIO_Init>

}
 8001f58:	bf00      	nop
 8001f5a:	3728      	adds	r7, #40	; 0x28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020800 	.word	0x40020800
 8001f6c:	40020400 	.word	0x40020400

08001f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <Error_Handler+0x8>
	...

08001f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <HAL_MspInit+0x4c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a0f      	ldr	r2, [pc, #60]	; (8001fc8 <HAL_MspInit+0x4c>)
 8001f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <HAL_MspInit+0x4c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_MspInit+0x4c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <HAL_MspInit+0x4c>)
 8001fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fac:	6413      	str	r3, [r2, #64]	; 0x40
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_MspInit+0x4c>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800

08001fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a17      	ldr	r2, [pc, #92]	; (8002048 <HAL_ADC_MspInit+0x7c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d127      	bne.n	800203e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_ADC_MspInit+0x80>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	4a15      	ldr	r2, [pc, #84]	; (800204c <HAL_ADC_MspInit+0x80>)
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_ADC_MspInit+0x80>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_ADC_MspInit+0x80>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_ADC_MspInit+0x80>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_ADC_MspInit+0x80>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202a:	2303      	movs	r3, #3
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <HAL_ADC_MspInit+0x84>)
 800203a:	f000 ffcf 	bl	8002fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	3728      	adds	r7, #40	; 0x28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40012000 	.word	0x40012000
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000

08002054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a3a      	ldr	r2, [pc, #232]	; (800215c <HAL_UART_MspInit+0x108>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d135      	bne.n	80020e2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_UART_MspInit+0x10c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_UART_MspInit+0x10c>)
 8002080:	f043 0310 	orr.w	r3, r3, #16
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b36      	ldr	r3, [pc, #216]	; (8002160 <HAL_UART_MspInit+0x10c>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	4b32      	ldr	r3, [pc, #200]	; (8002160 <HAL_UART_MspInit+0x10c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a31      	ldr	r2, [pc, #196]	; (8002160 <HAL_UART_MspInit+0x10c>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <HAL_UART_MspInit+0x10c>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b4:	2302      	movs	r3, #2
 80020b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020c0:	2307      	movs	r3, #7
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	4619      	mov	r1, r3
 80020ca:	4826      	ldr	r0, [pc, #152]	; (8002164 <HAL_UART_MspInit+0x110>)
 80020cc:	f000 ff86 	bl	8002fdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	2100      	movs	r1, #0
 80020d4:	2025      	movs	r0, #37	; 0x25
 80020d6:	f000 feb8 	bl	8002e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020da:	2025      	movs	r0, #37	; 0x25
 80020dc:	f000 fed1 	bl	8002e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020e0:	e038      	b.n	8002154 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a20      	ldr	r2, [pc, #128]	; (8002168 <HAL_UART_MspInit+0x114>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d133      	bne.n	8002154 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <HAL_UART_MspInit+0x10c>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	4a1a      	ldr	r2, [pc, #104]	; (8002160 <HAL_UART_MspInit+0x10c>)
 80020f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fa:	6413      	str	r3, [r2, #64]	; 0x40
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <HAL_UART_MspInit+0x10c>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	4b14      	ldr	r3, [pc, #80]	; (8002160 <HAL_UART_MspInit+0x10c>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <HAL_UART_MspInit+0x10c>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6313      	str	r3, [r2, #48]	; 0x30
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_UART_MspInit+0x10c>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002124:	230c      	movs	r3, #12
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002134:	2307      	movs	r3, #7
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4619      	mov	r1, r3
 800213e:	4809      	ldr	r0, [pc, #36]	; (8002164 <HAL_UART_MspInit+0x110>)
 8002140:	f000 ff4c 	bl	8002fdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2100      	movs	r1, #0
 8002148:	2026      	movs	r0, #38	; 0x26
 800214a:	f000 fe7e 	bl	8002e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800214e:	2026      	movs	r0, #38	; 0x26
 8002150:	f000 fe97 	bl	8002e82 <HAL_NVIC_EnableIRQ>
}
 8002154:	bf00      	nop
 8002156:	3730      	adds	r7, #48	; 0x30
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40011000 	.word	0x40011000
 8002160:	40023800 	.word	0x40023800
 8002164:	40020000 	.word	0x40020000
 8002168:	40004400 	.word	0x40004400

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <NMI_Handler+0x4>

08002172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <HardFault_Handler+0x4>

08002178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <MemManage_Handler+0x4>

0800217e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <BusFault_Handler+0x4>

08002184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <UsageFault_Handler+0x4>

0800218a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b8:	f000 f96a 	bl	8002490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <USART1_IRQHandler+0x10>)
 80021c6:	f001 fe2b 	bl	8003e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20005678 	.word	0x20005678

080021d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <USART2_IRQHandler+0x10>)
 80021da:	f001 fe21 	bl	8003e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200056bc 	.word	0x200056bc

080021e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
	return 1;
 80021ec:	2301      	movs	r3, #1
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_kill>:

int _kill(int pid, int sig)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002202:	f002 fccd 	bl	8004ba0 <__errno>
 8002206:	4603      	mov	r3, r0
 8002208:	2216      	movs	r2, #22
 800220a:	601a      	str	r2, [r3, #0]
	return -1;
 800220c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_exit>:

void _exit (int status)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002220:	f04f 31ff 	mov.w	r1, #4294967295
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ffe7 	bl	80021f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800222a:	e7fe      	b.n	800222a <_exit+0x12>

0800222c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e00a      	b.n	8002254 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800223e:	f3af 8000 	nop.w
 8002242:	4601      	mov	r1, r0
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	60ba      	str	r2, [r7, #8]
 800224a:	b2ca      	uxtb	r2, r1
 800224c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	dbf0      	blt.n	800223e <_read+0x12>
	}

return len;
 800225c:	687b      	ldr	r3, [r7, #4]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e009      	b.n	800228c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	60ba      	str	r2, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3301      	adds	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbf1      	blt.n	8002278 <_write+0x12>
	}
	return len;
 8002294:	687b      	ldr	r3, [r7, #4]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <_close>:

int _close(int file)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
	return -1;
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022c6:	605a      	str	r2, [r3, #4]
	return 0;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <_isatty>:

int _isatty(int file)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
	return 1;
 80022de:	2301      	movs	r3, #1
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
	return 0;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <_sbrk+0x5c>)
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <_sbrk+0x60>)
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <_sbrk+0x64>)
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <_sbrk+0x68>)
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <_sbrk+0x64>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	429a      	cmp	r2, r3
 8002336:	d207      	bcs.n	8002348 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002338:	f002 fc32 	bl	8004ba0 <__errno>
 800233c:	4603      	mov	r3, r0
 800233e:	220c      	movs	r2, #12
 8002340:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295
 8002346:	e009      	b.n	800235c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <_sbrk+0x64>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <_sbrk+0x64>)
 8002358:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235a:	68fb      	ldr	r3, [r7, #12]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20020000 	.word	0x20020000
 8002368:	00000400 	.word	0x00000400
 800236c:	20000228 	.word	0x20000228
 8002370:	20007f18 	.word	0x20007f18

08002374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002378:	4b06      	ldr	r3, [pc, #24]	; (8002394 <SystemInit+0x20>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237e:	4a05      	ldr	r2, [pc, #20]	; (8002394 <SystemInit+0x20>)
 8002380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002398:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800239c:	480d      	ldr	r0, [pc, #52]	; (80023d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800239e:	490e      	ldr	r1, [pc, #56]	; (80023d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023a0:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a4:	e002      	b.n	80023ac <LoopCopyDataInit>

080023a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023aa:	3304      	adds	r3, #4

080023ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b0:	d3f9      	bcc.n	80023a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b2:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023b4:	4c0b      	ldr	r4, [pc, #44]	; (80023e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b8:	e001      	b.n	80023be <LoopFillZerobss>

080023ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023bc:	3204      	adds	r2, #4

080023be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c0:	d3fb      	bcc.n	80023ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023c2:	f7ff ffd7 	bl	8002374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023c6:	f002 fbf1 	bl	8004bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ca:	f7ff faef 	bl	80019ac <main>
  bx  lr    
 80023ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d8:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80023dc:	0800a464 	.word	0x0800a464
  ldr r2, =_sbss
 80023e0:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80023e4:	20007f18 	.word	0x20007f18

080023e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC_IRQHandler>
	...

080023ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023f0:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_Init+0x40>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a0d      	ldr	r2, [pc, #52]	; (800242c <HAL_Init+0x40>)
 80023f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_Init+0x40>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <HAL_Init+0x40>)
 8002402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002406:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <HAL_Init+0x40>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a07      	ldr	r2, [pc, #28]	; (800242c <HAL_Init+0x40>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002414:	2003      	movs	r0, #3
 8002416:	f000 fd0d 	bl	8002e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241a:	2000      	movs	r0, #0
 800241c:	f000 f808 	bl	8002430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002420:	f7ff fdac 	bl	8001f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00

08002430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_InitTick+0x54>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_InitTick+0x58>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002446:	fbb3 f3f1 	udiv	r3, r3, r1
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f000 fd25 	bl	8002e9e <HAL_SYSTICK_Config>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00e      	b.n	800247c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b0f      	cmp	r3, #15
 8002462:	d80a      	bhi.n	800247a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002464:	2200      	movs	r2, #0
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	f04f 30ff 	mov.w	r0, #4294967295
 800246c:	f000 fced 	bl	8002e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002470:	4a06      	ldr	r2, [pc, #24]	; (800248c <HAL_InitTick+0x5c>)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e000      	b.n	800247c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000024 	.word	0x20000024
 8002488:	2000002c 	.word	0x2000002c
 800248c:	20000028 	.word	0x20000028

08002490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_IncTick+0x20>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_IncTick+0x24>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_IncTick+0x24>)
 80024a2:	6013      	str	r3, [r2, #0]
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	2000002c 	.word	0x2000002c
 80024b4:	20007f04 	.word	0x20007f04

080024b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_GetTick+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20007f04 	.word	0x20007f04

080024d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff ffee 	bl	80024b8 <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d005      	beq.n	80024f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_Delay+0x44>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024f6:	bf00      	nop
 80024f8:	f7ff ffde 	bl	80024b8 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d8f7      	bhi.n	80024f8 <HAL_Delay+0x28>
  {
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000002c 	.word	0x2000002c

08002518 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e033      	b.n	8002596 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fd48 	bl	8001fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	d118      	bne.n	8002588 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800255e:	f023 0302 	bic.w	r3, r3, #2
 8002562:	f043 0202 	orr.w	r2, r3, #2
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fa96 	bl	8002a9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	f043 0201 	orr.w	r2, r3, #1
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
 8002586:	e001      	b.n	800258c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_Start+0x1a>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e097      	b.n	80026ea <HAL_ADC_Start+0x14a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d018      	beq.n	8002602 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025e0:	4b45      	ldr	r3, [pc, #276]	; (80026f8 <HAL_ADC_Start+0x158>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a45      	ldr	r2, [pc, #276]	; (80026fc <HAL_ADC_Start+0x15c>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0c9a      	lsrs	r2, r3, #18
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025f4:	e002      	b.n	80025fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f9      	bne.n	80025f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b01      	cmp	r3, #1
 800260e:	d15f      	bne.n	80026d0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800263a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800264a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264e:	d106      	bne.n	800265e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	f023 0206 	bic.w	r2, r3, #6
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	645a      	str	r2, [r3, #68]	; 0x44
 800265c:	e002      	b.n	8002664 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800266c:	4b24      	ldr	r3, [pc, #144]	; (8002700 <HAL_ADC_Start+0x160>)
 800266e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002678:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 031f 	and.w	r3, r3, #31
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d129      	bne.n	80026e8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	e020      	b.n	80026e8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a16      	ldr	r2, [pc, #88]	; (8002704 <HAL_ADC_Start+0x164>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d11b      	bne.n	80026e8 <HAL_ADC_Start+0x148>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d114      	bne.n	80026e8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	e00b      	b.n	80026e8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	f043 0210 	orr.w	r2, r3, #16
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000024 	.word	0x20000024
 80026fc:	431bde83 	.word	0x431bde83
 8002700:	40012300 	.word	0x40012300
 8002704:	40012000 	.word	0x40012000

08002708 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002724:	d113      	bne.n	800274e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002734:	d10b      	bne.n	800274e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f043 0220 	orr.w	r2, r3, #32
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e063      	b.n	8002816 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800274e:	f7ff feb3 	bl	80024b8 <HAL_GetTick>
 8002752:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002754:	e021      	b.n	800279a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d01d      	beq.n	800279a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d007      	beq.n	8002774 <HAL_ADC_PollForConversion+0x6c>
 8002764:	f7ff fea8 	bl	80024b8 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d212      	bcs.n	800279a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d00b      	beq.n	800279a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f043 0204 	orr.w	r2, r3, #4
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e03d      	b.n	8002816 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d1d6      	bne.n	8002756 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0212 	mvn.w	r2, #18
 80027b0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d123      	bne.n	8002814 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d11f      	bne.n	8002814 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x1c>
 8002850:	2302      	movs	r3, #2
 8002852:	e113      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x244>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b09      	cmp	r3, #9
 8002862:	d925      	bls.n	80028b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68d9      	ldr	r1, [r3, #12]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	3b1e      	subs	r3, #30
 800287a:	2207      	movs	r2, #7
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43da      	mvns	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	400a      	ands	r2, r1
 8002888:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68d9      	ldr	r1, [r3, #12]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	4618      	mov	r0, r3
 800289c:	4603      	mov	r3, r0
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4403      	add	r3, r0
 80028a2:	3b1e      	subs	r3, #30
 80028a4:	409a      	lsls	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	e022      	b.n	80028f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6919      	ldr	r1, [r3, #16]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	2207      	movs	r2, #7
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	400a      	ands	r2, r1
 80028d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6919      	ldr	r1, [r3, #16]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	4618      	mov	r0, r3
 80028e6:	4603      	mov	r3, r0
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4403      	add	r3, r0
 80028ec:	409a      	lsls	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b06      	cmp	r3, #6
 80028fc:	d824      	bhi.n	8002948 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	3b05      	subs	r3, #5
 8002910:	221f      	movs	r2, #31
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	43da      	mvns	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	400a      	ands	r2, r1
 800291e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	b29b      	uxth	r3, r3
 800292c:	4618      	mov	r0, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	3b05      	subs	r3, #5
 800293a:	fa00 f203 	lsl.w	r2, r0, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	635a      	str	r2, [r3, #52]	; 0x34
 8002946:	e04c      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b0c      	cmp	r3, #12
 800294e:	d824      	bhi.n	800299a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	3b23      	subs	r3, #35	; 0x23
 8002962:	221f      	movs	r2, #31
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43da      	mvns	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	400a      	ands	r2, r1
 8002970:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	4618      	mov	r0, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	3b23      	subs	r3, #35	; 0x23
 800298c:	fa00 f203 	lsl.w	r2, r0, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
 8002998:	e023      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	3b41      	subs	r3, #65	; 0x41
 80029ac:	221f      	movs	r2, #31
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	400a      	ands	r2, r1
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	4618      	mov	r0, r3
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	3b41      	subs	r3, #65	; 0x41
 80029d6:	fa00 f203 	lsl.w	r2, r0, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e2:	4b29      	ldr	r3, [pc, #164]	; (8002a88 <HAL_ADC_ConfigChannel+0x250>)
 80029e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a28      	ldr	r2, [pc, #160]	; (8002a8c <HAL_ADC_ConfigChannel+0x254>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d10f      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x1d8>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b12      	cmp	r3, #18
 80029f6:	d10b      	bne.n	8002a10 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1d      	ldr	r2, [pc, #116]	; (8002a8c <HAL_ADC_ConfigChannel+0x254>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d12b      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x23a>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <HAL_ADC_ConfigChannel+0x258>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d003      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0x1f4>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b11      	cmp	r3, #17
 8002a2a:	d122      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <HAL_ADC_ConfigChannel+0x258>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d111      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a4e:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <HAL_ADC_ConfigChannel+0x25c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <HAL_ADC_ConfigChannel+0x260>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	0c9a      	lsrs	r2, r3, #18
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a64:	e002      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f9      	bne.n	8002a66 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40012300 	.word	0x40012300
 8002a8c:	40012000 	.word	0x40012000
 8002a90:	10000012 	.word	0x10000012
 8002a94:	20000024 	.word	0x20000024
 8002a98:	431bde83 	.word	0x431bde83

08002a9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aa4:	4b79      	ldr	r3, [pc, #484]	; (8002c8c <ADC_Init+0x1f0>)
 8002aa6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	431a      	orrs	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	021a      	lsls	r2, r3, #8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002af4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6899      	ldr	r1, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <ADC_Init+0x1f4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d022      	beq.n	8002b7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6899      	ldr	r1, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6899      	ldr	r1, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	e00f      	b.n	8002b9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0202 	bic.w	r2, r2, #2
 8002ba8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6899      	ldr	r1, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	7e1b      	ldrb	r3, [r3, #24]
 8002bb4:	005a      	lsls	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01b      	beq.n	8002c00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002be6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	035a      	lsls	r2, r3, #13
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	e007      	b.n	8002c10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	051a      	lsls	r2, r3, #20
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6899      	ldr	r1, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c52:	025a      	lsls	r2, r3, #9
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	029a      	lsls	r2, r3, #10
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	609a      	str	r2, [r3, #8]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	40012300 	.word	0x40012300
 8002c90:	0f000001 	.word	0x0f000001

08002c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cc6:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	60d3      	str	r3, [r2, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce0:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	f003 0307 	and.w	r3, r3, #7
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	db0b      	blt.n	8002d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	f003 021f 	and.w	r2, r3, #31
 8002d10:	4907      	ldr	r1, [pc, #28]	; (8002d30 <__NVIC_EnableIRQ+0x38>)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2001      	movs	r0, #1
 8002d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000e100 	.word	0xe000e100

08002d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	db0a      	blt.n	8002d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	490c      	ldr	r1, [pc, #48]	; (8002d80 <__NVIC_SetPriority+0x4c>)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	0112      	lsls	r2, r2, #4
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	440b      	add	r3, r1
 8002d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d5c:	e00a      	b.n	8002d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	4908      	ldr	r1, [pc, #32]	; (8002d84 <__NVIC_SetPriority+0x50>)
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	3b04      	subs	r3, #4
 8002d6c:	0112      	lsls	r2, r2, #4
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	440b      	add	r3, r1
 8002d72:	761a      	strb	r2, [r3, #24]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000e100 	.word	0xe000e100
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b089      	sub	sp, #36	; 0x24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f1c3 0307 	rsb	r3, r3, #7
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf28      	it	cs
 8002da6:	2304      	movcs	r3, #4
 8002da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3304      	adds	r3, #4
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d902      	bls.n	8002db8 <NVIC_EncodePriority+0x30>
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3b03      	subs	r3, #3
 8002db6:	e000      	b.n	8002dba <NVIC_EncodePriority+0x32>
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43da      	mvns	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	401a      	ands	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	4313      	orrs	r3, r2
         );
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	; 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e00:	d301      	bcc.n	8002e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00f      	b.n	8002e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e06:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <SysTick_Config+0x40>)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e0e:	210f      	movs	r1, #15
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f7ff ff8e 	bl	8002d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <SysTick_Config+0x40>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e1e:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <SysTick_Config+0x40>)
 8002e20:	2207      	movs	r2, #7
 8002e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	e000e010 	.word	0xe000e010

08002e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ff29 	bl	8002c94 <__NVIC_SetPriorityGrouping>
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e5c:	f7ff ff3e 	bl	8002cdc <__NVIC_GetPriorityGrouping>
 8002e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	6978      	ldr	r0, [r7, #20]
 8002e68:	f7ff ff8e 	bl	8002d88 <NVIC_EncodePriority>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff5d 	bl	8002d34 <__NVIC_SetPriority>
}
 8002e7a:	bf00      	nop
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff31 	bl	8002cf8 <__NVIC_EnableIRQ>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ffa2 	bl	8002df0 <SysTick_Config>
 8002eac:	4603      	mov	r3, r0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff faf8 	bl	80024b8 <HAL_GetTick>
 8002ec8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d008      	beq.n	8002ee8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2280      	movs	r2, #128	; 0x80
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e052      	b.n	8002f8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0216 	bic.w	r2, r2, #22
 8002ef6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d103      	bne.n	8002f18 <HAL_DMA_Abort+0x62>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0208 	bic.w	r2, r2, #8
 8002f26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f38:	e013      	b.n	8002f62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f3a:	f7ff fabd 	bl	80024b8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b05      	cmp	r3, #5
 8002f46:	d90c      	bls.n	8002f62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2203      	movs	r2, #3
 8002f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e015      	b.n	8002f8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e4      	bne.n	8002f3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f74:	223f      	movs	r2, #63	; 0x3f
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e00c      	b.n	8002fce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2205      	movs	r2, #5
 8002fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e159      	b.n	80032ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	429a      	cmp	r2, r3
 8003012:	f040 8148 	bne.w	80032a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d005      	beq.n	800302e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302a:	2b02      	cmp	r3, #2
 800302c:	d130      	bne.n	8003090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2203      	movs	r2, #3
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003064:	2201      	movs	r2, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 0201 	and.w	r2, r3, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b03      	cmp	r3, #3
 800309a:	d017      	beq.n	80030cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d123      	bne.n	8003120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	08da      	lsrs	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3208      	adds	r2, #8
 80030e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	220f      	movs	r2, #15
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	08da      	lsrs	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3208      	adds	r2, #8
 800311a:	69b9      	ldr	r1, [r7, #24]
 800311c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	2203      	movs	r2, #3
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0203 	and.w	r2, r3, #3
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80a2 	beq.w	80032a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	4b57      	ldr	r3, [pc, #348]	; (80032c4 <HAL_GPIO_Init+0x2e8>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	4a56      	ldr	r2, [pc, #344]	; (80032c4 <HAL_GPIO_Init+0x2e8>)
 800316c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003170:	6453      	str	r3, [r2, #68]	; 0x44
 8003172:	4b54      	ldr	r3, [pc, #336]	; (80032c4 <HAL_GPIO_Init+0x2e8>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800317e:	4a52      	ldr	r2, [pc, #328]	; (80032c8 <HAL_GPIO_Init+0x2ec>)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	220f      	movs	r2, #15
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a49      	ldr	r2, [pc, #292]	; (80032cc <HAL_GPIO_Init+0x2f0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d019      	beq.n	80031de <HAL_GPIO_Init+0x202>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a48      	ldr	r2, [pc, #288]	; (80032d0 <HAL_GPIO_Init+0x2f4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_GPIO_Init+0x1fe>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a47      	ldr	r2, [pc, #284]	; (80032d4 <HAL_GPIO_Init+0x2f8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00d      	beq.n	80031d6 <HAL_GPIO_Init+0x1fa>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a46      	ldr	r2, [pc, #280]	; (80032d8 <HAL_GPIO_Init+0x2fc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <HAL_GPIO_Init+0x1f6>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a45      	ldr	r2, [pc, #276]	; (80032dc <HAL_GPIO_Init+0x300>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_GPIO_Init+0x1f2>
 80031ca:	2304      	movs	r3, #4
 80031cc:	e008      	b.n	80031e0 <HAL_GPIO_Init+0x204>
 80031ce:	2307      	movs	r3, #7
 80031d0:	e006      	b.n	80031e0 <HAL_GPIO_Init+0x204>
 80031d2:	2303      	movs	r3, #3
 80031d4:	e004      	b.n	80031e0 <HAL_GPIO_Init+0x204>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e002      	b.n	80031e0 <HAL_GPIO_Init+0x204>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <HAL_GPIO_Init+0x204>
 80031de:	2300      	movs	r3, #0
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f002 0203 	and.w	r2, r2, #3
 80031e6:	0092      	lsls	r2, r2, #2
 80031e8:	4093      	lsls	r3, r2
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f0:	4935      	ldr	r1, [pc, #212]	; (80032c8 <HAL_GPIO_Init+0x2ec>)
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	3302      	adds	r3, #2
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031fe:	4b38      	ldr	r3, [pc, #224]	; (80032e0 <HAL_GPIO_Init+0x304>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003222:	4a2f      	ldr	r2, [pc, #188]	; (80032e0 <HAL_GPIO_Init+0x304>)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003228:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <HAL_GPIO_Init+0x304>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800324c:	4a24      	ldr	r2, [pc, #144]	; (80032e0 <HAL_GPIO_Init+0x304>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003252:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <HAL_GPIO_Init+0x304>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003276:	4a1a      	ldr	r2, [pc, #104]	; (80032e0 <HAL_GPIO_Init+0x304>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <HAL_GPIO_Init+0x304>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a0:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <HAL_GPIO_Init+0x304>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3301      	adds	r3, #1
 80032aa:	61fb      	str	r3, [r7, #28]
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	2b0f      	cmp	r3, #15
 80032b0:	f67f aea2 	bls.w	8002ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	3724      	adds	r7, #36	; 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40013800 	.word	0x40013800
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40020400 	.word	0x40020400
 80032d4:	40020800 	.word	0x40020800
 80032d8:	40020c00 	.word	0x40020c00
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40013c00 	.word	0x40013c00

080032e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
 80032f0:	4613      	mov	r3, r2
 80032f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f4:	787b      	ldrb	r3, [r7, #1]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003300:	e003      	b.n	800330a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	619a      	str	r2, [r3, #24]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e264      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d075      	beq.n	8003422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003336:	4ba3      	ldr	r3, [pc, #652]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b04      	cmp	r3, #4
 8003340:	d00c      	beq.n	800335c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003342:	4ba0      	ldr	r3, [pc, #640]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334a:	2b08      	cmp	r3, #8
 800334c:	d112      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334e:	4b9d      	ldr	r3, [pc, #628]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335a:	d10b      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	4b99      	ldr	r3, [pc, #612]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d05b      	beq.n	8003420 <HAL_RCC_OscConfig+0x108>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d157      	bne.n	8003420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e23f      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337c:	d106      	bne.n	800338c <HAL_RCC_OscConfig+0x74>
 800337e:	4b91      	ldr	r3, [pc, #580]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a90      	ldr	r2, [pc, #576]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e01d      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x98>
 8003396:	4b8b      	ldr	r3, [pc, #556]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a8a      	ldr	r2, [pc, #552]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b88      	ldr	r3, [pc, #544]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a87      	ldr	r2, [pc, #540]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 80033b0:	4b84      	ldr	r3, [pc, #528]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a83      	ldr	r2, [pc, #524]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b81      	ldr	r3, [pc, #516]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a80      	ldr	r2, [pc, #512]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7ff f872 	bl	80024b8 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d8:	f7ff f86e 	bl	80024b8 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e204      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0xc0>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7ff f85e 	bl	80024b8 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003400:	f7ff f85a 	bl	80024b8 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1f0      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	4b6c      	ldr	r3, [pc, #432]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0xe8>
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d063      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800342e:	4b65      	ldr	r3, [pc, #404]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343a:	4b62      	ldr	r3, [pc, #392]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003442:	2b08      	cmp	r3, #8
 8003444:	d11c      	bne.n	8003480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b5f      	ldr	r3, [pc, #380]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d116      	bne.n	8003480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	4b5c      	ldr	r3, [pc, #368]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_RCC_OscConfig+0x152>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d001      	beq.n	800346a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e1c4      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346a:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4952      	ldr	r1, [pc, #328]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	e03a      	b.n	80034f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d020      	beq.n	80034ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003488:	4b4f      	ldr	r3, [pc, #316]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7ff f813 	bl	80024b8 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003496:	f7ff f80f 	bl	80024b8 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e1a5      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b4:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4940      	ldr	r1, [pc, #256]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
 80034c8:	e015      	b.n	80034f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ca:	4b3f      	ldr	r3, [pc, #252]	; (80035c8 <HAL_RCC_OscConfig+0x2b0>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe fff2 	bl	80024b8 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d8:	f7fe ffee 	bl	80024b8 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e184      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d030      	beq.n	8003564 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350a:	4b30      	ldr	r3, [pc, #192]	; (80035cc <HAL_RCC_OscConfig+0x2b4>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fe ffd2 	bl	80024b8 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003518:	f7fe ffce 	bl	80024b8 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e164      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x200>
 8003536:	e015      	b.n	8003564 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003538:	4b24      	ldr	r3, [pc, #144]	; (80035cc <HAL_RCC_OscConfig+0x2b4>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7fe ffbb 	bl	80024b8 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003546:	f7fe ffb7 	bl	80024b8 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e14d      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a0 	beq.w	80036b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10f      	bne.n	80035a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	6413      	str	r3, [r2, #64]	; 0x40
 8003592:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_RCC_OscConfig+0x2b8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d121      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <HAL_RCC_OscConfig+0x2b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <HAL_RCC_OscConfig+0x2b8>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fe ff7d 	bl	80024b8 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	e011      	b.n	80035e6 <HAL_RCC_OscConfig+0x2ce>
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
 80035c8:	42470000 	.word	0x42470000
 80035cc:	42470e80 	.word	0x42470e80
 80035d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d4:	f7fe ff70 	bl	80024b8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e106      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e6:	4b85      	ldr	r3, [pc, #532]	; (80037fc <HAL_RCC_OscConfig+0x4e4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d106      	bne.n	8003608 <HAL_RCC_OscConfig+0x2f0>
 80035fa:	4b81      	ldr	r3, [pc, #516]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a80      	ldr	r2, [pc, #512]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	e01c      	b.n	8003642 <HAL_RCC_OscConfig+0x32a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b05      	cmp	r3, #5
 800360e:	d10c      	bne.n	800362a <HAL_RCC_OscConfig+0x312>
 8003610:	4b7b      	ldr	r3, [pc, #492]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	4a7a      	ldr	r2, [pc, #488]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003616:	f043 0304 	orr.w	r3, r3, #4
 800361a:	6713      	str	r3, [r2, #112]	; 0x70
 800361c:	4b78      	ldr	r3, [pc, #480]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	4a77      	ldr	r2, [pc, #476]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6713      	str	r3, [r2, #112]	; 0x70
 8003628:	e00b      	b.n	8003642 <HAL_RCC_OscConfig+0x32a>
 800362a:	4b75      	ldr	r3, [pc, #468]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a74      	ldr	r2, [pc, #464]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	4b72      	ldr	r3, [pc, #456]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a71      	ldr	r2, [pc, #452]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 800363c:	f023 0304 	bic.w	r3, r3, #4
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d015      	beq.n	8003676 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364a:	f7fe ff35 	bl	80024b8 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	e00a      	b.n	8003668 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003652:	f7fe ff31 	bl	80024b8 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0c5      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003668:	4b65      	ldr	r3, [pc, #404]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ee      	beq.n	8003652 <HAL_RCC_OscConfig+0x33a>
 8003674:	e014      	b.n	80036a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003676:	f7fe ff1f 	bl	80024b8 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367c:	e00a      	b.n	8003694 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fe ff1b 	bl	80024b8 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e0af      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003694:	4b5a      	ldr	r3, [pc, #360]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1ee      	bne.n	800367e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a6:	4b56      	ldr	r3, [pc, #344]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a55      	ldr	r2, [pc, #340]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 80036ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 809b 	beq.w	80037f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036bc:	4b50      	ldr	r3, [pc, #320]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d05c      	beq.n	8003782 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d141      	bne.n	8003754 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d0:	4b4c      	ldr	r3, [pc, #304]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d6:	f7fe feef 	bl	80024b8 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036de:	f7fe feeb 	bl	80024b8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e081      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f0:	4b43      	ldr	r3, [pc, #268]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	019b      	lsls	r3, r3, #6
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	085b      	lsrs	r3, r3, #1
 8003714:	3b01      	subs	r3, #1
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	061b      	lsls	r3, r3, #24
 8003720:	4937      	ldr	r1, [pc, #220]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003726:	4b37      	ldr	r3, [pc, #220]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe fec4 	bl	80024b8 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe fec0 	bl	80024b8 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e056      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003746:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x41c>
 8003752:	e04e      	b.n	80037f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003754:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7fe fead 	bl	80024b8 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003762:	f7fe fea9 	bl	80024b8 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e03f      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003774:	4b22      	ldr	r3, [pc, #136]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1f0      	bne.n	8003762 <HAL_RCC_OscConfig+0x44a>
 8003780:	e037      	b.n	80037f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e032      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800378e:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <HAL_RCC_OscConfig+0x4e8>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d028      	beq.n	80037ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d121      	bne.n	80037ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d11a      	bne.n	80037ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037be:	4013      	ands	r3, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d111      	bne.n	80037ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	3b01      	subs	r3, #1
 80037d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037da:	429a      	cmp	r2, r3
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d001      	beq.n	80037f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40007000 	.word	0x40007000
 8003800:	40023800 	.word	0x40023800
 8003804:	42470060 	.word	0x42470060

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0cc      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800381c:	4b68      	ldr	r3, [pc, #416]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d90c      	bls.n	8003844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b65      	ldr	r3, [pc, #404]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b63      	ldr	r3, [pc, #396]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0b8      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800385c:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a58      	ldr	r2, [pc, #352]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003874:	4b53      	ldr	r3, [pc, #332]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800387e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003880:	4b50      	ldr	r3, [pc, #320]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	494d      	ldr	r1, [pc, #308]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d044      	beq.n	8003928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	4b47      	ldr	r3, [pc, #284]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d119      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e07f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c6:	4b3f      	ldr	r3, [pc, #252]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e06f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d6:	4b3b      	ldr	r3, [pc, #236]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e067      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038e6:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4934      	ldr	r1, [pc, #208]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f8:	f7fe fdde 	bl	80024b8 <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7fe fdda 	bl	80024b8 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e04f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 020c 	and.w	r2, r3, #12
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	429a      	cmp	r2, r3
 8003926:	d1eb      	bne.n	8003900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d20c      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e032      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4916      	ldr	r1, [pc, #88]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	490e      	ldr	r1, [pc, #56]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800398e:	f000 f821 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003992:	4602      	mov	r2, r0
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	490a      	ldr	r1, [pc, #40]	; (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	5ccb      	ldrb	r3, [r1, r3]
 80039a2:	fa22 f303 	lsr.w	r3, r2, r3
 80039a6:	4a09      	ldr	r2, [pc, #36]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80039a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fd3e 	bl	8002430 <HAL_InitTick>

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023c00 	.word	0x40023c00
 80039c4:	40023800 	.word	0x40023800
 80039c8:	08009f70 	.word	0x08009f70
 80039cc:	20000024 	.word	0x20000024
 80039d0:	20000028 	.word	0x20000028

080039d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	607b      	str	r3, [r7, #4]
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	2300      	movs	r3, #0
 80039e6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ec:	4b67      	ldr	r3, [pc, #412]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d00d      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x40>
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	f200 80bd 	bhi.w	8003b78 <HAL_RCC_GetSysClockFreq+0x1a4>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x34>
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d003      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a06:	e0b7      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b61      	ldr	r3, [pc, #388]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a0a:	60bb      	str	r3, [r7, #8]
       break;
 8003a0c:	e0b7      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a0e:	4b61      	ldr	r3, [pc, #388]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a10:	60bb      	str	r3, [r7, #8]
      break;
 8003a12:	e0b4      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a14:	4b5d      	ldr	r3, [pc, #372]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a1e:	4b5b      	ldr	r3, [pc, #364]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d04d      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2a:	4b58      	ldr	r3, [pc, #352]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	461a      	mov	r2, r3
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a3a:	f04f 0100 	mov.w	r1, #0
 8003a3e:	ea02 0800 	and.w	r8, r2, r0
 8003a42:	ea03 0901 	and.w	r9, r3, r1
 8003a46:	4640      	mov	r0, r8
 8003a48:	4649      	mov	r1, r9
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	014b      	lsls	r3, r1, #5
 8003a54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a58:	0142      	lsls	r2, r0, #5
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	ebb0 0008 	subs.w	r0, r0, r8
 8003a62:	eb61 0109 	sbc.w	r1, r1, r9
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	018b      	lsls	r3, r1, #6
 8003a70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a74:	0182      	lsls	r2, r0, #6
 8003a76:	1a12      	subs	r2, r2, r0
 8003a78:	eb63 0301 	sbc.w	r3, r3, r1
 8003a7c:	f04f 0000 	mov.w	r0, #0
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	00d9      	lsls	r1, r3, #3
 8003a86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a8a:	00d0      	lsls	r0, r2, #3
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	eb12 0208 	adds.w	r2, r2, r8
 8003a94:	eb43 0309 	adc.w	r3, r3, r9
 8003a98:	f04f 0000 	mov.w	r0, #0
 8003a9c:	f04f 0100 	mov.w	r1, #0
 8003aa0:	0259      	lsls	r1, r3, #9
 8003aa2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003aa6:	0250      	lsls	r0, r2, #9
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4610      	mov	r0, r2
 8003aae:	4619      	mov	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	f7fd f8fe 	bl	8000cb8 <__aeabi_uldivmod>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	e04a      	b.n	8003b5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac6:	4b31      	ldr	r3, [pc, #196]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	461a      	mov	r2, r3
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	ea02 0400 	and.w	r4, r2, r0
 8003ade:	ea03 0501 	and.w	r5, r3, r1
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	014b      	lsls	r3, r1, #5
 8003af0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003af4:	0142      	lsls	r2, r0, #5
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	1b00      	subs	r0, r0, r4
 8003afc:	eb61 0105 	sbc.w	r1, r1, r5
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	018b      	lsls	r3, r1, #6
 8003b0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b0e:	0182      	lsls	r2, r0, #6
 8003b10:	1a12      	subs	r2, r2, r0
 8003b12:	eb63 0301 	sbc.w	r3, r3, r1
 8003b16:	f04f 0000 	mov.w	r0, #0
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	00d9      	lsls	r1, r3, #3
 8003b20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b24:	00d0      	lsls	r0, r2, #3
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	1912      	adds	r2, r2, r4
 8003b2c:	eb45 0303 	adc.w	r3, r5, r3
 8003b30:	f04f 0000 	mov.w	r0, #0
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	0299      	lsls	r1, r3, #10
 8003b3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b3e:	0290      	lsls	r0, r2, #10
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	f7fd f8b2 	bl	8000cb8 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	3301      	adds	r3, #1
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	60bb      	str	r3, [r7, #8]
      break;
 8003b76:	e002      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b7a:	60bb      	str	r3, [r7, #8]
      break;
 8003b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3710      	adds	r7, #16
 8003b84:	46bd      	mov	sp, r7
 8003b86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	007a1200 	.word	0x007a1200

08003b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000024 	.word	0x20000024

08003bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bb4:	f7ff fff0 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0a9b      	lsrs	r3, r3, #10
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4903      	ldr	r1, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bc6:	5ccb      	ldrb	r3, [r1, r3]
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	08009f80 	.word	0x08009f80

08003bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bdc:	f7ff ffdc 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003be0:	4602      	mov	r2, r0
 8003be2:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	0b5b      	lsrs	r3, r3, #13
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4903      	ldr	r1, [pc, #12]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bee:	5ccb      	ldrb	r3, [r1, r3]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	08009f80 	.word	0x08009f80

08003c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e03f      	b.n	8003c92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fe fa14 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fddb 	bl	8004800 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b08a      	sub	sp, #40	; 0x28
 8003c9e:	af02      	add	r7, sp, #8
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d17c      	bne.n	8003db4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <HAL_UART_Transmit+0x2c>
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e075      	b.n	8003db6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_UART_Transmit+0x3e>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e06e      	b.n	8003db6 <HAL_UART_Transmit+0x11c>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2221      	movs	r2, #33	; 0x21
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cee:	f7fe fbe3 	bl	80024b8 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d08:	d108      	bne.n	8003d1c <HAL_UART_Transmit+0x82>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d104      	bne.n	8003d1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e003      	b.n	8003d24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d2c:	e02a      	b.n	8003d84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2200      	movs	r2, #0
 8003d36:	2180      	movs	r1, #128	; 0x80
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 fb1f 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e036      	b.n	8003db6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3302      	adds	r3, #2
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	e007      	b.n	8003d76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	781a      	ldrb	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	3301      	adds	r3, #1
 8003d74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1cf      	bne.n	8003d2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	2140      	movs	r1, #64	; 0x40
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 faef 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e006      	b.n	8003db6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b20      	cmp	r3, #32
 8003dd6:	d11d      	bne.n	8003e14 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <HAL_UART_Receive_IT+0x26>
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e016      	b.n	8003e16 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_UART_Receive_IT+0x38>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e00f      	b.n	8003e16 <HAL_UART_Receive_IT+0x58>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	461a      	mov	r2, r3
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fb24 	bl	8004458 <UART_Start_Receive_IT>
 8003e10:	4603      	mov	r3, r0
 8003e12:	e000      	b.n	8003e16 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
  }
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b0ba      	sub	sp, #232	; 0xe8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10f      	bne.n	8003e86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_UART_IRQHandler+0x66>
 8003e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fc03 	bl	800468a <UART_Receive_IT>
      return;
 8003e84:	e256      	b.n	8004334 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 80de 	beq.w	800404c <HAL_UART_IRQHandler+0x22c>
 8003e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ea0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80d1 	beq.w	800404c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_UART_IRQHandler+0xae>
 8003eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f043 0201 	orr.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f003 0304 	and.w	r3, r3, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xd2>
 8003eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f043 0202 	orr.w	r2, r3, #2
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_UART_IRQHandler+0xf6>
 8003efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f043 0204 	orr.w	r2, r3, #4
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d011      	beq.n	8003f46 <HAL_UART_IRQHandler+0x126>
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d105      	bne.n	8003f3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f043 0208 	orr.w	r2, r3, #8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 81ed 	beq.w	800432a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_UART_IRQHandler+0x14e>
 8003f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fb8e 	bl	800468a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f78:	2b40      	cmp	r3, #64	; 0x40
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <HAL_UART_IRQHandler+0x17a>
 8003f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d04f      	beq.n	800403a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa96 	bl	80044cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b40      	cmp	r3, #64	; 0x40
 8003fac:	d141      	bne.n	8004032 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3314      	adds	r3, #20
 8003fb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fbc:	e853 3f00 	ldrex	r3, [r3]
 8003fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3314      	adds	r3, #20
 8003fd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1d9      	bne.n	8003fae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d013      	beq.n	800402a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	4a7d      	ldr	r2, [pc, #500]	; (80041fc <HAL_UART_IRQHandler+0x3dc>)
 8004008:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe ffc1 	bl	8002f96 <HAL_DMA_Abort_IT>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d016      	beq.n	8004048 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004024:	4610      	mov	r0, r2
 8004026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004028:	e00e      	b.n	8004048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f990 	bl	8004350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004030:	e00a      	b.n	8004048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f98c 	bl	8004350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004038:	e006      	b.n	8004048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f988 	bl	8004350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004046:	e170      	b.n	800432a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	bf00      	nop
    return;
 800404a:	e16e      	b.n	800432a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	2b01      	cmp	r3, #1
 8004052:	f040 814a 	bne.w	80042ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405a:	f003 0310 	and.w	r3, r3, #16
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8143 	beq.w	80042ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 813c 	beq.w	80042ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	f040 80b4 	bne.w	8004200 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8140 	beq.w	800432e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040b6:	429a      	cmp	r2, r3
 80040b8:	f080 8139 	bcs.w	800432e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ce:	f000 8088 	beq.w	80041e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80040fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800410a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1d9      	bne.n	80040d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3314      	adds	r3, #20
 8004124:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800412e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004130:	f023 0301 	bic.w	r3, r3, #1
 8004134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3314      	adds	r3, #20
 800413e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004142:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004146:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800414a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e1      	bne.n	800411e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3314      	adds	r3, #20
 8004160:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800416a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800416c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3314      	adds	r3, #20
 800417a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800417e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004180:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004184:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800418c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e3      	bne.n	800415a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041b2:	f023 0310 	bic.w	r3, r3, #16
 80041b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	330c      	adds	r3, #12
 80041c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80041c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80041d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e3      	bne.n	80041a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe fe6a 	bl	8002eb6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f8b6 	bl	8004364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041f8:	e099      	b.n	800432e <HAL_UART_IRQHandler+0x50e>
 80041fa:	bf00      	nop
 80041fc:	08004593 	.word	0x08004593
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004208:	b29b      	uxth	r3, r3
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 808b 	beq.w	8004332 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800421c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8086 	beq.w	8004332 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800423c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	330c      	adds	r3, #12
 8004246:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800424a:	647a      	str	r2, [r7, #68]	; 0x44
 800424c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e3      	bne.n	8004226 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3314      	adds	r3, #20
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	623b      	str	r3, [r7, #32]
   return(result);
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004282:	633a      	str	r2, [r7, #48]	; 0x30
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e3      	bne.n	800425e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0310 	bic.w	r3, r3, #16
 80042ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	330c      	adds	r3, #12
 80042c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80042c8:	61fa      	str	r2, [r7, #28]
 80042ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	69b9      	ldr	r1, [r7, #24]
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	617b      	str	r3, [r7, #20]
   return(result);
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e3      	bne.n	80042a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042e0:	4619      	mov	r1, r3
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f83e 	bl	8004364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042e8:	e023      	b.n	8004332 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d009      	beq.n	800430a <HAL_UART_IRQHandler+0x4ea>
 80042f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f959 	bl	80045ba <UART_Transmit_IT>
    return;
 8004308:	e014      	b.n	8004334 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800430a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00e      	beq.n	8004334 <HAL_UART_IRQHandler+0x514>
 8004316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800431a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f999 	bl	800465a <UART_EndTransmit_IT>
    return;
 8004328:	e004      	b.n	8004334 <HAL_UART_IRQHandler+0x514>
    return;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <HAL_UART_IRQHandler+0x514>
      return;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <HAL_UART_IRQHandler+0x514>
      return;
 8004332:	bf00      	nop
  }
}
 8004334:	37e8      	adds	r7, #232	; 0xe8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop

0800433c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b090      	sub	sp, #64	; 0x40
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438c:	e050      	b.n	8004430 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d04c      	beq.n	8004430 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <UART_WaitOnFlagUntilTimeout+0x30>
 800439c:	f7fe f88c 	bl	80024b8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d241      	bcs.n	8004430 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	330c      	adds	r3, #12
 80043ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043cc:	637a      	str	r2, [r7, #52]	; 0x34
 80043ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e5      	bne.n	80043ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3314      	adds	r3, #20
 80043e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	613b      	str	r3, [r7, #16]
   return(result);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3314      	adds	r3, #20
 80043fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004400:	623a      	str	r2, [r7, #32]
 8004402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	69f9      	ldr	r1, [r7, #28]
 8004406:	6a3a      	ldr	r2, [r7, #32]
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	61bb      	str	r3, [r7, #24]
   return(result);
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e00f      	b.n	8004450 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4013      	ands	r3, r2
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	429a      	cmp	r2, r3
 800443e:	bf0c      	ite	eq
 8004440:	2301      	moveq	r3, #1
 8004442:	2300      	movne	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	79fb      	ldrb	r3, [r7, #7]
 800444a:	429a      	cmp	r2, r3
 800444c:	d09f      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3740      	adds	r7, #64	; 0x40
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	4613      	mov	r3, r2
 8004464:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	88fa      	ldrh	r2, [r7, #6]
 8004470:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	88fa      	ldrh	r2, [r7, #6]
 8004476:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2222      	movs	r2, #34	; 0x22
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800449c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 0201 	orr.w	r2, r2, #1
 80044ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0220 	orr.w	r2, r2, #32
 80044bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b095      	sub	sp, #84	; 0x54
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044f4:	643a      	str	r2, [r7, #64]	; 0x40
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044fc:	e841 2300 	strex	r3, r2, [r1]
 8004500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e5      	bne.n	80044d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3314      	adds	r3, #20
 800450e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	61fb      	str	r3, [r7, #28]
   return(result);
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3314      	adds	r3, #20
 8004526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004528:	62fa      	str	r2, [r7, #44]	; 0x2c
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800452e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	2b01      	cmp	r3, #1
 8004542:	d119      	bne.n	8004578 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	330c      	adds	r3, #12
 800454a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	60bb      	str	r3, [r7, #8]
   return(result);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f023 0310 	bic.w	r3, r3, #16
 800455a:	647b      	str	r3, [r7, #68]	; 0x44
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004564:	61ba      	str	r2, [r7, #24]
 8004566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	613b      	str	r3, [r7, #16]
   return(result);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e5      	bne.n	8004544 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004586:	bf00      	nop
 8004588:	3754      	adds	r7, #84	; 0x54
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f7ff fecf 	bl	8004350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b21      	cmp	r3, #33	; 0x21
 80045cc:	d13e      	bne.n	800464c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d6:	d114      	bne.n	8004602 <UART_Transmit_IT+0x48>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d110      	bne.n	8004602 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	621a      	str	r2, [r3, #32]
 8004600:	e008      	b.n	8004614 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6211      	str	r1, [r2, #32]
 800460c:	781a      	ldrb	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29b      	uxth	r3, r3
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	4619      	mov	r1, r3
 8004622:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10f      	bne.n	8004648 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004636:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004646:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	e000      	b.n	800464e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800464c:	2302      	movs	r3, #2
  }
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b082      	sub	sp, #8
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004670:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff fe5e 	bl	800433c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b08c      	sub	sp, #48	; 0x30
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b22      	cmp	r3, #34	; 0x22
 800469c:	f040 80ab 	bne.w	80047f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a8:	d117      	bne.n	80046da <UART_Receive_IT+0x50>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d113      	bne.n	80046da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	1c9a      	adds	r2, r3, #2
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	629a      	str	r2, [r3, #40]	; 0x28
 80046d8:	e026      	b.n	8004728 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ec:	d007      	beq.n	80046fe <UART_Receive_IT+0x74>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <UART_Receive_IT+0x82>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	b2da      	uxtb	r2, r3
 8004706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	e008      	b.n	800471e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004718:	b2da      	uxtb	r2, r3
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	1c5a      	adds	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29b      	uxth	r3, r3
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	4619      	mov	r1, r3
 8004736:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004738:	2b00      	cmp	r3, #0
 800473a:	d15a      	bne.n	80047f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0220 	bic.w	r2, r2, #32
 800474a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800475a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695a      	ldr	r2, [r3, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	2b01      	cmp	r3, #1
 800477a:	d135      	bne.n	80047e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	e853 3f00 	ldrex	r3, [r3]
 8004790:	613b      	str	r3, [r7, #16]
   return(result);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f023 0310 	bic.w	r3, r3, #16
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	330c      	adds	r3, #12
 80047a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a2:	623a      	str	r2, [r7, #32]
 80047a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a6:	69f9      	ldr	r1, [r7, #28]
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	e841 2300 	strex	r3, r2, [r1]
 80047ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e5      	bne.n	8004782 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d10a      	bne.n	80047da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff fdbf 	bl	8004364 <HAL_UARTEx_RxEventCallback>
 80047e6:	e002      	b.n	80047ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fc fc3f 	bl	800106c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e002      	b.n	80047f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	e000      	b.n	80047f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
  }
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3730      	adds	r7, #48	; 0x30
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	b09f      	sub	sp, #124	; 0x7c
 8004806:	af00      	add	r7, sp, #0
 8004808:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800480a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004816:	68d9      	ldr	r1, [r3, #12]
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	ea40 0301 	orr.w	r3, r0, r1
 8004820:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	431a      	orrs	r2, r3
 800482c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	431a      	orrs	r2, r3
 8004832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	4313      	orrs	r3, r2
 8004838:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800483a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004844:	f021 010c 	bic.w	r1, r1, #12
 8004848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800484e:	430b      	orrs	r3, r1
 8004850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800485c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485e:	6999      	ldr	r1, [r3, #24]
 8004860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	ea40 0301 	orr.w	r3, r0, r1
 8004868:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800486a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4bc5      	ldr	r3, [pc, #788]	; (8004b84 <UART_SetConfig+0x384>)
 8004870:	429a      	cmp	r2, r3
 8004872:	d004      	beq.n	800487e <UART_SetConfig+0x7e>
 8004874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	4bc3      	ldr	r3, [pc, #780]	; (8004b88 <UART_SetConfig+0x388>)
 800487a:	429a      	cmp	r2, r3
 800487c:	d103      	bne.n	8004886 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800487e:	f7ff f9ab 	bl	8003bd8 <HAL_RCC_GetPCLK2Freq>
 8004882:	6778      	str	r0, [r7, #116]	; 0x74
 8004884:	e002      	b.n	800488c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004886:	f7ff f993 	bl	8003bb0 <HAL_RCC_GetPCLK1Freq>
 800488a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800488c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004894:	f040 80b6 	bne.w	8004a04 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800489a:	461c      	mov	r4, r3
 800489c:	f04f 0500 	mov.w	r5, #0
 80048a0:	4622      	mov	r2, r4
 80048a2:	462b      	mov	r3, r5
 80048a4:	1891      	adds	r1, r2, r2
 80048a6:	6439      	str	r1, [r7, #64]	; 0x40
 80048a8:	415b      	adcs	r3, r3
 80048aa:	647b      	str	r3, [r7, #68]	; 0x44
 80048ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048b0:	1912      	adds	r2, r2, r4
 80048b2:	eb45 0303 	adc.w	r3, r5, r3
 80048b6:	f04f 0000 	mov.w	r0, #0
 80048ba:	f04f 0100 	mov.w	r1, #0
 80048be:	00d9      	lsls	r1, r3, #3
 80048c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048c4:	00d0      	lsls	r0, r2, #3
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	1911      	adds	r1, r2, r4
 80048cc:	6639      	str	r1, [r7, #96]	; 0x60
 80048ce:	416b      	adcs	r3, r5
 80048d0:	667b      	str	r3, [r7, #100]	; 0x64
 80048d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	1891      	adds	r1, r2, r2
 80048de:	63b9      	str	r1, [r7, #56]	; 0x38
 80048e0:	415b      	adcs	r3, r3
 80048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80048ec:	f7fc f9e4 	bl	8000cb8 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4ba5      	ldr	r3, [pc, #660]	; (8004b8c <UART_SetConfig+0x38c>)
 80048f6:	fba3 2302 	umull	r2, r3, r3, r2
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	011e      	lsls	r6, r3, #4
 80048fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004900:	461c      	mov	r4, r3
 8004902:	f04f 0500 	mov.w	r5, #0
 8004906:	4622      	mov	r2, r4
 8004908:	462b      	mov	r3, r5
 800490a:	1891      	adds	r1, r2, r2
 800490c:	6339      	str	r1, [r7, #48]	; 0x30
 800490e:	415b      	adcs	r3, r3
 8004910:	637b      	str	r3, [r7, #52]	; 0x34
 8004912:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004916:	1912      	adds	r2, r2, r4
 8004918:	eb45 0303 	adc.w	r3, r5, r3
 800491c:	f04f 0000 	mov.w	r0, #0
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	00d9      	lsls	r1, r3, #3
 8004926:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800492a:	00d0      	lsls	r0, r2, #3
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	1911      	adds	r1, r2, r4
 8004932:	65b9      	str	r1, [r7, #88]	; 0x58
 8004934:	416b      	adcs	r3, r5
 8004936:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	461a      	mov	r2, r3
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	1891      	adds	r1, r2, r2
 8004944:	62b9      	str	r1, [r7, #40]	; 0x28
 8004946:	415b      	adcs	r3, r3
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800494e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004952:	f7fc f9b1 	bl	8000cb8 <__aeabi_uldivmod>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4b8c      	ldr	r3, [pc, #560]	; (8004b8c <UART_SetConfig+0x38c>)
 800495c:	fba3 1302 	umull	r1, r3, r3, r2
 8004960:	095b      	lsrs	r3, r3, #5
 8004962:	2164      	movs	r1, #100	; 0x64
 8004964:	fb01 f303 	mul.w	r3, r1, r3
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	3332      	adds	r3, #50	; 0x32
 800496e:	4a87      	ldr	r2, [pc, #540]	; (8004b8c <UART_SetConfig+0x38c>)
 8004970:	fba2 2303 	umull	r2, r3, r2, r3
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800497c:	441e      	add	r6, r3
 800497e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004980:	4618      	mov	r0, r3
 8004982:	f04f 0100 	mov.w	r1, #0
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	1894      	adds	r4, r2, r2
 800498c:	623c      	str	r4, [r7, #32]
 800498e:	415b      	adcs	r3, r3
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
 8004992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004996:	1812      	adds	r2, r2, r0
 8004998:	eb41 0303 	adc.w	r3, r1, r3
 800499c:	f04f 0400 	mov.w	r4, #0
 80049a0:	f04f 0500 	mov.w	r5, #0
 80049a4:	00dd      	lsls	r5, r3, #3
 80049a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049aa:	00d4      	lsls	r4, r2, #3
 80049ac:	4622      	mov	r2, r4
 80049ae:	462b      	mov	r3, r5
 80049b0:	1814      	adds	r4, r2, r0
 80049b2:	653c      	str	r4, [r7, #80]	; 0x50
 80049b4:	414b      	adcs	r3, r1
 80049b6:	657b      	str	r3, [r7, #84]	; 0x54
 80049b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	461a      	mov	r2, r3
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	1891      	adds	r1, r2, r2
 80049c4:	61b9      	str	r1, [r7, #24]
 80049c6:	415b      	adcs	r3, r3
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80049d2:	f7fc f971 	bl	8000cb8 <__aeabi_uldivmod>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4b6c      	ldr	r3, [pc, #432]	; (8004b8c <UART_SetConfig+0x38c>)
 80049dc:	fba3 1302 	umull	r1, r3, r3, r2
 80049e0:	095b      	lsrs	r3, r3, #5
 80049e2:	2164      	movs	r1, #100	; 0x64
 80049e4:	fb01 f303 	mul.w	r3, r1, r3
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	3332      	adds	r3, #50	; 0x32
 80049ee:	4a67      	ldr	r2, [pc, #412]	; (8004b8c <UART_SetConfig+0x38c>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	095b      	lsrs	r3, r3, #5
 80049f6:	f003 0207 	and.w	r2, r3, #7
 80049fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4432      	add	r2, r6
 8004a00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a02:	e0b9      	b.n	8004b78 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a06:	461c      	mov	r4, r3
 8004a08:	f04f 0500 	mov.w	r5, #0
 8004a0c:	4622      	mov	r2, r4
 8004a0e:	462b      	mov	r3, r5
 8004a10:	1891      	adds	r1, r2, r2
 8004a12:	6139      	str	r1, [r7, #16]
 8004a14:	415b      	adcs	r3, r3
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a1c:	1912      	adds	r2, r2, r4
 8004a1e:	eb45 0303 	adc.w	r3, r5, r3
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f04f 0100 	mov.w	r1, #0
 8004a2a:	00d9      	lsls	r1, r3, #3
 8004a2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a30:	00d0      	lsls	r0, r2, #3
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	eb12 0804 	adds.w	r8, r2, r4
 8004a3a:	eb43 0905 	adc.w	r9, r3, r5
 8004a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f04f 0100 	mov.w	r1, #0
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	008b      	lsls	r3, r1, #2
 8004a52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a56:	0082      	lsls	r2, r0, #2
 8004a58:	4640      	mov	r0, r8
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	f7fc f92c 	bl	8000cb8 <__aeabi_uldivmod>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4b49      	ldr	r3, [pc, #292]	; (8004b8c <UART_SetConfig+0x38c>)
 8004a66:	fba3 2302 	umull	r2, r3, r3, r2
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	011e      	lsls	r6, r3, #4
 8004a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a70:	4618      	mov	r0, r3
 8004a72:	f04f 0100 	mov.w	r1, #0
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	1894      	adds	r4, r2, r2
 8004a7c:	60bc      	str	r4, [r7, #8]
 8004a7e:	415b      	adcs	r3, r3
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a86:	1812      	adds	r2, r2, r0
 8004a88:	eb41 0303 	adc.w	r3, r1, r3
 8004a8c:	f04f 0400 	mov.w	r4, #0
 8004a90:	f04f 0500 	mov.w	r5, #0
 8004a94:	00dd      	lsls	r5, r3, #3
 8004a96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a9a:	00d4      	lsls	r4, r2, #3
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	462b      	mov	r3, r5
 8004aa0:	1814      	adds	r4, r2, r0
 8004aa2:	64bc      	str	r4, [r7, #72]	; 0x48
 8004aa4:	414b      	adcs	r3, r1
 8004aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f04f 0100 	mov.w	r1, #0
 8004ab2:	f04f 0200 	mov.w	r2, #0
 8004ab6:	f04f 0300 	mov.w	r3, #0
 8004aba:	008b      	lsls	r3, r1, #2
 8004abc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ac0:	0082      	lsls	r2, r0, #2
 8004ac2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ac6:	f7fc f8f7 	bl	8000cb8 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4b2f      	ldr	r3, [pc, #188]	; (8004b8c <UART_SetConfig+0x38c>)
 8004ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	2164      	movs	r1, #100	; 0x64
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	3332      	adds	r3, #50	; 0x32
 8004ae2:	4a2a      	ldr	r2, [pc, #168]	; (8004b8c <UART_SetConfig+0x38c>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aee:	441e      	add	r6, r3
 8004af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af2:	4618      	mov	r0, r3
 8004af4:	f04f 0100 	mov.w	r1, #0
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	1894      	adds	r4, r2, r2
 8004afe:	603c      	str	r4, [r7, #0]
 8004b00:	415b      	adcs	r3, r3
 8004b02:	607b      	str	r3, [r7, #4]
 8004b04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b08:	1812      	adds	r2, r2, r0
 8004b0a:	eb41 0303 	adc.w	r3, r1, r3
 8004b0e:	f04f 0400 	mov.w	r4, #0
 8004b12:	f04f 0500 	mov.w	r5, #0
 8004b16:	00dd      	lsls	r5, r3, #3
 8004b18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b1c:	00d4      	lsls	r4, r2, #3
 8004b1e:	4622      	mov	r2, r4
 8004b20:	462b      	mov	r3, r5
 8004b22:	eb12 0a00 	adds.w	sl, r2, r0
 8004b26:	eb43 0b01 	adc.w	fp, r3, r1
 8004b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f04f 0100 	mov.w	r1, #0
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	008b      	lsls	r3, r1, #2
 8004b3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b42:	0082      	lsls	r2, r0, #2
 8004b44:	4650      	mov	r0, sl
 8004b46:	4659      	mov	r1, fp
 8004b48:	f7fc f8b6 	bl	8000cb8 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4b0e      	ldr	r3, [pc, #56]	; (8004b8c <UART_SetConfig+0x38c>)
 8004b52:	fba3 1302 	umull	r1, r3, r3, r2
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	2164      	movs	r1, #100	; 0x64
 8004b5a:	fb01 f303 	mul.w	r3, r1, r3
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	3332      	adds	r3, #50	; 0x32
 8004b64:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <UART_SetConfig+0x38c>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	095b      	lsrs	r3, r3, #5
 8004b6c:	f003 020f 	and.w	r2, r3, #15
 8004b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4432      	add	r2, r6
 8004b76:	609a      	str	r2, [r3, #8]
}
 8004b78:	bf00      	nop
 8004b7a:	377c      	adds	r7, #124	; 0x7c
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b82:	bf00      	nop
 8004b84:	40011000 	.word	0x40011000
 8004b88:	40011400 	.word	0x40011400
 8004b8c:	51eb851f 	.word	0x51eb851f

08004b90 <nan>:
 8004b90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004b98 <nan+0x8>
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	00000000 	.word	0x00000000
 8004b9c:	7ff80000 	.word	0x7ff80000

08004ba0 <__errno>:
 8004ba0:	4b01      	ldr	r3, [pc, #4]	; (8004ba8 <__errno+0x8>)
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000030 	.word	0x20000030

08004bac <__libc_init_array>:
 8004bac:	b570      	push	{r4, r5, r6, lr}
 8004bae:	4d0d      	ldr	r5, [pc, #52]	; (8004be4 <__libc_init_array+0x38>)
 8004bb0:	4c0d      	ldr	r4, [pc, #52]	; (8004be8 <__libc_init_array+0x3c>)
 8004bb2:	1b64      	subs	r4, r4, r5
 8004bb4:	10a4      	asrs	r4, r4, #2
 8004bb6:	2600      	movs	r6, #0
 8004bb8:	42a6      	cmp	r6, r4
 8004bba:	d109      	bne.n	8004bd0 <__libc_init_array+0x24>
 8004bbc:	4d0b      	ldr	r5, [pc, #44]	; (8004bec <__libc_init_array+0x40>)
 8004bbe:	4c0c      	ldr	r4, [pc, #48]	; (8004bf0 <__libc_init_array+0x44>)
 8004bc0:	f005 f884 	bl	8009ccc <_init>
 8004bc4:	1b64      	subs	r4, r4, r5
 8004bc6:	10a4      	asrs	r4, r4, #2
 8004bc8:	2600      	movs	r6, #0
 8004bca:	42a6      	cmp	r6, r4
 8004bcc:	d105      	bne.n	8004bda <__libc_init_array+0x2e>
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bd4:	4798      	blx	r3
 8004bd6:	3601      	adds	r6, #1
 8004bd8:	e7ee      	b.n	8004bb8 <__libc_init_array+0xc>
 8004bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bde:	4798      	blx	r3
 8004be0:	3601      	adds	r6, #1
 8004be2:	e7f2      	b.n	8004bca <__libc_init_array+0x1e>
 8004be4:	0800a45c 	.word	0x0800a45c
 8004be8:	0800a45c 	.word	0x0800a45c
 8004bec:	0800a45c 	.word	0x0800a45c
 8004bf0:	0800a460 	.word	0x0800a460

08004bf4 <memset>:
 8004bf4:	4402      	add	r2, r0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d100      	bne.n	8004bfe <memset+0xa>
 8004bfc:	4770      	bx	lr
 8004bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004c02:	e7f9      	b.n	8004bf8 <memset+0x4>

08004c04 <__cvt>:
 8004c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c08:	ec55 4b10 	vmov	r4, r5, d0
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	460e      	mov	r6, r1
 8004c10:	4619      	mov	r1, r3
 8004c12:	462b      	mov	r3, r5
 8004c14:	bfbb      	ittet	lt
 8004c16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c1a:	461d      	movlt	r5, r3
 8004c1c:	2300      	movge	r3, #0
 8004c1e:	232d      	movlt	r3, #45	; 0x2d
 8004c20:	700b      	strb	r3, [r1, #0]
 8004c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c28:	4691      	mov	r9, r2
 8004c2a:	f023 0820 	bic.w	r8, r3, #32
 8004c2e:	bfbc      	itt	lt
 8004c30:	4622      	movlt	r2, r4
 8004c32:	4614      	movlt	r4, r2
 8004c34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c38:	d005      	beq.n	8004c46 <__cvt+0x42>
 8004c3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c3e:	d100      	bne.n	8004c42 <__cvt+0x3e>
 8004c40:	3601      	adds	r6, #1
 8004c42:	2102      	movs	r1, #2
 8004c44:	e000      	b.n	8004c48 <__cvt+0x44>
 8004c46:	2103      	movs	r1, #3
 8004c48:	ab03      	add	r3, sp, #12
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	ab02      	add	r3, sp, #8
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	ec45 4b10 	vmov	d0, r4, r5
 8004c54:	4653      	mov	r3, sl
 8004c56:	4632      	mov	r2, r6
 8004c58:	f001 fe52 	bl	8006900 <_dtoa_r>
 8004c5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c60:	4607      	mov	r7, r0
 8004c62:	d102      	bne.n	8004c6a <__cvt+0x66>
 8004c64:	f019 0f01 	tst.w	r9, #1
 8004c68:	d022      	beq.n	8004cb0 <__cvt+0xac>
 8004c6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c6e:	eb07 0906 	add.w	r9, r7, r6
 8004c72:	d110      	bne.n	8004c96 <__cvt+0x92>
 8004c74:	783b      	ldrb	r3, [r7, #0]
 8004c76:	2b30      	cmp	r3, #48	; 0x30
 8004c78:	d10a      	bne.n	8004c90 <__cvt+0x8c>
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4620      	mov	r0, r4
 8004c80:	4629      	mov	r1, r5
 8004c82:	f7fb ff39 	bl	8000af8 <__aeabi_dcmpeq>
 8004c86:	b918      	cbnz	r0, 8004c90 <__cvt+0x8c>
 8004c88:	f1c6 0601 	rsb	r6, r6, #1
 8004c8c:	f8ca 6000 	str.w	r6, [sl]
 8004c90:	f8da 3000 	ldr.w	r3, [sl]
 8004c94:	4499      	add	r9, r3
 8004c96:	2200      	movs	r2, #0
 8004c98:	2300      	movs	r3, #0
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	f7fb ff2b 	bl	8000af8 <__aeabi_dcmpeq>
 8004ca2:	b108      	cbz	r0, 8004ca8 <__cvt+0xa4>
 8004ca4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ca8:	2230      	movs	r2, #48	; 0x30
 8004caa:	9b03      	ldr	r3, [sp, #12]
 8004cac:	454b      	cmp	r3, r9
 8004cae:	d307      	bcc.n	8004cc0 <__cvt+0xbc>
 8004cb0:	9b03      	ldr	r3, [sp, #12]
 8004cb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cb4:	1bdb      	subs	r3, r3, r7
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	b004      	add	sp, #16
 8004cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc0:	1c59      	adds	r1, r3, #1
 8004cc2:	9103      	str	r1, [sp, #12]
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e7f0      	b.n	8004caa <__cvt+0xa6>

08004cc8 <__exponent>:
 8004cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2900      	cmp	r1, #0
 8004cce:	bfb8      	it	lt
 8004cd0:	4249      	neglt	r1, r1
 8004cd2:	f803 2b02 	strb.w	r2, [r3], #2
 8004cd6:	bfb4      	ite	lt
 8004cd8:	222d      	movlt	r2, #45	; 0x2d
 8004cda:	222b      	movge	r2, #43	; 0x2b
 8004cdc:	2909      	cmp	r1, #9
 8004cde:	7042      	strb	r2, [r0, #1]
 8004ce0:	dd2a      	ble.n	8004d38 <__exponent+0x70>
 8004ce2:	f10d 0407 	add.w	r4, sp, #7
 8004ce6:	46a4      	mov	ip, r4
 8004ce8:	270a      	movs	r7, #10
 8004cea:	46a6      	mov	lr, r4
 8004cec:	460a      	mov	r2, r1
 8004cee:	fb91 f6f7 	sdiv	r6, r1, r7
 8004cf2:	fb07 1516 	mls	r5, r7, r6, r1
 8004cf6:	3530      	adds	r5, #48	; 0x30
 8004cf8:	2a63      	cmp	r2, #99	; 0x63
 8004cfa:	f104 34ff 	add.w	r4, r4, #4294967295
 8004cfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d02:	4631      	mov	r1, r6
 8004d04:	dcf1      	bgt.n	8004cea <__exponent+0x22>
 8004d06:	3130      	adds	r1, #48	; 0x30
 8004d08:	f1ae 0502 	sub.w	r5, lr, #2
 8004d0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d10:	1c44      	adds	r4, r0, #1
 8004d12:	4629      	mov	r1, r5
 8004d14:	4561      	cmp	r1, ip
 8004d16:	d30a      	bcc.n	8004d2e <__exponent+0x66>
 8004d18:	f10d 0209 	add.w	r2, sp, #9
 8004d1c:	eba2 020e 	sub.w	r2, r2, lr
 8004d20:	4565      	cmp	r5, ip
 8004d22:	bf88      	it	hi
 8004d24:	2200      	movhi	r2, #0
 8004d26:	4413      	add	r3, r2
 8004d28:	1a18      	subs	r0, r3, r0
 8004d2a:	b003      	add	sp, #12
 8004d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d36:	e7ed      	b.n	8004d14 <__exponent+0x4c>
 8004d38:	2330      	movs	r3, #48	; 0x30
 8004d3a:	3130      	adds	r1, #48	; 0x30
 8004d3c:	7083      	strb	r3, [r0, #2]
 8004d3e:	70c1      	strb	r1, [r0, #3]
 8004d40:	1d03      	adds	r3, r0, #4
 8004d42:	e7f1      	b.n	8004d28 <__exponent+0x60>

08004d44 <_printf_float>:
 8004d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d48:	ed2d 8b02 	vpush	{d8}
 8004d4c:	b08d      	sub	sp, #52	; 0x34
 8004d4e:	460c      	mov	r4, r1
 8004d50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d54:	4616      	mov	r6, r2
 8004d56:	461f      	mov	r7, r3
 8004d58:	4605      	mov	r5, r0
 8004d5a:	f002 ff2d 	bl	8007bb8 <_localeconv_r>
 8004d5e:	f8d0 a000 	ldr.w	sl, [r0]
 8004d62:	4650      	mov	r0, sl
 8004d64:	f7fb fa46 	bl	80001f4 <strlen>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	9305      	str	r3, [sp, #20]
 8004d70:	f8d8 3000 	ldr.w	r3, [r8]
 8004d74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d78:	3307      	adds	r3, #7
 8004d7a:	f023 0307 	bic.w	r3, r3, #7
 8004d7e:	f103 0208 	add.w	r2, r3, #8
 8004d82:	f8c8 2000 	str.w	r2, [r8]
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d96:	9307      	str	r3, [sp, #28]
 8004d98:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d9c:	ee08 0a10 	vmov	s16, r0
 8004da0:	4b9f      	ldr	r3, [pc, #636]	; (8005020 <_printf_float+0x2dc>)
 8004da2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004da6:	f04f 32ff 	mov.w	r2, #4294967295
 8004daa:	f7fb fed7 	bl	8000b5c <__aeabi_dcmpun>
 8004dae:	bb88      	cbnz	r0, 8004e14 <_printf_float+0xd0>
 8004db0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004db4:	4b9a      	ldr	r3, [pc, #616]	; (8005020 <_printf_float+0x2dc>)
 8004db6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dba:	f7fb feb1 	bl	8000b20 <__aeabi_dcmple>
 8004dbe:	bb48      	cbnz	r0, 8004e14 <_printf_float+0xd0>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	f7fb fea0 	bl	8000b0c <__aeabi_dcmplt>
 8004dcc:	b110      	cbz	r0, 8004dd4 <_printf_float+0x90>
 8004dce:	232d      	movs	r3, #45	; 0x2d
 8004dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd4:	4b93      	ldr	r3, [pc, #588]	; (8005024 <_printf_float+0x2e0>)
 8004dd6:	4894      	ldr	r0, [pc, #592]	; (8005028 <_printf_float+0x2e4>)
 8004dd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ddc:	bf94      	ite	ls
 8004dde:	4698      	movls	r8, r3
 8004de0:	4680      	movhi	r8, r0
 8004de2:	2303      	movs	r3, #3
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	9b05      	ldr	r3, [sp, #20]
 8004de8:	f023 0204 	bic.w	r2, r3, #4
 8004dec:	6022      	str	r2, [r4, #0]
 8004dee:	f04f 0900 	mov.w	r9, #0
 8004df2:	9700      	str	r7, [sp, #0]
 8004df4:	4633      	mov	r3, r6
 8004df6:	aa0b      	add	r2, sp, #44	; 0x2c
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 f9d8 	bl	80051b0 <_printf_common>
 8004e00:	3001      	adds	r0, #1
 8004e02:	f040 8090 	bne.w	8004f26 <_printf_float+0x1e2>
 8004e06:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0a:	b00d      	add	sp, #52	; 0x34
 8004e0c:	ecbd 8b02 	vpop	{d8}
 8004e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e14:	4642      	mov	r2, r8
 8004e16:	464b      	mov	r3, r9
 8004e18:	4640      	mov	r0, r8
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	f7fb fe9e 	bl	8000b5c <__aeabi_dcmpun>
 8004e20:	b140      	cbz	r0, 8004e34 <_printf_float+0xf0>
 8004e22:	464b      	mov	r3, r9
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bfbc      	itt	lt
 8004e28:	232d      	movlt	r3, #45	; 0x2d
 8004e2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e2e:	487f      	ldr	r0, [pc, #508]	; (800502c <_printf_float+0x2e8>)
 8004e30:	4b7f      	ldr	r3, [pc, #508]	; (8005030 <_printf_float+0x2ec>)
 8004e32:	e7d1      	b.n	8004dd8 <_printf_float+0x94>
 8004e34:	6863      	ldr	r3, [r4, #4]
 8004e36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e3a:	9206      	str	r2, [sp, #24]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	d13f      	bne.n	8004ec0 <_printf_float+0x17c>
 8004e40:	2306      	movs	r3, #6
 8004e42:	6063      	str	r3, [r4, #4]
 8004e44:	9b05      	ldr	r3, [sp, #20]
 8004e46:	6861      	ldr	r1, [r4, #4]
 8004e48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9303      	str	r3, [sp, #12]
 8004e50:	ab0a      	add	r3, sp, #40	; 0x28
 8004e52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e56:	ab09      	add	r3, sp, #36	; 0x24
 8004e58:	ec49 8b10 	vmov	d0, r8, r9
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	6022      	str	r2, [r4, #0]
 8004e60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e64:	4628      	mov	r0, r5
 8004e66:	f7ff fecd 	bl	8004c04 <__cvt>
 8004e6a:	9b06      	ldr	r3, [sp, #24]
 8004e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e6e:	2b47      	cmp	r3, #71	; 0x47
 8004e70:	4680      	mov	r8, r0
 8004e72:	d108      	bne.n	8004e86 <_printf_float+0x142>
 8004e74:	1cc8      	adds	r0, r1, #3
 8004e76:	db02      	blt.n	8004e7e <_printf_float+0x13a>
 8004e78:	6863      	ldr	r3, [r4, #4]
 8004e7a:	4299      	cmp	r1, r3
 8004e7c:	dd41      	ble.n	8004f02 <_printf_float+0x1be>
 8004e7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004e82:	fa5f fb8b 	uxtb.w	fp, fp
 8004e86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e8a:	d820      	bhi.n	8004ece <_printf_float+0x18a>
 8004e8c:	3901      	subs	r1, #1
 8004e8e:	465a      	mov	r2, fp
 8004e90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e94:	9109      	str	r1, [sp, #36]	; 0x24
 8004e96:	f7ff ff17 	bl	8004cc8 <__exponent>
 8004e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e9c:	1813      	adds	r3, r2, r0
 8004e9e:	2a01      	cmp	r2, #1
 8004ea0:	4681      	mov	r9, r0
 8004ea2:	6123      	str	r3, [r4, #16]
 8004ea4:	dc02      	bgt.n	8004eac <_printf_float+0x168>
 8004ea6:	6822      	ldr	r2, [r4, #0]
 8004ea8:	07d2      	lsls	r2, r2, #31
 8004eaa:	d501      	bpl.n	8004eb0 <_printf_float+0x16c>
 8004eac:	3301      	adds	r3, #1
 8004eae:	6123      	str	r3, [r4, #16]
 8004eb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d09c      	beq.n	8004df2 <_printf_float+0xae>
 8004eb8:	232d      	movs	r3, #45	; 0x2d
 8004eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ebe:	e798      	b.n	8004df2 <_printf_float+0xae>
 8004ec0:	9a06      	ldr	r2, [sp, #24]
 8004ec2:	2a47      	cmp	r2, #71	; 0x47
 8004ec4:	d1be      	bne.n	8004e44 <_printf_float+0x100>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1bc      	bne.n	8004e44 <_printf_float+0x100>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e7b9      	b.n	8004e42 <_printf_float+0xfe>
 8004ece:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004ed2:	d118      	bne.n	8004f06 <_printf_float+0x1c2>
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	6863      	ldr	r3, [r4, #4]
 8004ed8:	dd0b      	ble.n	8004ef2 <_printf_float+0x1ae>
 8004eda:	6121      	str	r1, [r4, #16]
 8004edc:	b913      	cbnz	r3, 8004ee4 <_printf_float+0x1a0>
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	07d0      	lsls	r0, r2, #31
 8004ee2:	d502      	bpl.n	8004eea <_printf_float+0x1a6>
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	440b      	add	r3, r1
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	65a1      	str	r1, [r4, #88]	; 0x58
 8004eec:	f04f 0900 	mov.w	r9, #0
 8004ef0:	e7de      	b.n	8004eb0 <_printf_float+0x16c>
 8004ef2:	b913      	cbnz	r3, 8004efa <_printf_float+0x1b6>
 8004ef4:	6822      	ldr	r2, [r4, #0]
 8004ef6:	07d2      	lsls	r2, r2, #31
 8004ef8:	d501      	bpl.n	8004efe <_printf_float+0x1ba>
 8004efa:	3302      	adds	r3, #2
 8004efc:	e7f4      	b.n	8004ee8 <_printf_float+0x1a4>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e7f2      	b.n	8004ee8 <_printf_float+0x1a4>
 8004f02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f08:	4299      	cmp	r1, r3
 8004f0a:	db05      	blt.n	8004f18 <_printf_float+0x1d4>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	6121      	str	r1, [r4, #16]
 8004f10:	07d8      	lsls	r0, r3, #31
 8004f12:	d5ea      	bpl.n	8004eea <_printf_float+0x1a6>
 8004f14:	1c4b      	adds	r3, r1, #1
 8004f16:	e7e7      	b.n	8004ee8 <_printf_float+0x1a4>
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	bfd4      	ite	le
 8004f1c:	f1c1 0202 	rsble	r2, r1, #2
 8004f20:	2201      	movgt	r2, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	e7e0      	b.n	8004ee8 <_printf_float+0x1a4>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	055a      	lsls	r2, r3, #21
 8004f2a:	d407      	bmi.n	8004f3c <_printf_float+0x1f8>
 8004f2c:	6923      	ldr	r3, [r4, #16]
 8004f2e:	4642      	mov	r2, r8
 8004f30:	4631      	mov	r1, r6
 8004f32:	4628      	mov	r0, r5
 8004f34:	47b8      	blx	r7
 8004f36:	3001      	adds	r0, #1
 8004f38:	d12c      	bne.n	8004f94 <_printf_float+0x250>
 8004f3a:	e764      	b.n	8004e06 <_printf_float+0xc2>
 8004f3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f40:	f240 80e0 	bls.w	8005104 <_printf_float+0x3c0>
 8004f44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f7fb fdd4 	bl	8000af8 <__aeabi_dcmpeq>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d034      	beq.n	8004fbe <_printf_float+0x27a>
 8004f54:	4a37      	ldr	r2, [pc, #220]	; (8005034 <_printf_float+0x2f0>)
 8004f56:	2301      	movs	r3, #1
 8004f58:	4631      	mov	r1, r6
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	47b8      	blx	r7
 8004f5e:	3001      	adds	r0, #1
 8004f60:	f43f af51 	beq.w	8004e06 <_printf_float+0xc2>
 8004f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	db02      	blt.n	8004f72 <_printf_float+0x22e>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	07d8      	lsls	r0, r3, #31
 8004f70:	d510      	bpl.n	8004f94 <_printf_float+0x250>
 8004f72:	ee18 3a10 	vmov	r3, s16
 8004f76:	4652      	mov	r2, sl
 8004f78:	4631      	mov	r1, r6
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	47b8      	blx	r7
 8004f7e:	3001      	adds	r0, #1
 8004f80:	f43f af41 	beq.w	8004e06 <_printf_float+0xc2>
 8004f84:	f04f 0800 	mov.w	r8, #0
 8004f88:	f104 091a 	add.w	r9, r4, #26
 8004f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	4543      	cmp	r3, r8
 8004f92:	dc09      	bgt.n	8004fa8 <_printf_float+0x264>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	079b      	lsls	r3, r3, #30
 8004f98:	f100 8105 	bmi.w	80051a6 <_printf_float+0x462>
 8004f9c:	68e0      	ldr	r0, [r4, #12]
 8004f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fa0:	4298      	cmp	r0, r3
 8004fa2:	bfb8      	it	lt
 8004fa4:	4618      	movlt	r0, r3
 8004fa6:	e730      	b.n	8004e0a <_printf_float+0xc6>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	464a      	mov	r2, r9
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f af27 	beq.w	8004e06 <_printf_float+0xc2>
 8004fb8:	f108 0801 	add.w	r8, r8, #1
 8004fbc:	e7e6      	b.n	8004f8c <_printf_float+0x248>
 8004fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	dc39      	bgt.n	8005038 <_printf_float+0x2f4>
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <_printf_float+0x2f0>)
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4628      	mov	r0, r5
 8004fcc:	47b8      	blx	r7
 8004fce:	3001      	adds	r0, #1
 8004fd0:	f43f af19 	beq.w	8004e06 <_printf_float+0xc2>
 8004fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	d102      	bne.n	8004fe2 <_printf_float+0x29e>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	07d9      	lsls	r1, r3, #31
 8004fe0:	d5d8      	bpl.n	8004f94 <_printf_float+0x250>
 8004fe2:	ee18 3a10 	vmov	r3, s16
 8004fe6:	4652      	mov	r2, sl
 8004fe8:	4631      	mov	r1, r6
 8004fea:	4628      	mov	r0, r5
 8004fec:	47b8      	blx	r7
 8004fee:	3001      	adds	r0, #1
 8004ff0:	f43f af09 	beq.w	8004e06 <_printf_float+0xc2>
 8004ff4:	f04f 0900 	mov.w	r9, #0
 8004ff8:	f104 0a1a 	add.w	sl, r4, #26
 8004ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ffe:	425b      	negs	r3, r3
 8005000:	454b      	cmp	r3, r9
 8005002:	dc01      	bgt.n	8005008 <_printf_float+0x2c4>
 8005004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005006:	e792      	b.n	8004f2e <_printf_float+0x1ea>
 8005008:	2301      	movs	r3, #1
 800500a:	4652      	mov	r2, sl
 800500c:	4631      	mov	r1, r6
 800500e:	4628      	mov	r0, r5
 8005010:	47b8      	blx	r7
 8005012:	3001      	adds	r0, #1
 8005014:	f43f aef7 	beq.w	8004e06 <_printf_float+0xc2>
 8005018:	f109 0901 	add.w	r9, r9, #1
 800501c:	e7ee      	b.n	8004ffc <_printf_float+0x2b8>
 800501e:	bf00      	nop
 8005020:	7fefffff 	.word	0x7fefffff
 8005024:	08009f8c 	.word	0x08009f8c
 8005028:	08009f90 	.word	0x08009f90
 800502c:	08009f98 	.word	0x08009f98
 8005030:	08009f94 	.word	0x08009f94
 8005034:	0800a3a1 	.word	0x0800a3a1
 8005038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800503a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800503c:	429a      	cmp	r2, r3
 800503e:	bfa8      	it	ge
 8005040:	461a      	movge	r2, r3
 8005042:	2a00      	cmp	r2, #0
 8005044:	4691      	mov	r9, r2
 8005046:	dc37      	bgt.n	80050b8 <_printf_float+0x374>
 8005048:	f04f 0b00 	mov.w	fp, #0
 800504c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005050:	f104 021a 	add.w	r2, r4, #26
 8005054:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005056:	9305      	str	r3, [sp, #20]
 8005058:	eba3 0309 	sub.w	r3, r3, r9
 800505c:	455b      	cmp	r3, fp
 800505e:	dc33      	bgt.n	80050c8 <_printf_float+0x384>
 8005060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005064:	429a      	cmp	r2, r3
 8005066:	db3b      	blt.n	80050e0 <_printf_float+0x39c>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	07da      	lsls	r2, r3, #31
 800506c:	d438      	bmi.n	80050e0 <_printf_float+0x39c>
 800506e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005070:	9b05      	ldr	r3, [sp, #20]
 8005072:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	eba2 0901 	sub.w	r9, r2, r1
 800507a:	4599      	cmp	r9, r3
 800507c:	bfa8      	it	ge
 800507e:	4699      	movge	r9, r3
 8005080:	f1b9 0f00 	cmp.w	r9, #0
 8005084:	dc35      	bgt.n	80050f2 <_printf_float+0x3ae>
 8005086:	f04f 0800 	mov.w	r8, #0
 800508a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800508e:	f104 0a1a 	add.w	sl, r4, #26
 8005092:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	eba3 0309 	sub.w	r3, r3, r9
 800509c:	4543      	cmp	r3, r8
 800509e:	f77f af79 	ble.w	8004f94 <_printf_float+0x250>
 80050a2:	2301      	movs	r3, #1
 80050a4:	4652      	mov	r2, sl
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b8      	blx	r7
 80050ac:	3001      	adds	r0, #1
 80050ae:	f43f aeaa 	beq.w	8004e06 <_printf_float+0xc2>
 80050b2:	f108 0801 	add.w	r8, r8, #1
 80050b6:	e7ec      	b.n	8005092 <_printf_float+0x34e>
 80050b8:	4613      	mov	r3, r2
 80050ba:	4631      	mov	r1, r6
 80050bc:	4642      	mov	r2, r8
 80050be:	4628      	mov	r0, r5
 80050c0:	47b8      	blx	r7
 80050c2:	3001      	adds	r0, #1
 80050c4:	d1c0      	bne.n	8005048 <_printf_float+0x304>
 80050c6:	e69e      	b.n	8004e06 <_printf_float+0xc2>
 80050c8:	2301      	movs	r3, #1
 80050ca:	4631      	mov	r1, r6
 80050cc:	4628      	mov	r0, r5
 80050ce:	9205      	str	r2, [sp, #20]
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	f43f ae97 	beq.w	8004e06 <_printf_float+0xc2>
 80050d8:	9a05      	ldr	r2, [sp, #20]
 80050da:	f10b 0b01 	add.w	fp, fp, #1
 80050de:	e7b9      	b.n	8005054 <_printf_float+0x310>
 80050e0:	ee18 3a10 	vmov	r3, s16
 80050e4:	4652      	mov	r2, sl
 80050e6:	4631      	mov	r1, r6
 80050e8:	4628      	mov	r0, r5
 80050ea:	47b8      	blx	r7
 80050ec:	3001      	adds	r0, #1
 80050ee:	d1be      	bne.n	800506e <_printf_float+0x32a>
 80050f0:	e689      	b.n	8004e06 <_printf_float+0xc2>
 80050f2:	9a05      	ldr	r2, [sp, #20]
 80050f4:	464b      	mov	r3, r9
 80050f6:	4442      	add	r2, r8
 80050f8:	4631      	mov	r1, r6
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b8      	blx	r7
 80050fe:	3001      	adds	r0, #1
 8005100:	d1c1      	bne.n	8005086 <_printf_float+0x342>
 8005102:	e680      	b.n	8004e06 <_printf_float+0xc2>
 8005104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005106:	2a01      	cmp	r2, #1
 8005108:	dc01      	bgt.n	800510e <_printf_float+0x3ca>
 800510a:	07db      	lsls	r3, r3, #31
 800510c:	d538      	bpl.n	8005180 <_printf_float+0x43c>
 800510e:	2301      	movs	r3, #1
 8005110:	4642      	mov	r2, r8
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	47b8      	blx	r7
 8005118:	3001      	adds	r0, #1
 800511a:	f43f ae74 	beq.w	8004e06 <_printf_float+0xc2>
 800511e:	ee18 3a10 	vmov	r3, s16
 8005122:	4652      	mov	r2, sl
 8005124:	4631      	mov	r1, r6
 8005126:	4628      	mov	r0, r5
 8005128:	47b8      	blx	r7
 800512a:	3001      	adds	r0, #1
 800512c:	f43f ae6b 	beq.w	8004e06 <_printf_float+0xc2>
 8005130:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005134:	2200      	movs	r2, #0
 8005136:	2300      	movs	r3, #0
 8005138:	f7fb fcde 	bl	8000af8 <__aeabi_dcmpeq>
 800513c:	b9d8      	cbnz	r0, 8005176 <_printf_float+0x432>
 800513e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005140:	f108 0201 	add.w	r2, r8, #1
 8005144:	3b01      	subs	r3, #1
 8005146:	4631      	mov	r1, r6
 8005148:	4628      	mov	r0, r5
 800514a:	47b8      	blx	r7
 800514c:	3001      	adds	r0, #1
 800514e:	d10e      	bne.n	800516e <_printf_float+0x42a>
 8005150:	e659      	b.n	8004e06 <_printf_float+0xc2>
 8005152:	2301      	movs	r3, #1
 8005154:	4652      	mov	r2, sl
 8005156:	4631      	mov	r1, r6
 8005158:	4628      	mov	r0, r5
 800515a:	47b8      	blx	r7
 800515c:	3001      	adds	r0, #1
 800515e:	f43f ae52 	beq.w	8004e06 <_printf_float+0xc2>
 8005162:	f108 0801 	add.w	r8, r8, #1
 8005166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005168:	3b01      	subs	r3, #1
 800516a:	4543      	cmp	r3, r8
 800516c:	dcf1      	bgt.n	8005152 <_printf_float+0x40e>
 800516e:	464b      	mov	r3, r9
 8005170:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005174:	e6dc      	b.n	8004f30 <_printf_float+0x1ec>
 8005176:	f04f 0800 	mov.w	r8, #0
 800517a:	f104 0a1a 	add.w	sl, r4, #26
 800517e:	e7f2      	b.n	8005166 <_printf_float+0x422>
 8005180:	2301      	movs	r3, #1
 8005182:	4642      	mov	r2, r8
 8005184:	e7df      	b.n	8005146 <_printf_float+0x402>
 8005186:	2301      	movs	r3, #1
 8005188:	464a      	mov	r2, r9
 800518a:	4631      	mov	r1, r6
 800518c:	4628      	mov	r0, r5
 800518e:	47b8      	blx	r7
 8005190:	3001      	adds	r0, #1
 8005192:	f43f ae38 	beq.w	8004e06 <_printf_float+0xc2>
 8005196:	f108 0801 	add.w	r8, r8, #1
 800519a:	68e3      	ldr	r3, [r4, #12]
 800519c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800519e:	1a5b      	subs	r3, r3, r1
 80051a0:	4543      	cmp	r3, r8
 80051a2:	dcf0      	bgt.n	8005186 <_printf_float+0x442>
 80051a4:	e6fa      	b.n	8004f9c <_printf_float+0x258>
 80051a6:	f04f 0800 	mov.w	r8, #0
 80051aa:	f104 0919 	add.w	r9, r4, #25
 80051ae:	e7f4      	b.n	800519a <_printf_float+0x456>

080051b0 <_printf_common>:
 80051b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b4:	4616      	mov	r6, r2
 80051b6:	4699      	mov	r9, r3
 80051b8:	688a      	ldr	r2, [r1, #8]
 80051ba:	690b      	ldr	r3, [r1, #16]
 80051bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051c0:	4293      	cmp	r3, r2
 80051c2:	bfb8      	it	lt
 80051c4:	4613      	movlt	r3, r2
 80051c6:	6033      	str	r3, [r6, #0]
 80051c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051cc:	4607      	mov	r7, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	b10a      	cbz	r2, 80051d6 <_printf_common+0x26>
 80051d2:	3301      	adds	r3, #1
 80051d4:	6033      	str	r3, [r6, #0]
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	0699      	lsls	r1, r3, #26
 80051da:	bf42      	ittt	mi
 80051dc:	6833      	ldrmi	r3, [r6, #0]
 80051de:	3302      	addmi	r3, #2
 80051e0:	6033      	strmi	r3, [r6, #0]
 80051e2:	6825      	ldr	r5, [r4, #0]
 80051e4:	f015 0506 	ands.w	r5, r5, #6
 80051e8:	d106      	bne.n	80051f8 <_printf_common+0x48>
 80051ea:	f104 0a19 	add.w	sl, r4, #25
 80051ee:	68e3      	ldr	r3, [r4, #12]
 80051f0:	6832      	ldr	r2, [r6, #0]
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	42ab      	cmp	r3, r5
 80051f6:	dc26      	bgt.n	8005246 <_printf_common+0x96>
 80051f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051fc:	1e13      	subs	r3, r2, #0
 80051fe:	6822      	ldr	r2, [r4, #0]
 8005200:	bf18      	it	ne
 8005202:	2301      	movne	r3, #1
 8005204:	0692      	lsls	r2, r2, #26
 8005206:	d42b      	bmi.n	8005260 <_printf_common+0xb0>
 8005208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800520c:	4649      	mov	r1, r9
 800520e:	4638      	mov	r0, r7
 8005210:	47c0      	blx	r8
 8005212:	3001      	adds	r0, #1
 8005214:	d01e      	beq.n	8005254 <_printf_common+0xa4>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	68e5      	ldr	r5, [r4, #12]
 800521a:	6832      	ldr	r2, [r6, #0]
 800521c:	f003 0306 	and.w	r3, r3, #6
 8005220:	2b04      	cmp	r3, #4
 8005222:	bf08      	it	eq
 8005224:	1aad      	subeq	r5, r5, r2
 8005226:	68a3      	ldr	r3, [r4, #8]
 8005228:	6922      	ldr	r2, [r4, #16]
 800522a:	bf0c      	ite	eq
 800522c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005230:	2500      	movne	r5, #0
 8005232:	4293      	cmp	r3, r2
 8005234:	bfc4      	itt	gt
 8005236:	1a9b      	subgt	r3, r3, r2
 8005238:	18ed      	addgt	r5, r5, r3
 800523a:	2600      	movs	r6, #0
 800523c:	341a      	adds	r4, #26
 800523e:	42b5      	cmp	r5, r6
 8005240:	d11a      	bne.n	8005278 <_printf_common+0xc8>
 8005242:	2000      	movs	r0, #0
 8005244:	e008      	b.n	8005258 <_printf_common+0xa8>
 8005246:	2301      	movs	r3, #1
 8005248:	4652      	mov	r2, sl
 800524a:	4649      	mov	r1, r9
 800524c:	4638      	mov	r0, r7
 800524e:	47c0      	blx	r8
 8005250:	3001      	adds	r0, #1
 8005252:	d103      	bne.n	800525c <_printf_common+0xac>
 8005254:	f04f 30ff 	mov.w	r0, #4294967295
 8005258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525c:	3501      	adds	r5, #1
 800525e:	e7c6      	b.n	80051ee <_printf_common+0x3e>
 8005260:	18e1      	adds	r1, r4, r3
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	2030      	movs	r0, #48	; 0x30
 8005266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800526a:	4422      	add	r2, r4
 800526c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005274:	3302      	adds	r3, #2
 8005276:	e7c7      	b.n	8005208 <_printf_common+0x58>
 8005278:	2301      	movs	r3, #1
 800527a:	4622      	mov	r2, r4
 800527c:	4649      	mov	r1, r9
 800527e:	4638      	mov	r0, r7
 8005280:	47c0      	blx	r8
 8005282:	3001      	adds	r0, #1
 8005284:	d0e6      	beq.n	8005254 <_printf_common+0xa4>
 8005286:	3601      	adds	r6, #1
 8005288:	e7d9      	b.n	800523e <_printf_common+0x8e>
	...

0800528c <_printf_i>:
 800528c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005290:	460c      	mov	r4, r1
 8005292:	4691      	mov	r9, r2
 8005294:	7e27      	ldrb	r7, [r4, #24]
 8005296:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005298:	2f78      	cmp	r7, #120	; 0x78
 800529a:	4680      	mov	r8, r0
 800529c:	469a      	mov	sl, r3
 800529e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052a2:	d807      	bhi.n	80052b4 <_printf_i+0x28>
 80052a4:	2f62      	cmp	r7, #98	; 0x62
 80052a6:	d80a      	bhi.n	80052be <_printf_i+0x32>
 80052a8:	2f00      	cmp	r7, #0
 80052aa:	f000 80d8 	beq.w	800545e <_printf_i+0x1d2>
 80052ae:	2f58      	cmp	r7, #88	; 0x58
 80052b0:	f000 80a3 	beq.w	80053fa <_printf_i+0x16e>
 80052b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052bc:	e03a      	b.n	8005334 <_printf_i+0xa8>
 80052be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052c2:	2b15      	cmp	r3, #21
 80052c4:	d8f6      	bhi.n	80052b4 <_printf_i+0x28>
 80052c6:	a001      	add	r0, pc, #4	; (adr r0, 80052cc <_printf_i+0x40>)
 80052c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052cc:	08005325 	.word	0x08005325
 80052d0:	08005339 	.word	0x08005339
 80052d4:	080052b5 	.word	0x080052b5
 80052d8:	080052b5 	.word	0x080052b5
 80052dc:	080052b5 	.word	0x080052b5
 80052e0:	080052b5 	.word	0x080052b5
 80052e4:	08005339 	.word	0x08005339
 80052e8:	080052b5 	.word	0x080052b5
 80052ec:	080052b5 	.word	0x080052b5
 80052f0:	080052b5 	.word	0x080052b5
 80052f4:	080052b5 	.word	0x080052b5
 80052f8:	08005445 	.word	0x08005445
 80052fc:	08005369 	.word	0x08005369
 8005300:	08005427 	.word	0x08005427
 8005304:	080052b5 	.word	0x080052b5
 8005308:	080052b5 	.word	0x080052b5
 800530c:	08005467 	.word	0x08005467
 8005310:	080052b5 	.word	0x080052b5
 8005314:	08005369 	.word	0x08005369
 8005318:	080052b5 	.word	0x080052b5
 800531c:	080052b5 	.word	0x080052b5
 8005320:	0800542f 	.word	0x0800542f
 8005324:	680b      	ldr	r3, [r1, #0]
 8005326:	1d1a      	adds	r2, r3, #4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	600a      	str	r2, [r1, #0]
 800532c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005334:	2301      	movs	r3, #1
 8005336:	e0a3      	b.n	8005480 <_printf_i+0x1f4>
 8005338:	6825      	ldr	r5, [r4, #0]
 800533a:	6808      	ldr	r0, [r1, #0]
 800533c:	062e      	lsls	r6, r5, #24
 800533e:	f100 0304 	add.w	r3, r0, #4
 8005342:	d50a      	bpl.n	800535a <_printf_i+0xce>
 8005344:	6805      	ldr	r5, [r0, #0]
 8005346:	600b      	str	r3, [r1, #0]
 8005348:	2d00      	cmp	r5, #0
 800534a:	da03      	bge.n	8005354 <_printf_i+0xc8>
 800534c:	232d      	movs	r3, #45	; 0x2d
 800534e:	426d      	negs	r5, r5
 8005350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005354:	485e      	ldr	r0, [pc, #376]	; (80054d0 <_printf_i+0x244>)
 8005356:	230a      	movs	r3, #10
 8005358:	e019      	b.n	800538e <_printf_i+0x102>
 800535a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800535e:	6805      	ldr	r5, [r0, #0]
 8005360:	600b      	str	r3, [r1, #0]
 8005362:	bf18      	it	ne
 8005364:	b22d      	sxthne	r5, r5
 8005366:	e7ef      	b.n	8005348 <_printf_i+0xbc>
 8005368:	680b      	ldr	r3, [r1, #0]
 800536a:	6825      	ldr	r5, [r4, #0]
 800536c:	1d18      	adds	r0, r3, #4
 800536e:	6008      	str	r0, [r1, #0]
 8005370:	0628      	lsls	r0, r5, #24
 8005372:	d501      	bpl.n	8005378 <_printf_i+0xec>
 8005374:	681d      	ldr	r5, [r3, #0]
 8005376:	e002      	b.n	800537e <_printf_i+0xf2>
 8005378:	0669      	lsls	r1, r5, #25
 800537a:	d5fb      	bpl.n	8005374 <_printf_i+0xe8>
 800537c:	881d      	ldrh	r5, [r3, #0]
 800537e:	4854      	ldr	r0, [pc, #336]	; (80054d0 <_printf_i+0x244>)
 8005380:	2f6f      	cmp	r7, #111	; 0x6f
 8005382:	bf0c      	ite	eq
 8005384:	2308      	moveq	r3, #8
 8005386:	230a      	movne	r3, #10
 8005388:	2100      	movs	r1, #0
 800538a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800538e:	6866      	ldr	r6, [r4, #4]
 8005390:	60a6      	str	r6, [r4, #8]
 8005392:	2e00      	cmp	r6, #0
 8005394:	bfa2      	ittt	ge
 8005396:	6821      	ldrge	r1, [r4, #0]
 8005398:	f021 0104 	bicge.w	r1, r1, #4
 800539c:	6021      	strge	r1, [r4, #0]
 800539e:	b90d      	cbnz	r5, 80053a4 <_printf_i+0x118>
 80053a0:	2e00      	cmp	r6, #0
 80053a2:	d04d      	beq.n	8005440 <_printf_i+0x1b4>
 80053a4:	4616      	mov	r6, r2
 80053a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80053aa:	fb03 5711 	mls	r7, r3, r1, r5
 80053ae:	5dc7      	ldrb	r7, [r0, r7]
 80053b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053b4:	462f      	mov	r7, r5
 80053b6:	42bb      	cmp	r3, r7
 80053b8:	460d      	mov	r5, r1
 80053ba:	d9f4      	bls.n	80053a6 <_printf_i+0x11a>
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d10b      	bne.n	80053d8 <_printf_i+0x14c>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	07df      	lsls	r7, r3, #31
 80053c4:	d508      	bpl.n	80053d8 <_printf_i+0x14c>
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	6861      	ldr	r1, [r4, #4]
 80053ca:	4299      	cmp	r1, r3
 80053cc:	bfde      	ittt	le
 80053ce:	2330      	movle	r3, #48	; 0x30
 80053d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053d8:	1b92      	subs	r2, r2, r6
 80053da:	6122      	str	r2, [r4, #16]
 80053dc:	f8cd a000 	str.w	sl, [sp]
 80053e0:	464b      	mov	r3, r9
 80053e2:	aa03      	add	r2, sp, #12
 80053e4:	4621      	mov	r1, r4
 80053e6:	4640      	mov	r0, r8
 80053e8:	f7ff fee2 	bl	80051b0 <_printf_common>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d14c      	bne.n	800548a <_printf_i+0x1fe>
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	b004      	add	sp, #16
 80053f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053fa:	4835      	ldr	r0, [pc, #212]	; (80054d0 <_printf_i+0x244>)
 80053fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	680e      	ldr	r6, [r1, #0]
 8005404:	061f      	lsls	r7, r3, #24
 8005406:	f856 5b04 	ldr.w	r5, [r6], #4
 800540a:	600e      	str	r6, [r1, #0]
 800540c:	d514      	bpl.n	8005438 <_printf_i+0x1ac>
 800540e:	07d9      	lsls	r1, r3, #31
 8005410:	bf44      	itt	mi
 8005412:	f043 0320 	orrmi.w	r3, r3, #32
 8005416:	6023      	strmi	r3, [r4, #0]
 8005418:	b91d      	cbnz	r5, 8005422 <_printf_i+0x196>
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	f023 0320 	bic.w	r3, r3, #32
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	2310      	movs	r3, #16
 8005424:	e7b0      	b.n	8005388 <_printf_i+0xfc>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	f043 0320 	orr.w	r3, r3, #32
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	2378      	movs	r3, #120	; 0x78
 8005430:	4828      	ldr	r0, [pc, #160]	; (80054d4 <_printf_i+0x248>)
 8005432:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005436:	e7e3      	b.n	8005400 <_printf_i+0x174>
 8005438:	065e      	lsls	r6, r3, #25
 800543a:	bf48      	it	mi
 800543c:	b2ad      	uxthmi	r5, r5
 800543e:	e7e6      	b.n	800540e <_printf_i+0x182>
 8005440:	4616      	mov	r6, r2
 8005442:	e7bb      	b.n	80053bc <_printf_i+0x130>
 8005444:	680b      	ldr	r3, [r1, #0]
 8005446:	6826      	ldr	r6, [r4, #0]
 8005448:	6960      	ldr	r0, [r4, #20]
 800544a:	1d1d      	adds	r5, r3, #4
 800544c:	600d      	str	r5, [r1, #0]
 800544e:	0635      	lsls	r5, r6, #24
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	d501      	bpl.n	8005458 <_printf_i+0x1cc>
 8005454:	6018      	str	r0, [r3, #0]
 8005456:	e002      	b.n	800545e <_printf_i+0x1d2>
 8005458:	0671      	lsls	r1, r6, #25
 800545a:	d5fb      	bpl.n	8005454 <_printf_i+0x1c8>
 800545c:	8018      	strh	r0, [r3, #0]
 800545e:	2300      	movs	r3, #0
 8005460:	6123      	str	r3, [r4, #16]
 8005462:	4616      	mov	r6, r2
 8005464:	e7ba      	b.n	80053dc <_printf_i+0x150>
 8005466:	680b      	ldr	r3, [r1, #0]
 8005468:	1d1a      	adds	r2, r3, #4
 800546a:	600a      	str	r2, [r1, #0]
 800546c:	681e      	ldr	r6, [r3, #0]
 800546e:	6862      	ldr	r2, [r4, #4]
 8005470:	2100      	movs	r1, #0
 8005472:	4630      	mov	r0, r6
 8005474:	f7fa fecc 	bl	8000210 <memchr>
 8005478:	b108      	cbz	r0, 800547e <_printf_i+0x1f2>
 800547a:	1b80      	subs	r0, r0, r6
 800547c:	6060      	str	r0, [r4, #4]
 800547e:	6863      	ldr	r3, [r4, #4]
 8005480:	6123      	str	r3, [r4, #16]
 8005482:	2300      	movs	r3, #0
 8005484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005488:	e7a8      	b.n	80053dc <_printf_i+0x150>
 800548a:	6923      	ldr	r3, [r4, #16]
 800548c:	4632      	mov	r2, r6
 800548e:	4649      	mov	r1, r9
 8005490:	4640      	mov	r0, r8
 8005492:	47d0      	blx	sl
 8005494:	3001      	adds	r0, #1
 8005496:	d0ab      	beq.n	80053f0 <_printf_i+0x164>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	079b      	lsls	r3, r3, #30
 800549c:	d413      	bmi.n	80054c6 <_printf_i+0x23a>
 800549e:	68e0      	ldr	r0, [r4, #12]
 80054a0:	9b03      	ldr	r3, [sp, #12]
 80054a2:	4298      	cmp	r0, r3
 80054a4:	bfb8      	it	lt
 80054a6:	4618      	movlt	r0, r3
 80054a8:	e7a4      	b.n	80053f4 <_printf_i+0x168>
 80054aa:	2301      	movs	r3, #1
 80054ac:	4632      	mov	r2, r6
 80054ae:	4649      	mov	r1, r9
 80054b0:	4640      	mov	r0, r8
 80054b2:	47d0      	blx	sl
 80054b4:	3001      	adds	r0, #1
 80054b6:	d09b      	beq.n	80053f0 <_printf_i+0x164>
 80054b8:	3501      	adds	r5, #1
 80054ba:	68e3      	ldr	r3, [r4, #12]
 80054bc:	9903      	ldr	r1, [sp, #12]
 80054be:	1a5b      	subs	r3, r3, r1
 80054c0:	42ab      	cmp	r3, r5
 80054c2:	dcf2      	bgt.n	80054aa <_printf_i+0x21e>
 80054c4:	e7eb      	b.n	800549e <_printf_i+0x212>
 80054c6:	2500      	movs	r5, #0
 80054c8:	f104 0619 	add.w	r6, r4, #25
 80054cc:	e7f5      	b.n	80054ba <_printf_i+0x22e>
 80054ce:	bf00      	nop
 80054d0:	08009f9c 	.word	0x08009f9c
 80054d4:	08009fad 	.word	0x08009fad

080054d8 <_scanf_float>:
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	b087      	sub	sp, #28
 80054de:	4617      	mov	r7, r2
 80054e0:	9303      	str	r3, [sp, #12]
 80054e2:	688b      	ldr	r3, [r1, #8]
 80054e4:	1e5a      	subs	r2, r3, #1
 80054e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80054ea:	bf83      	ittte	hi
 80054ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80054f0:	195b      	addhi	r3, r3, r5
 80054f2:	9302      	strhi	r3, [sp, #8]
 80054f4:	2300      	movls	r3, #0
 80054f6:	bf86      	itte	hi
 80054f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80054fc:	608b      	strhi	r3, [r1, #8]
 80054fe:	9302      	strls	r3, [sp, #8]
 8005500:	680b      	ldr	r3, [r1, #0]
 8005502:	468b      	mov	fp, r1
 8005504:	2500      	movs	r5, #0
 8005506:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800550a:	f84b 3b1c 	str.w	r3, [fp], #28
 800550e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005512:	4680      	mov	r8, r0
 8005514:	460c      	mov	r4, r1
 8005516:	465e      	mov	r6, fp
 8005518:	46aa      	mov	sl, r5
 800551a:	46a9      	mov	r9, r5
 800551c:	9501      	str	r5, [sp, #4]
 800551e:	68a2      	ldr	r2, [r4, #8]
 8005520:	b152      	cbz	r2, 8005538 <_scanf_float+0x60>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b4e      	cmp	r3, #78	; 0x4e
 8005528:	d864      	bhi.n	80055f4 <_scanf_float+0x11c>
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d83c      	bhi.n	80055a8 <_scanf_float+0xd0>
 800552e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005532:	b2c8      	uxtb	r0, r1
 8005534:	280e      	cmp	r0, #14
 8005536:	d93a      	bls.n	80055ae <_scanf_float+0xd6>
 8005538:	f1b9 0f00 	cmp.w	r9, #0
 800553c:	d003      	beq.n	8005546 <_scanf_float+0x6e>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	f10a 3aff 	add.w	sl, sl, #4294967295
 800554a:	f1ba 0f01 	cmp.w	sl, #1
 800554e:	f200 8113 	bhi.w	8005778 <_scanf_float+0x2a0>
 8005552:	455e      	cmp	r6, fp
 8005554:	f200 8105 	bhi.w	8005762 <_scanf_float+0x28a>
 8005558:	2501      	movs	r5, #1
 800555a:	4628      	mov	r0, r5
 800555c:	b007      	add	sp, #28
 800555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005562:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005566:	2a0d      	cmp	r2, #13
 8005568:	d8e6      	bhi.n	8005538 <_scanf_float+0x60>
 800556a:	a101      	add	r1, pc, #4	; (adr r1, 8005570 <_scanf_float+0x98>)
 800556c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005570:	080056af 	.word	0x080056af
 8005574:	08005539 	.word	0x08005539
 8005578:	08005539 	.word	0x08005539
 800557c:	08005539 	.word	0x08005539
 8005580:	0800570f 	.word	0x0800570f
 8005584:	080056e7 	.word	0x080056e7
 8005588:	08005539 	.word	0x08005539
 800558c:	08005539 	.word	0x08005539
 8005590:	080056bd 	.word	0x080056bd
 8005594:	08005539 	.word	0x08005539
 8005598:	08005539 	.word	0x08005539
 800559c:	08005539 	.word	0x08005539
 80055a0:	08005539 	.word	0x08005539
 80055a4:	08005675 	.word	0x08005675
 80055a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80055ac:	e7db      	b.n	8005566 <_scanf_float+0x8e>
 80055ae:	290e      	cmp	r1, #14
 80055b0:	d8c2      	bhi.n	8005538 <_scanf_float+0x60>
 80055b2:	a001      	add	r0, pc, #4	; (adr r0, 80055b8 <_scanf_float+0xe0>)
 80055b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80055b8:	08005667 	.word	0x08005667
 80055bc:	08005539 	.word	0x08005539
 80055c0:	08005667 	.word	0x08005667
 80055c4:	080056fb 	.word	0x080056fb
 80055c8:	08005539 	.word	0x08005539
 80055cc:	08005615 	.word	0x08005615
 80055d0:	08005651 	.word	0x08005651
 80055d4:	08005651 	.word	0x08005651
 80055d8:	08005651 	.word	0x08005651
 80055dc:	08005651 	.word	0x08005651
 80055e0:	08005651 	.word	0x08005651
 80055e4:	08005651 	.word	0x08005651
 80055e8:	08005651 	.word	0x08005651
 80055ec:	08005651 	.word	0x08005651
 80055f0:	08005651 	.word	0x08005651
 80055f4:	2b6e      	cmp	r3, #110	; 0x6e
 80055f6:	d809      	bhi.n	800560c <_scanf_float+0x134>
 80055f8:	2b60      	cmp	r3, #96	; 0x60
 80055fa:	d8b2      	bhi.n	8005562 <_scanf_float+0x8a>
 80055fc:	2b54      	cmp	r3, #84	; 0x54
 80055fe:	d077      	beq.n	80056f0 <_scanf_float+0x218>
 8005600:	2b59      	cmp	r3, #89	; 0x59
 8005602:	d199      	bne.n	8005538 <_scanf_float+0x60>
 8005604:	2d07      	cmp	r5, #7
 8005606:	d197      	bne.n	8005538 <_scanf_float+0x60>
 8005608:	2508      	movs	r5, #8
 800560a:	e029      	b.n	8005660 <_scanf_float+0x188>
 800560c:	2b74      	cmp	r3, #116	; 0x74
 800560e:	d06f      	beq.n	80056f0 <_scanf_float+0x218>
 8005610:	2b79      	cmp	r3, #121	; 0x79
 8005612:	e7f6      	b.n	8005602 <_scanf_float+0x12a>
 8005614:	6821      	ldr	r1, [r4, #0]
 8005616:	05c8      	lsls	r0, r1, #23
 8005618:	d51a      	bpl.n	8005650 <_scanf_float+0x178>
 800561a:	9b02      	ldr	r3, [sp, #8]
 800561c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005620:	6021      	str	r1, [r4, #0]
 8005622:	f109 0901 	add.w	r9, r9, #1
 8005626:	b11b      	cbz	r3, 8005630 <_scanf_float+0x158>
 8005628:	3b01      	subs	r3, #1
 800562a:	3201      	adds	r2, #1
 800562c:	9302      	str	r3, [sp, #8]
 800562e:	60a2      	str	r2, [r4, #8]
 8005630:	68a3      	ldr	r3, [r4, #8]
 8005632:	3b01      	subs	r3, #1
 8005634:	60a3      	str	r3, [r4, #8]
 8005636:	6923      	ldr	r3, [r4, #16]
 8005638:	3301      	adds	r3, #1
 800563a:	6123      	str	r3, [r4, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	3b01      	subs	r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	607b      	str	r3, [r7, #4]
 8005644:	f340 8084 	ble.w	8005750 <_scanf_float+0x278>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	603b      	str	r3, [r7, #0]
 800564e:	e766      	b.n	800551e <_scanf_float+0x46>
 8005650:	eb1a 0f05 	cmn.w	sl, r5
 8005654:	f47f af70 	bne.w	8005538 <_scanf_float+0x60>
 8005658:	6822      	ldr	r2, [r4, #0]
 800565a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800565e:	6022      	str	r2, [r4, #0]
 8005660:	f806 3b01 	strb.w	r3, [r6], #1
 8005664:	e7e4      	b.n	8005630 <_scanf_float+0x158>
 8005666:	6822      	ldr	r2, [r4, #0]
 8005668:	0610      	lsls	r0, r2, #24
 800566a:	f57f af65 	bpl.w	8005538 <_scanf_float+0x60>
 800566e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005672:	e7f4      	b.n	800565e <_scanf_float+0x186>
 8005674:	f1ba 0f00 	cmp.w	sl, #0
 8005678:	d10e      	bne.n	8005698 <_scanf_float+0x1c0>
 800567a:	f1b9 0f00 	cmp.w	r9, #0
 800567e:	d10e      	bne.n	800569e <_scanf_float+0x1c6>
 8005680:	6822      	ldr	r2, [r4, #0]
 8005682:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005686:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800568a:	d108      	bne.n	800569e <_scanf_float+0x1c6>
 800568c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005690:	6022      	str	r2, [r4, #0]
 8005692:	f04f 0a01 	mov.w	sl, #1
 8005696:	e7e3      	b.n	8005660 <_scanf_float+0x188>
 8005698:	f1ba 0f02 	cmp.w	sl, #2
 800569c:	d055      	beq.n	800574a <_scanf_float+0x272>
 800569e:	2d01      	cmp	r5, #1
 80056a0:	d002      	beq.n	80056a8 <_scanf_float+0x1d0>
 80056a2:	2d04      	cmp	r5, #4
 80056a4:	f47f af48 	bne.w	8005538 <_scanf_float+0x60>
 80056a8:	3501      	adds	r5, #1
 80056aa:	b2ed      	uxtb	r5, r5
 80056ac:	e7d8      	b.n	8005660 <_scanf_float+0x188>
 80056ae:	f1ba 0f01 	cmp.w	sl, #1
 80056b2:	f47f af41 	bne.w	8005538 <_scanf_float+0x60>
 80056b6:	f04f 0a02 	mov.w	sl, #2
 80056ba:	e7d1      	b.n	8005660 <_scanf_float+0x188>
 80056bc:	b97d      	cbnz	r5, 80056de <_scanf_float+0x206>
 80056be:	f1b9 0f00 	cmp.w	r9, #0
 80056c2:	f47f af3c 	bne.w	800553e <_scanf_float+0x66>
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80056cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80056d0:	f47f af39 	bne.w	8005546 <_scanf_float+0x6e>
 80056d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80056d8:	6022      	str	r2, [r4, #0]
 80056da:	2501      	movs	r5, #1
 80056dc:	e7c0      	b.n	8005660 <_scanf_float+0x188>
 80056de:	2d03      	cmp	r5, #3
 80056e0:	d0e2      	beq.n	80056a8 <_scanf_float+0x1d0>
 80056e2:	2d05      	cmp	r5, #5
 80056e4:	e7de      	b.n	80056a4 <_scanf_float+0x1cc>
 80056e6:	2d02      	cmp	r5, #2
 80056e8:	f47f af26 	bne.w	8005538 <_scanf_float+0x60>
 80056ec:	2503      	movs	r5, #3
 80056ee:	e7b7      	b.n	8005660 <_scanf_float+0x188>
 80056f0:	2d06      	cmp	r5, #6
 80056f2:	f47f af21 	bne.w	8005538 <_scanf_float+0x60>
 80056f6:	2507      	movs	r5, #7
 80056f8:	e7b2      	b.n	8005660 <_scanf_float+0x188>
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	0591      	lsls	r1, r2, #22
 80056fe:	f57f af1b 	bpl.w	8005538 <_scanf_float+0x60>
 8005702:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005706:	6022      	str	r2, [r4, #0]
 8005708:	f8cd 9004 	str.w	r9, [sp, #4]
 800570c:	e7a8      	b.n	8005660 <_scanf_float+0x188>
 800570e:	6822      	ldr	r2, [r4, #0]
 8005710:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005714:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005718:	d006      	beq.n	8005728 <_scanf_float+0x250>
 800571a:	0550      	lsls	r0, r2, #21
 800571c:	f57f af0c 	bpl.w	8005538 <_scanf_float+0x60>
 8005720:	f1b9 0f00 	cmp.w	r9, #0
 8005724:	f43f af0f 	beq.w	8005546 <_scanf_float+0x6e>
 8005728:	0591      	lsls	r1, r2, #22
 800572a:	bf58      	it	pl
 800572c:	9901      	ldrpl	r1, [sp, #4]
 800572e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005732:	bf58      	it	pl
 8005734:	eba9 0101 	subpl.w	r1, r9, r1
 8005738:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800573c:	bf58      	it	pl
 800573e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005742:	6022      	str	r2, [r4, #0]
 8005744:	f04f 0900 	mov.w	r9, #0
 8005748:	e78a      	b.n	8005660 <_scanf_float+0x188>
 800574a:	f04f 0a03 	mov.w	sl, #3
 800574e:	e787      	b.n	8005660 <_scanf_float+0x188>
 8005750:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005754:	4639      	mov	r1, r7
 8005756:	4640      	mov	r0, r8
 8005758:	4798      	blx	r3
 800575a:	2800      	cmp	r0, #0
 800575c:	f43f aedf 	beq.w	800551e <_scanf_float+0x46>
 8005760:	e6ea      	b.n	8005538 <_scanf_float+0x60>
 8005762:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005766:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800576a:	463a      	mov	r2, r7
 800576c:	4640      	mov	r0, r8
 800576e:	4798      	blx	r3
 8005770:	6923      	ldr	r3, [r4, #16]
 8005772:	3b01      	subs	r3, #1
 8005774:	6123      	str	r3, [r4, #16]
 8005776:	e6ec      	b.n	8005552 <_scanf_float+0x7a>
 8005778:	1e6b      	subs	r3, r5, #1
 800577a:	2b06      	cmp	r3, #6
 800577c:	d825      	bhi.n	80057ca <_scanf_float+0x2f2>
 800577e:	2d02      	cmp	r5, #2
 8005780:	d836      	bhi.n	80057f0 <_scanf_float+0x318>
 8005782:	455e      	cmp	r6, fp
 8005784:	f67f aee8 	bls.w	8005558 <_scanf_float+0x80>
 8005788:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800578c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005790:	463a      	mov	r2, r7
 8005792:	4640      	mov	r0, r8
 8005794:	4798      	blx	r3
 8005796:	6923      	ldr	r3, [r4, #16]
 8005798:	3b01      	subs	r3, #1
 800579a:	6123      	str	r3, [r4, #16]
 800579c:	e7f1      	b.n	8005782 <_scanf_float+0x2aa>
 800579e:	9802      	ldr	r0, [sp, #8]
 80057a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80057a8:	9002      	str	r0, [sp, #8]
 80057aa:	463a      	mov	r2, r7
 80057ac:	4640      	mov	r0, r8
 80057ae:	4798      	blx	r3
 80057b0:	6923      	ldr	r3, [r4, #16]
 80057b2:	3b01      	subs	r3, #1
 80057b4:	6123      	str	r3, [r4, #16]
 80057b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057ba:	fa5f fa8a 	uxtb.w	sl, sl
 80057be:	f1ba 0f02 	cmp.w	sl, #2
 80057c2:	d1ec      	bne.n	800579e <_scanf_float+0x2c6>
 80057c4:	3d03      	subs	r5, #3
 80057c6:	b2ed      	uxtb	r5, r5
 80057c8:	1b76      	subs	r6, r6, r5
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	05da      	lsls	r2, r3, #23
 80057ce:	d52f      	bpl.n	8005830 <_scanf_float+0x358>
 80057d0:	055b      	lsls	r3, r3, #21
 80057d2:	d510      	bpl.n	80057f6 <_scanf_float+0x31e>
 80057d4:	455e      	cmp	r6, fp
 80057d6:	f67f aebf 	bls.w	8005558 <_scanf_float+0x80>
 80057da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057e2:	463a      	mov	r2, r7
 80057e4:	4640      	mov	r0, r8
 80057e6:	4798      	blx	r3
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	6123      	str	r3, [r4, #16]
 80057ee:	e7f1      	b.n	80057d4 <_scanf_float+0x2fc>
 80057f0:	46aa      	mov	sl, r5
 80057f2:	9602      	str	r6, [sp, #8]
 80057f4:	e7df      	b.n	80057b6 <_scanf_float+0x2de>
 80057f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80057fa:	6923      	ldr	r3, [r4, #16]
 80057fc:	2965      	cmp	r1, #101	; 0x65
 80057fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8005802:	f106 35ff 	add.w	r5, r6, #4294967295
 8005806:	6123      	str	r3, [r4, #16]
 8005808:	d00c      	beq.n	8005824 <_scanf_float+0x34c>
 800580a:	2945      	cmp	r1, #69	; 0x45
 800580c:	d00a      	beq.n	8005824 <_scanf_float+0x34c>
 800580e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005812:	463a      	mov	r2, r7
 8005814:	4640      	mov	r0, r8
 8005816:	4798      	blx	r3
 8005818:	6923      	ldr	r3, [r4, #16]
 800581a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800581e:	3b01      	subs	r3, #1
 8005820:	1eb5      	subs	r5, r6, #2
 8005822:	6123      	str	r3, [r4, #16]
 8005824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005828:	463a      	mov	r2, r7
 800582a:	4640      	mov	r0, r8
 800582c:	4798      	blx	r3
 800582e:	462e      	mov	r6, r5
 8005830:	6825      	ldr	r5, [r4, #0]
 8005832:	f015 0510 	ands.w	r5, r5, #16
 8005836:	d158      	bne.n	80058ea <_scanf_float+0x412>
 8005838:	7035      	strb	r5, [r6, #0]
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005844:	d11c      	bne.n	8005880 <_scanf_float+0x3a8>
 8005846:	9b01      	ldr	r3, [sp, #4]
 8005848:	454b      	cmp	r3, r9
 800584a:	eba3 0209 	sub.w	r2, r3, r9
 800584e:	d124      	bne.n	800589a <_scanf_float+0x3c2>
 8005850:	2200      	movs	r2, #0
 8005852:	4659      	mov	r1, fp
 8005854:	4640      	mov	r0, r8
 8005856:	f000 ff19 	bl	800668c <_strtod_r>
 800585a:	9b03      	ldr	r3, [sp, #12]
 800585c:	6821      	ldr	r1, [r4, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f011 0f02 	tst.w	r1, #2
 8005864:	ec57 6b10 	vmov	r6, r7, d0
 8005868:	f103 0204 	add.w	r2, r3, #4
 800586c:	d020      	beq.n	80058b0 <_scanf_float+0x3d8>
 800586e:	9903      	ldr	r1, [sp, #12]
 8005870:	600a      	str	r2, [r1, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	e9c3 6700 	strd	r6, r7, [r3]
 8005878:	68e3      	ldr	r3, [r4, #12]
 800587a:	3301      	adds	r3, #1
 800587c:	60e3      	str	r3, [r4, #12]
 800587e:	e66c      	b.n	800555a <_scanf_float+0x82>
 8005880:	9b04      	ldr	r3, [sp, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0e4      	beq.n	8005850 <_scanf_float+0x378>
 8005886:	9905      	ldr	r1, [sp, #20]
 8005888:	230a      	movs	r3, #10
 800588a:	462a      	mov	r2, r5
 800588c:	3101      	adds	r1, #1
 800588e:	4640      	mov	r0, r8
 8005890:	f000 ff86 	bl	80067a0 <_strtol_r>
 8005894:	9b04      	ldr	r3, [sp, #16]
 8005896:	9e05      	ldr	r6, [sp, #20]
 8005898:	1ac2      	subs	r2, r0, r3
 800589a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800589e:	429e      	cmp	r6, r3
 80058a0:	bf28      	it	cs
 80058a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80058a6:	4912      	ldr	r1, [pc, #72]	; (80058f0 <_scanf_float+0x418>)
 80058a8:	4630      	mov	r0, r6
 80058aa:	f000 f82b 	bl	8005904 <siprintf>
 80058ae:	e7cf      	b.n	8005850 <_scanf_float+0x378>
 80058b0:	f011 0f04 	tst.w	r1, #4
 80058b4:	9903      	ldr	r1, [sp, #12]
 80058b6:	600a      	str	r2, [r1, #0]
 80058b8:	d1db      	bne.n	8005872 <_scanf_float+0x39a>
 80058ba:	f8d3 8000 	ldr.w	r8, [r3]
 80058be:	ee10 2a10 	vmov	r2, s0
 80058c2:	ee10 0a10 	vmov	r0, s0
 80058c6:	463b      	mov	r3, r7
 80058c8:	4639      	mov	r1, r7
 80058ca:	f7fb f947 	bl	8000b5c <__aeabi_dcmpun>
 80058ce:	b128      	cbz	r0, 80058dc <_scanf_float+0x404>
 80058d0:	4808      	ldr	r0, [pc, #32]	; (80058f4 <_scanf_float+0x41c>)
 80058d2:	f000 f811 	bl	80058f8 <nanf>
 80058d6:	ed88 0a00 	vstr	s0, [r8]
 80058da:	e7cd      	b.n	8005878 <_scanf_float+0x3a0>
 80058dc:	4630      	mov	r0, r6
 80058de:	4639      	mov	r1, r7
 80058e0:	f7fb f99a 	bl	8000c18 <__aeabi_d2f>
 80058e4:	f8c8 0000 	str.w	r0, [r8]
 80058e8:	e7c6      	b.n	8005878 <_scanf_float+0x3a0>
 80058ea:	2500      	movs	r5, #0
 80058ec:	e635      	b.n	800555a <_scanf_float+0x82>
 80058ee:	bf00      	nop
 80058f0:	08009fbe 	.word	0x08009fbe
 80058f4:	0800a3f3 	.word	0x0800a3f3

080058f8 <nanf>:
 80058f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005900 <nanf+0x8>
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	7fc00000 	.word	0x7fc00000

08005904 <siprintf>:
 8005904:	b40e      	push	{r1, r2, r3}
 8005906:	b500      	push	{lr}
 8005908:	b09c      	sub	sp, #112	; 0x70
 800590a:	ab1d      	add	r3, sp, #116	; 0x74
 800590c:	9002      	str	r0, [sp, #8]
 800590e:	9006      	str	r0, [sp, #24]
 8005910:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005914:	4809      	ldr	r0, [pc, #36]	; (800593c <siprintf+0x38>)
 8005916:	9107      	str	r1, [sp, #28]
 8005918:	9104      	str	r1, [sp, #16]
 800591a:	4909      	ldr	r1, [pc, #36]	; (8005940 <siprintf+0x3c>)
 800591c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005920:	9105      	str	r1, [sp, #20]
 8005922:	6800      	ldr	r0, [r0, #0]
 8005924:	9301      	str	r3, [sp, #4]
 8005926:	a902      	add	r1, sp, #8
 8005928:	f002 ff54 	bl	80087d4 <_svfiprintf_r>
 800592c:	9b02      	ldr	r3, [sp, #8]
 800592e:	2200      	movs	r2, #0
 8005930:	701a      	strb	r2, [r3, #0]
 8005932:	b01c      	add	sp, #112	; 0x70
 8005934:	f85d eb04 	ldr.w	lr, [sp], #4
 8005938:	b003      	add	sp, #12
 800593a:	4770      	bx	lr
 800593c:	20000030 	.word	0x20000030
 8005940:	ffff0208 	.word	0xffff0208

08005944 <siscanf>:
 8005944:	b40e      	push	{r1, r2, r3}
 8005946:	b510      	push	{r4, lr}
 8005948:	b09f      	sub	sp, #124	; 0x7c
 800594a:	ac21      	add	r4, sp, #132	; 0x84
 800594c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005950:	f854 2b04 	ldr.w	r2, [r4], #4
 8005954:	9201      	str	r2, [sp, #4]
 8005956:	f8ad 101c 	strh.w	r1, [sp, #28]
 800595a:	9004      	str	r0, [sp, #16]
 800595c:	9008      	str	r0, [sp, #32]
 800595e:	f7fa fc49 	bl	80001f4 <strlen>
 8005962:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <siscanf+0x50>)
 8005964:	9005      	str	r0, [sp, #20]
 8005966:	9009      	str	r0, [sp, #36]	; 0x24
 8005968:	930d      	str	r3, [sp, #52]	; 0x34
 800596a:	480b      	ldr	r0, [pc, #44]	; (8005998 <siscanf+0x54>)
 800596c:	9a01      	ldr	r2, [sp, #4]
 800596e:	6800      	ldr	r0, [r0, #0]
 8005970:	9403      	str	r4, [sp, #12]
 8005972:	2300      	movs	r3, #0
 8005974:	9311      	str	r3, [sp, #68]	; 0x44
 8005976:	9316      	str	r3, [sp, #88]	; 0x58
 8005978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800597c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005980:	a904      	add	r1, sp, #16
 8005982:	4623      	mov	r3, r4
 8005984:	f003 f880 	bl	8008a88 <__ssvfiscanf_r>
 8005988:	b01f      	add	sp, #124	; 0x7c
 800598a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800598e:	b003      	add	sp, #12
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	080059bf 	.word	0x080059bf
 8005998:	20000030 	.word	0x20000030

0800599c <__sread>:
 800599c:	b510      	push	{r4, lr}
 800599e:	460c      	mov	r4, r1
 80059a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a4:	f003 fb34 	bl	8009010 <_read_r>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	bfab      	itete	ge
 80059ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059ae:	89a3      	ldrhlt	r3, [r4, #12]
 80059b0:	181b      	addge	r3, r3, r0
 80059b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059b6:	bfac      	ite	ge
 80059b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80059ba:	81a3      	strhlt	r3, [r4, #12]
 80059bc:	bd10      	pop	{r4, pc}

080059be <__seofread>:
 80059be:	2000      	movs	r0, #0
 80059c0:	4770      	bx	lr

080059c2 <__swrite>:
 80059c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c6:	461f      	mov	r7, r3
 80059c8:	898b      	ldrh	r3, [r1, #12]
 80059ca:	05db      	lsls	r3, r3, #23
 80059cc:	4605      	mov	r5, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	4616      	mov	r6, r2
 80059d2:	d505      	bpl.n	80059e0 <__swrite+0x1e>
 80059d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d8:	2302      	movs	r3, #2
 80059da:	2200      	movs	r2, #0
 80059dc:	f002 f8f0 	bl	8007bc0 <_lseek_r>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	4632      	mov	r2, r6
 80059ee:	463b      	mov	r3, r7
 80059f0:	4628      	mov	r0, r5
 80059f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059f6:	f000 bed5 	b.w	80067a4 <_write_r>

080059fa <__sseek>:
 80059fa:	b510      	push	{r4, lr}
 80059fc:	460c      	mov	r4, r1
 80059fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a02:	f002 f8dd 	bl	8007bc0 <_lseek_r>
 8005a06:	1c43      	adds	r3, r0, #1
 8005a08:	89a3      	ldrh	r3, [r4, #12]
 8005a0a:	bf15      	itete	ne
 8005a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a16:	81a3      	strheq	r3, [r4, #12]
 8005a18:	bf18      	it	ne
 8005a1a:	81a3      	strhne	r3, [r4, #12]
 8005a1c:	bd10      	pop	{r4, pc}

08005a1e <__sclose>:
 8005a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a22:	f000 bed1 	b.w	80067c8 <_close_r>

08005a26 <strchr>:
 8005a26:	b2c9      	uxtb	r1, r1
 8005a28:	4603      	mov	r3, r0
 8005a2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a2e:	b11a      	cbz	r2, 8005a38 <strchr+0x12>
 8005a30:	428a      	cmp	r2, r1
 8005a32:	d1f9      	bne.n	8005a28 <strchr+0x2>
 8005a34:	4618      	mov	r0, r3
 8005a36:	4770      	bx	lr
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	bf18      	it	ne
 8005a3c:	2300      	movne	r3, #0
 8005a3e:	e7f9      	b.n	8005a34 <strchr+0xe>

08005a40 <sulp>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	4604      	mov	r4, r0
 8005a44:	460d      	mov	r5, r1
 8005a46:	ec45 4b10 	vmov	d0, r4, r5
 8005a4a:	4616      	mov	r6, r2
 8005a4c:	f002 fc5e 	bl	800830c <__ulp>
 8005a50:	ec51 0b10 	vmov	r0, r1, d0
 8005a54:	b17e      	cbz	r6, 8005a76 <sulp+0x36>
 8005a56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005a5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	dd09      	ble.n	8005a76 <sulp+0x36>
 8005a62:	051b      	lsls	r3, r3, #20
 8005a64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005a68:	2400      	movs	r4, #0
 8005a6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005a6e:	4622      	mov	r2, r4
 8005a70:	462b      	mov	r3, r5
 8005a72:	f7fa fdd9 	bl	8000628 <__aeabi_dmul>
 8005a76:	bd70      	pop	{r4, r5, r6, pc}

08005a78 <_strtod_l>:
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	b0a3      	sub	sp, #140	; 0x8c
 8005a7e:	461f      	mov	r7, r3
 8005a80:	2300      	movs	r3, #0
 8005a82:	931e      	str	r3, [sp, #120]	; 0x78
 8005a84:	4ba4      	ldr	r3, [pc, #656]	; (8005d18 <_strtod_l+0x2a0>)
 8005a86:	9219      	str	r2, [sp, #100]	; 0x64
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	9307      	str	r3, [sp, #28]
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	4688      	mov	r8, r1
 8005a92:	f7fa fbaf 	bl	80001f4 <strlen>
 8005a96:	f04f 0a00 	mov.w	sl, #0
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	f04f 0b00 	mov.w	fp, #0
 8005aa0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005aa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005aa6:	781a      	ldrb	r2, [r3, #0]
 8005aa8:	2a2b      	cmp	r2, #43	; 0x2b
 8005aaa:	d04c      	beq.n	8005b46 <_strtod_l+0xce>
 8005aac:	d839      	bhi.n	8005b22 <_strtod_l+0xaa>
 8005aae:	2a0d      	cmp	r2, #13
 8005ab0:	d832      	bhi.n	8005b18 <_strtod_l+0xa0>
 8005ab2:	2a08      	cmp	r2, #8
 8005ab4:	d832      	bhi.n	8005b1c <_strtod_l+0xa4>
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	d03c      	beq.n	8005b34 <_strtod_l+0xbc>
 8005aba:	2300      	movs	r3, #0
 8005abc:	930e      	str	r3, [sp, #56]	; 0x38
 8005abe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005ac0:	7833      	ldrb	r3, [r6, #0]
 8005ac2:	2b30      	cmp	r3, #48	; 0x30
 8005ac4:	f040 80b4 	bne.w	8005c30 <_strtod_l+0x1b8>
 8005ac8:	7873      	ldrb	r3, [r6, #1]
 8005aca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005ace:	2b58      	cmp	r3, #88	; 0x58
 8005ad0:	d16c      	bne.n	8005bac <_strtod_l+0x134>
 8005ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	ab1e      	add	r3, sp, #120	; 0x78
 8005ad8:	9702      	str	r7, [sp, #8]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	4a8f      	ldr	r2, [pc, #572]	; (8005d1c <_strtod_l+0x2a4>)
 8005ade:	ab1f      	add	r3, sp, #124	; 0x7c
 8005ae0:	a91d      	add	r1, sp, #116	; 0x74
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f001 fd60 	bl	80075a8 <__gethex>
 8005ae8:	f010 0707 	ands.w	r7, r0, #7
 8005aec:	4605      	mov	r5, r0
 8005aee:	d005      	beq.n	8005afc <_strtod_l+0x84>
 8005af0:	2f06      	cmp	r7, #6
 8005af2:	d12a      	bne.n	8005b4a <_strtod_l+0xd2>
 8005af4:	3601      	adds	r6, #1
 8005af6:	2300      	movs	r3, #0
 8005af8:	961d      	str	r6, [sp, #116]	; 0x74
 8005afa:	930e      	str	r3, [sp, #56]	; 0x38
 8005afc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f040 8596 	bne.w	8006630 <_strtod_l+0xbb8>
 8005b04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b06:	b1db      	cbz	r3, 8005b40 <_strtod_l+0xc8>
 8005b08:	4652      	mov	r2, sl
 8005b0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005b0e:	ec43 2b10 	vmov	d0, r2, r3
 8005b12:	b023      	add	sp, #140	; 0x8c
 8005b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b18:	2a20      	cmp	r2, #32
 8005b1a:	d1ce      	bne.n	8005aba <_strtod_l+0x42>
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	931d      	str	r3, [sp, #116]	; 0x74
 8005b20:	e7c0      	b.n	8005aa4 <_strtod_l+0x2c>
 8005b22:	2a2d      	cmp	r2, #45	; 0x2d
 8005b24:	d1c9      	bne.n	8005aba <_strtod_l+0x42>
 8005b26:	2201      	movs	r2, #1
 8005b28:	920e      	str	r2, [sp, #56]	; 0x38
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	921d      	str	r2, [sp, #116]	; 0x74
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1c4      	bne.n	8005abe <_strtod_l+0x46>
 8005b34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b36:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f040 8576 	bne.w	800662c <_strtod_l+0xbb4>
 8005b40:	4652      	mov	r2, sl
 8005b42:	465b      	mov	r3, fp
 8005b44:	e7e3      	b.n	8005b0e <_strtod_l+0x96>
 8005b46:	2200      	movs	r2, #0
 8005b48:	e7ee      	b.n	8005b28 <_strtod_l+0xb0>
 8005b4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005b4c:	b13a      	cbz	r2, 8005b5e <_strtod_l+0xe6>
 8005b4e:	2135      	movs	r1, #53	; 0x35
 8005b50:	a820      	add	r0, sp, #128	; 0x80
 8005b52:	f002 fce6 	bl	8008522 <__copybits>
 8005b56:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f002 f8ab 	bl	8007cb4 <_Bfree>
 8005b5e:	3f01      	subs	r7, #1
 8005b60:	2f05      	cmp	r7, #5
 8005b62:	d807      	bhi.n	8005b74 <_strtod_l+0xfc>
 8005b64:	e8df f007 	tbb	[pc, r7]
 8005b68:	1d180b0e 	.word	0x1d180b0e
 8005b6c:	030e      	.short	0x030e
 8005b6e:	f04f 0b00 	mov.w	fp, #0
 8005b72:	46da      	mov	sl, fp
 8005b74:	0728      	lsls	r0, r5, #28
 8005b76:	d5c1      	bpl.n	8005afc <_strtod_l+0x84>
 8005b78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005b7c:	e7be      	b.n	8005afc <_strtod_l+0x84>
 8005b7e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005b82:	e7f7      	b.n	8005b74 <_strtod_l+0xfc>
 8005b84:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005b88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005b92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005b96:	e7ed      	b.n	8005b74 <_strtod_l+0xfc>
 8005b98:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005d20 <_strtod_l+0x2a8>
 8005b9c:	f04f 0a00 	mov.w	sl, #0
 8005ba0:	e7e8      	b.n	8005b74 <_strtod_l+0xfc>
 8005ba2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005ba6:	f04f 3aff 	mov.w	sl, #4294967295
 8005baa:	e7e3      	b.n	8005b74 <_strtod_l+0xfc>
 8005bac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	921d      	str	r2, [sp, #116]	; 0x74
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	2b30      	cmp	r3, #48	; 0x30
 8005bb6:	d0f9      	beq.n	8005bac <_strtod_l+0x134>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d09f      	beq.n	8005afc <_strtod_l+0x84>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f04f 0900 	mov.w	r9, #0
 8005bc2:	9304      	str	r3, [sp, #16]
 8005bc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8005bc8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005bcc:	464f      	mov	r7, r9
 8005bce:	220a      	movs	r2, #10
 8005bd0:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005bd2:	7806      	ldrb	r6, [r0, #0]
 8005bd4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005bd8:	b2d9      	uxtb	r1, r3
 8005bda:	2909      	cmp	r1, #9
 8005bdc:	d92a      	bls.n	8005c34 <_strtod_l+0x1bc>
 8005bde:	9907      	ldr	r1, [sp, #28]
 8005be0:	462a      	mov	r2, r5
 8005be2:	f003 fa71 	bl	80090c8 <strncmp>
 8005be6:	b398      	cbz	r0, 8005c50 <_strtod_l+0x1d8>
 8005be8:	2000      	movs	r0, #0
 8005bea:	4633      	mov	r3, r6
 8005bec:	463d      	mov	r5, r7
 8005bee:	9007      	str	r0, [sp, #28]
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	2b65      	cmp	r3, #101	; 0x65
 8005bf4:	d001      	beq.n	8005bfa <_strtod_l+0x182>
 8005bf6:	2b45      	cmp	r3, #69	; 0x45
 8005bf8:	d118      	bne.n	8005c2c <_strtod_l+0x1b4>
 8005bfa:	b91d      	cbnz	r5, 8005c04 <_strtod_l+0x18c>
 8005bfc:	9b04      	ldr	r3, [sp, #16]
 8005bfe:	4303      	orrs	r3, r0
 8005c00:	d098      	beq.n	8005b34 <_strtod_l+0xbc>
 8005c02:	2500      	movs	r5, #0
 8005c04:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005c08:	f108 0301 	add.w	r3, r8, #1
 8005c0c:	931d      	str	r3, [sp, #116]	; 0x74
 8005c0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005c12:	2b2b      	cmp	r3, #43	; 0x2b
 8005c14:	d075      	beq.n	8005d02 <_strtod_l+0x28a>
 8005c16:	2b2d      	cmp	r3, #45	; 0x2d
 8005c18:	d07b      	beq.n	8005d12 <_strtod_l+0x29a>
 8005c1a:	f04f 0c00 	mov.w	ip, #0
 8005c1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005c22:	2909      	cmp	r1, #9
 8005c24:	f240 8082 	bls.w	8005d2c <_strtod_l+0x2b4>
 8005c28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005c2c:	2600      	movs	r6, #0
 8005c2e:	e09d      	b.n	8005d6c <_strtod_l+0x2f4>
 8005c30:	2300      	movs	r3, #0
 8005c32:	e7c4      	b.n	8005bbe <_strtod_l+0x146>
 8005c34:	2f08      	cmp	r7, #8
 8005c36:	bfd8      	it	le
 8005c38:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005c3a:	f100 0001 	add.w	r0, r0, #1
 8005c3e:	bfda      	itte	le
 8005c40:	fb02 3301 	mlale	r3, r2, r1, r3
 8005c44:	9309      	strle	r3, [sp, #36]	; 0x24
 8005c46:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005c4a:	3701      	adds	r7, #1
 8005c4c:	901d      	str	r0, [sp, #116]	; 0x74
 8005c4e:	e7bf      	b.n	8005bd0 <_strtod_l+0x158>
 8005c50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c52:	195a      	adds	r2, r3, r5
 8005c54:	921d      	str	r2, [sp, #116]	; 0x74
 8005c56:	5d5b      	ldrb	r3, [r3, r5]
 8005c58:	2f00      	cmp	r7, #0
 8005c5a:	d037      	beq.n	8005ccc <_strtod_l+0x254>
 8005c5c:	9007      	str	r0, [sp, #28]
 8005c5e:	463d      	mov	r5, r7
 8005c60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005c64:	2a09      	cmp	r2, #9
 8005c66:	d912      	bls.n	8005c8e <_strtod_l+0x216>
 8005c68:	2201      	movs	r2, #1
 8005c6a:	e7c2      	b.n	8005bf2 <_strtod_l+0x17a>
 8005c6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	921d      	str	r2, [sp, #116]	; 0x74
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	3001      	adds	r0, #1
 8005c76:	2b30      	cmp	r3, #48	; 0x30
 8005c78:	d0f8      	beq.n	8005c6c <_strtod_l+0x1f4>
 8005c7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005c7e:	2a08      	cmp	r2, #8
 8005c80:	f200 84db 	bhi.w	800663a <_strtod_l+0xbc2>
 8005c84:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005c86:	9007      	str	r0, [sp, #28]
 8005c88:	2000      	movs	r0, #0
 8005c8a:	920a      	str	r2, [sp, #40]	; 0x28
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	3b30      	subs	r3, #48	; 0x30
 8005c90:	f100 0201 	add.w	r2, r0, #1
 8005c94:	d014      	beq.n	8005cc0 <_strtod_l+0x248>
 8005c96:	9907      	ldr	r1, [sp, #28]
 8005c98:	4411      	add	r1, r2
 8005c9a:	9107      	str	r1, [sp, #28]
 8005c9c:	462a      	mov	r2, r5
 8005c9e:	eb00 0e05 	add.w	lr, r0, r5
 8005ca2:	210a      	movs	r1, #10
 8005ca4:	4572      	cmp	r2, lr
 8005ca6:	d113      	bne.n	8005cd0 <_strtod_l+0x258>
 8005ca8:	182a      	adds	r2, r5, r0
 8005caa:	2a08      	cmp	r2, #8
 8005cac:	f105 0501 	add.w	r5, r5, #1
 8005cb0:	4405      	add	r5, r0
 8005cb2:	dc1c      	bgt.n	8005cee <_strtod_l+0x276>
 8005cb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005cb6:	220a      	movs	r2, #10
 8005cb8:	fb02 3301 	mla	r3, r2, r1, r3
 8005cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	911d      	str	r1, [sp, #116]	; 0x74
 8005cc6:	785b      	ldrb	r3, [r3, #1]
 8005cc8:	4610      	mov	r0, r2
 8005cca:	e7c9      	b.n	8005c60 <_strtod_l+0x1e8>
 8005ccc:	4638      	mov	r0, r7
 8005cce:	e7d2      	b.n	8005c76 <_strtod_l+0x1fe>
 8005cd0:	2a08      	cmp	r2, #8
 8005cd2:	dc04      	bgt.n	8005cde <_strtod_l+0x266>
 8005cd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005cd6:	434e      	muls	r6, r1
 8005cd8:	9609      	str	r6, [sp, #36]	; 0x24
 8005cda:	3201      	adds	r2, #1
 8005cdc:	e7e2      	b.n	8005ca4 <_strtod_l+0x22c>
 8005cde:	f102 0c01 	add.w	ip, r2, #1
 8005ce2:	f1bc 0f10 	cmp.w	ip, #16
 8005ce6:	bfd8      	it	le
 8005ce8:	fb01 f909 	mulle.w	r9, r1, r9
 8005cec:	e7f5      	b.n	8005cda <_strtod_l+0x262>
 8005cee:	2d10      	cmp	r5, #16
 8005cf0:	bfdc      	itt	le
 8005cf2:	220a      	movle	r2, #10
 8005cf4:	fb02 3909 	mlale	r9, r2, r9, r3
 8005cf8:	e7e1      	b.n	8005cbe <_strtod_l+0x246>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9307      	str	r3, [sp, #28]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	e77c      	b.n	8005bfc <_strtod_l+0x184>
 8005d02:	f04f 0c00 	mov.w	ip, #0
 8005d06:	f108 0302 	add.w	r3, r8, #2
 8005d0a:	931d      	str	r3, [sp, #116]	; 0x74
 8005d0c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005d10:	e785      	b.n	8005c1e <_strtod_l+0x1a6>
 8005d12:	f04f 0c01 	mov.w	ip, #1
 8005d16:	e7f6      	b.n	8005d06 <_strtod_l+0x28e>
 8005d18:	0800a218 	.word	0x0800a218
 8005d1c:	08009fc4 	.word	0x08009fc4
 8005d20:	7ff00000 	.word	0x7ff00000
 8005d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d26:	1c59      	adds	r1, r3, #1
 8005d28:	911d      	str	r1, [sp, #116]	; 0x74
 8005d2a:	785b      	ldrb	r3, [r3, #1]
 8005d2c:	2b30      	cmp	r3, #48	; 0x30
 8005d2e:	d0f9      	beq.n	8005d24 <_strtod_l+0x2ac>
 8005d30:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005d34:	2908      	cmp	r1, #8
 8005d36:	f63f af79 	bhi.w	8005c2c <_strtod_l+0x1b4>
 8005d3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005d3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d40:	9308      	str	r3, [sp, #32]
 8005d42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d44:	1c59      	adds	r1, r3, #1
 8005d46:	911d      	str	r1, [sp, #116]	; 0x74
 8005d48:	785b      	ldrb	r3, [r3, #1]
 8005d4a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8005d4e:	2e09      	cmp	r6, #9
 8005d50:	d937      	bls.n	8005dc2 <_strtod_l+0x34a>
 8005d52:	9e08      	ldr	r6, [sp, #32]
 8005d54:	1b89      	subs	r1, r1, r6
 8005d56:	2908      	cmp	r1, #8
 8005d58:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005d5c:	dc02      	bgt.n	8005d64 <_strtod_l+0x2ec>
 8005d5e:	4576      	cmp	r6, lr
 8005d60:	bfa8      	it	ge
 8005d62:	4676      	movge	r6, lr
 8005d64:	f1bc 0f00 	cmp.w	ip, #0
 8005d68:	d000      	beq.n	8005d6c <_strtod_l+0x2f4>
 8005d6a:	4276      	negs	r6, r6
 8005d6c:	2d00      	cmp	r5, #0
 8005d6e:	d14f      	bne.n	8005e10 <_strtod_l+0x398>
 8005d70:	9904      	ldr	r1, [sp, #16]
 8005d72:	4301      	orrs	r1, r0
 8005d74:	f47f aec2 	bne.w	8005afc <_strtod_l+0x84>
 8005d78:	2a00      	cmp	r2, #0
 8005d7a:	f47f aedb 	bne.w	8005b34 <_strtod_l+0xbc>
 8005d7e:	2b69      	cmp	r3, #105	; 0x69
 8005d80:	d027      	beq.n	8005dd2 <_strtod_l+0x35a>
 8005d82:	dc24      	bgt.n	8005dce <_strtod_l+0x356>
 8005d84:	2b49      	cmp	r3, #73	; 0x49
 8005d86:	d024      	beq.n	8005dd2 <_strtod_l+0x35a>
 8005d88:	2b4e      	cmp	r3, #78	; 0x4e
 8005d8a:	f47f aed3 	bne.w	8005b34 <_strtod_l+0xbc>
 8005d8e:	499e      	ldr	r1, [pc, #632]	; (8006008 <_strtod_l+0x590>)
 8005d90:	a81d      	add	r0, sp, #116	; 0x74
 8005d92:	f001 fe61 	bl	8007a58 <__match>
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f43f aecc 	beq.w	8005b34 <_strtod_l+0xbc>
 8005d9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b28      	cmp	r3, #40	; 0x28
 8005da2:	d12d      	bne.n	8005e00 <_strtod_l+0x388>
 8005da4:	4999      	ldr	r1, [pc, #612]	; (800600c <_strtod_l+0x594>)
 8005da6:	aa20      	add	r2, sp, #128	; 0x80
 8005da8:	a81d      	add	r0, sp, #116	; 0x74
 8005daa:	f001 fe69 	bl	8007a80 <__hexnan>
 8005dae:	2805      	cmp	r0, #5
 8005db0:	d126      	bne.n	8005e00 <_strtod_l+0x388>
 8005db2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005db4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8005db8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005dbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005dc0:	e69c      	b.n	8005afc <_strtod_l+0x84>
 8005dc2:	210a      	movs	r1, #10
 8005dc4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005dc8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005dcc:	e7b9      	b.n	8005d42 <_strtod_l+0x2ca>
 8005dce:	2b6e      	cmp	r3, #110	; 0x6e
 8005dd0:	e7db      	b.n	8005d8a <_strtod_l+0x312>
 8005dd2:	498f      	ldr	r1, [pc, #572]	; (8006010 <_strtod_l+0x598>)
 8005dd4:	a81d      	add	r0, sp, #116	; 0x74
 8005dd6:	f001 fe3f 	bl	8007a58 <__match>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	f43f aeaa 	beq.w	8005b34 <_strtod_l+0xbc>
 8005de0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005de2:	498c      	ldr	r1, [pc, #560]	; (8006014 <_strtod_l+0x59c>)
 8005de4:	3b01      	subs	r3, #1
 8005de6:	a81d      	add	r0, sp, #116	; 0x74
 8005de8:	931d      	str	r3, [sp, #116]	; 0x74
 8005dea:	f001 fe35 	bl	8007a58 <__match>
 8005dee:	b910      	cbnz	r0, 8005df6 <_strtod_l+0x37e>
 8005df0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005df2:	3301      	adds	r3, #1
 8005df4:	931d      	str	r3, [sp, #116]	; 0x74
 8005df6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8006024 <_strtod_l+0x5ac>
 8005dfa:	f04f 0a00 	mov.w	sl, #0
 8005dfe:	e67d      	b.n	8005afc <_strtod_l+0x84>
 8005e00:	4885      	ldr	r0, [pc, #532]	; (8006018 <_strtod_l+0x5a0>)
 8005e02:	f7fe fec5 	bl	8004b90 <nan>
 8005e06:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005e0a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005e0e:	e675      	b.n	8005afc <_strtod_l+0x84>
 8005e10:	9b07      	ldr	r3, [sp, #28]
 8005e12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e14:	1af3      	subs	r3, r6, r3
 8005e16:	2f00      	cmp	r7, #0
 8005e18:	bf08      	it	eq
 8005e1a:	462f      	moveq	r7, r5
 8005e1c:	2d10      	cmp	r5, #16
 8005e1e:	9308      	str	r3, [sp, #32]
 8005e20:	46a8      	mov	r8, r5
 8005e22:	bfa8      	it	ge
 8005e24:	f04f 0810 	movge.w	r8, #16
 8005e28:	f7fa fb84 	bl	8000534 <__aeabi_ui2d>
 8005e2c:	2d09      	cmp	r5, #9
 8005e2e:	4682      	mov	sl, r0
 8005e30:	468b      	mov	fp, r1
 8005e32:	dd13      	ble.n	8005e5c <_strtod_l+0x3e4>
 8005e34:	4b79      	ldr	r3, [pc, #484]	; (800601c <_strtod_l+0x5a4>)
 8005e36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005e3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005e3e:	f7fa fbf3 	bl	8000628 <__aeabi_dmul>
 8005e42:	4682      	mov	sl, r0
 8005e44:	4648      	mov	r0, r9
 8005e46:	468b      	mov	fp, r1
 8005e48:	f7fa fb74 	bl	8000534 <__aeabi_ui2d>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4650      	mov	r0, sl
 8005e52:	4659      	mov	r1, fp
 8005e54:	f7fa fa32 	bl	80002bc <__adddf3>
 8005e58:	4682      	mov	sl, r0
 8005e5a:	468b      	mov	fp, r1
 8005e5c:	2d0f      	cmp	r5, #15
 8005e5e:	dc38      	bgt.n	8005ed2 <_strtod_l+0x45a>
 8005e60:	9b08      	ldr	r3, [sp, #32]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f43f ae4a 	beq.w	8005afc <_strtod_l+0x84>
 8005e68:	dd24      	ble.n	8005eb4 <_strtod_l+0x43c>
 8005e6a:	2b16      	cmp	r3, #22
 8005e6c:	dc0b      	bgt.n	8005e86 <_strtod_l+0x40e>
 8005e6e:	4d6b      	ldr	r5, [pc, #428]	; (800601c <_strtod_l+0x5a4>)
 8005e70:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8005e74:	e9d5 0100 	ldrd	r0, r1, [r5]
 8005e78:	4652      	mov	r2, sl
 8005e7a:	465b      	mov	r3, fp
 8005e7c:	f7fa fbd4 	bl	8000628 <__aeabi_dmul>
 8005e80:	4682      	mov	sl, r0
 8005e82:	468b      	mov	fp, r1
 8005e84:	e63a      	b.n	8005afc <_strtod_l+0x84>
 8005e86:	9a08      	ldr	r2, [sp, #32]
 8005e88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	db20      	blt.n	8005ed2 <_strtod_l+0x45a>
 8005e90:	4c62      	ldr	r4, [pc, #392]	; (800601c <_strtod_l+0x5a4>)
 8005e92:	f1c5 050f 	rsb	r5, r5, #15
 8005e96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005e9a:	4652      	mov	r2, sl
 8005e9c:	465b      	mov	r3, fp
 8005e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ea2:	f7fa fbc1 	bl	8000628 <__aeabi_dmul>
 8005ea6:	9b08      	ldr	r3, [sp, #32]
 8005ea8:	1b5d      	subs	r5, r3, r5
 8005eaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005eae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005eb2:	e7e3      	b.n	8005e7c <_strtod_l+0x404>
 8005eb4:	9b08      	ldr	r3, [sp, #32]
 8005eb6:	3316      	adds	r3, #22
 8005eb8:	db0b      	blt.n	8005ed2 <_strtod_l+0x45a>
 8005eba:	9b07      	ldr	r3, [sp, #28]
 8005ebc:	4a57      	ldr	r2, [pc, #348]	; (800601c <_strtod_l+0x5a4>)
 8005ebe:	1b9e      	subs	r6, r3, r6
 8005ec0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005ec4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ec8:	4650      	mov	r0, sl
 8005eca:	4659      	mov	r1, fp
 8005ecc:	f7fa fcd6 	bl	800087c <__aeabi_ddiv>
 8005ed0:	e7d6      	b.n	8005e80 <_strtod_l+0x408>
 8005ed2:	9b08      	ldr	r3, [sp, #32]
 8005ed4:	eba5 0808 	sub.w	r8, r5, r8
 8005ed8:	4498      	add	r8, r3
 8005eda:	f1b8 0f00 	cmp.w	r8, #0
 8005ede:	dd71      	ble.n	8005fc4 <_strtod_l+0x54c>
 8005ee0:	f018 030f 	ands.w	r3, r8, #15
 8005ee4:	d00a      	beq.n	8005efc <_strtod_l+0x484>
 8005ee6:	494d      	ldr	r1, [pc, #308]	; (800601c <_strtod_l+0x5a4>)
 8005ee8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005eec:	4652      	mov	r2, sl
 8005eee:	465b      	mov	r3, fp
 8005ef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ef4:	f7fa fb98 	bl	8000628 <__aeabi_dmul>
 8005ef8:	4682      	mov	sl, r0
 8005efa:	468b      	mov	fp, r1
 8005efc:	f038 080f 	bics.w	r8, r8, #15
 8005f00:	d04d      	beq.n	8005f9e <_strtod_l+0x526>
 8005f02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005f06:	dd22      	ble.n	8005f4e <_strtod_l+0x4d6>
 8005f08:	2500      	movs	r5, #0
 8005f0a:	462e      	mov	r6, r5
 8005f0c:	9509      	str	r5, [sp, #36]	; 0x24
 8005f0e:	9507      	str	r5, [sp, #28]
 8005f10:	2322      	movs	r3, #34	; 0x22
 8005f12:	f8df b110 	ldr.w	fp, [pc, #272]	; 8006024 <_strtod_l+0x5ac>
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	f04f 0a00 	mov.w	sl, #0
 8005f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f43f adec 	beq.w	8005afc <_strtod_l+0x84>
 8005f24:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005f26:	4620      	mov	r0, r4
 8005f28:	f001 fec4 	bl	8007cb4 <_Bfree>
 8005f2c:	9907      	ldr	r1, [sp, #28]
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f001 fec0 	bl	8007cb4 <_Bfree>
 8005f34:	4631      	mov	r1, r6
 8005f36:	4620      	mov	r0, r4
 8005f38:	f001 febc 	bl	8007cb4 <_Bfree>
 8005f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f001 feb8 	bl	8007cb4 <_Bfree>
 8005f44:	4629      	mov	r1, r5
 8005f46:	4620      	mov	r0, r4
 8005f48:	f001 feb4 	bl	8007cb4 <_Bfree>
 8005f4c:	e5d6      	b.n	8005afc <_strtod_l+0x84>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005f54:	4650      	mov	r0, sl
 8005f56:	4659      	mov	r1, fp
 8005f58:	4699      	mov	r9, r3
 8005f5a:	f1b8 0f01 	cmp.w	r8, #1
 8005f5e:	dc21      	bgt.n	8005fa4 <_strtod_l+0x52c>
 8005f60:	b10b      	cbz	r3, 8005f66 <_strtod_l+0x4ee>
 8005f62:	4682      	mov	sl, r0
 8005f64:	468b      	mov	fp, r1
 8005f66:	4b2e      	ldr	r3, [pc, #184]	; (8006020 <_strtod_l+0x5a8>)
 8005f68:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005f6c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005f70:	4652      	mov	r2, sl
 8005f72:	465b      	mov	r3, fp
 8005f74:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005f78:	f7fa fb56 	bl	8000628 <__aeabi_dmul>
 8005f7c:	4b29      	ldr	r3, [pc, #164]	; (8006024 <_strtod_l+0x5ac>)
 8005f7e:	460a      	mov	r2, r1
 8005f80:	400b      	ands	r3, r1
 8005f82:	4929      	ldr	r1, [pc, #164]	; (8006028 <_strtod_l+0x5b0>)
 8005f84:	428b      	cmp	r3, r1
 8005f86:	4682      	mov	sl, r0
 8005f88:	d8be      	bhi.n	8005f08 <_strtod_l+0x490>
 8005f8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005f8e:	428b      	cmp	r3, r1
 8005f90:	bf86      	itte	hi
 8005f92:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800602c <_strtod_l+0x5b4>
 8005f96:	f04f 3aff 	movhi.w	sl, #4294967295
 8005f9a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	9304      	str	r3, [sp, #16]
 8005fa2:	e081      	b.n	80060a8 <_strtod_l+0x630>
 8005fa4:	f018 0f01 	tst.w	r8, #1
 8005fa8:	d007      	beq.n	8005fba <_strtod_l+0x542>
 8005faa:	4b1d      	ldr	r3, [pc, #116]	; (8006020 <_strtod_l+0x5a8>)
 8005fac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa fb38 	bl	8000628 <__aeabi_dmul>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f109 0901 	add.w	r9, r9, #1
 8005fbe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005fc2:	e7ca      	b.n	8005f5a <_strtod_l+0x4e2>
 8005fc4:	d0eb      	beq.n	8005f9e <_strtod_l+0x526>
 8005fc6:	f1c8 0800 	rsb	r8, r8, #0
 8005fca:	f018 020f 	ands.w	r2, r8, #15
 8005fce:	d00a      	beq.n	8005fe6 <_strtod_l+0x56e>
 8005fd0:	4b12      	ldr	r3, [pc, #72]	; (800601c <_strtod_l+0x5a4>)
 8005fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fd6:	4650      	mov	r0, sl
 8005fd8:	4659      	mov	r1, fp
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	f7fa fc4d 	bl	800087c <__aeabi_ddiv>
 8005fe2:	4682      	mov	sl, r0
 8005fe4:	468b      	mov	fp, r1
 8005fe6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005fea:	d0d8      	beq.n	8005f9e <_strtod_l+0x526>
 8005fec:	f1b8 0f1f 	cmp.w	r8, #31
 8005ff0:	dd1e      	ble.n	8006030 <_strtod_l+0x5b8>
 8005ff2:	2500      	movs	r5, #0
 8005ff4:	462e      	mov	r6, r5
 8005ff6:	9509      	str	r5, [sp, #36]	; 0x24
 8005ff8:	9507      	str	r5, [sp, #28]
 8005ffa:	2322      	movs	r3, #34	; 0x22
 8005ffc:	f04f 0a00 	mov.w	sl, #0
 8006000:	f04f 0b00 	mov.w	fp, #0
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	e789      	b.n	8005f1c <_strtod_l+0x4a4>
 8006008:	08009f99 	.word	0x08009f99
 800600c:	08009fd8 	.word	0x08009fd8
 8006010:	08009f91 	.word	0x08009f91
 8006014:	0800a11c 	.word	0x0800a11c
 8006018:	0800a3f3 	.word	0x0800a3f3
 800601c:	0800a2b8 	.word	0x0800a2b8
 8006020:	0800a290 	.word	0x0800a290
 8006024:	7ff00000 	.word	0x7ff00000
 8006028:	7ca00000 	.word	0x7ca00000
 800602c:	7fefffff 	.word	0x7fefffff
 8006030:	f018 0310 	ands.w	r3, r8, #16
 8006034:	bf18      	it	ne
 8006036:	236a      	movne	r3, #106	; 0x6a
 8006038:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80063f0 <_strtod_l+0x978>
 800603c:	9304      	str	r3, [sp, #16]
 800603e:	4650      	mov	r0, sl
 8006040:	4659      	mov	r1, fp
 8006042:	2300      	movs	r3, #0
 8006044:	f018 0f01 	tst.w	r8, #1
 8006048:	d004      	beq.n	8006054 <_strtod_l+0x5dc>
 800604a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800604e:	f7fa faeb 	bl	8000628 <__aeabi_dmul>
 8006052:	2301      	movs	r3, #1
 8006054:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006058:	f109 0908 	add.w	r9, r9, #8
 800605c:	d1f2      	bne.n	8006044 <_strtod_l+0x5cc>
 800605e:	b10b      	cbz	r3, 8006064 <_strtod_l+0x5ec>
 8006060:	4682      	mov	sl, r0
 8006062:	468b      	mov	fp, r1
 8006064:	9b04      	ldr	r3, [sp, #16]
 8006066:	b1bb      	cbz	r3, 8006098 <_strtod_l+0x620>
 8006068:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800606c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006070:	2b00      	cmp	r3, #0
 8006072:	4659      	mov	r1, fp
 8006074:	dd10      	ble.n	8006098 <_strtod_l+0x620>
 8006076:	2b1f      	cmp	r3, #31
 8006078:	f340 8128 	ble.w	80062cc <_strtod_l+0x854>
 800607c:	2b34      	cmp	r3, #52	; 0x34
 800607e:	bfde      	ittt	le
 8006080:	3b20      	suble	r3, #32
 8006082:	f04f 32ff 	movle.w	r2, #4294967295
 8006086:	fa02 f303 	lslle.w	r3, r2, r3
 800608a:	f04f 0a00 	mov.w	sl, #0
 800608e:	bfcc      	ite	gt
 8006090:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006094:	ea03 0b01 	andle.w	fp, r3, r1
 8006098:	2200      	movs	r2, #0
 800609a:	2300      	movs	r3, #0
 800609c:	4650      	mov	r0, sl
 800609e:	4659      	mov	r1, fp
 80060a0:	f7fa fd2a 	bl	8000af8 <__aeabi_dcmpeq>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d1a4      	bne.n	8005ff2 <_strtod_l+0x57a>
 80060a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060ae:	462b      	mov	r3, r5
 80060b0:	463a      	mov	r2, r7
 80060b2:	4620      	mov	r0, r4
 80060b4:	f001 fe6a 	bl	8007d8c <__s2b>
 80060b8:	9009      	str	r0, [sp, #36]	; 0x24
 80060ba:	2800      	cmp	r0, #0
 80060bc:	f43f af24 	beq.w	8005f08 <_strtod_l+0x490>
 80060c0:	9b07      	ldr	r3, [sp, #28]
 80060c2:	1b9e      	subs	r6, r3, r6
 80060c4:	9b08      	ldr	r3, [sp, #32]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bfb4      	ite	lt
 80060ca:	4633      	movlt	r3, r6
 80060cc:	2300      	movge	r3, #0
 80060ce:	9310      	str	r3, [sp, #64]	; 0x40
 80060d0:	9b08      	ldr	r3, [sp, #32]
 80060d2:	2500      	movs	r5, #0
 80060d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80060d8:	9318      	str	r3, [sp, #96]	; 0x60
 80060da:	462e      	mov	r6, r5
 80060dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060de:	4620      	mov	r0, r4
 80060e0:	6859      	ldr	r1, [r3, #4]
 80060e2:	f001 fda7 	bl	8007c34 <_Balloc>
 80060e6:	9007      	str	r0, [sp, #28]
 80060e8:	2800      	cmp	r0, #0
 80060ea:	f43f af11 	beq.w	8005f10 <_strtod_l+0x498>
 80060ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	3202      	adds	r2, #2
 80060f4:	f103 010c 	add.w	r1, r3, #12
 80060f8:	0092      	lsls	r2, r2, #2
 80060fa:	300c      	adds	r0, #12
 80060fc:	f001 fd8c 	bl	8007c18 <memcpy>
 8006100:	ec4b ab10 	vmov	d0, sl, fp
 8006104:	aa20      	add	r2, sp, #128	; 0x80
 8006106:	a91f      	add	r1, sp, #124	; 0x7c
 8006108:	4620      	mov	r0, r4
 800610a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800610e:	f002 f979 	bl	8008404 <__d2b>
 8006112:	901e      	str	r0, [sp, #120]	; 0x78
 8006114:	2800      	cmp	r0, #0
 8006116:	f43f aefb 	beq.w	8005f10 <_strtod_l+0x498>
 800611a:	2101      	movs	r1, #1
 800611c:	4620      	mov	r0, r4
 800611e:	f001 fecf 	bl	8007ec0 <__i2b>
 8006122:	4606      	mov	r6, r0
 8006124:	2800      	cmp	r0, #0
 8006126:	f43f aef3 	beq.w	8005f10 <_strtod_l+0x498>
 800612a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800612c:	9904      	ldr	r1, [sp, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	bfab      	itete	ge
 8006132:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8006134:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8006136:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006138:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800613c:	bfac      	ite	ge
 800613e:	eb03 0902 	addge.w	r9, r3, r2
 8006142:	1ad7      	sublt	r7, r2, r3
 8006144:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006146:	eba3 0801 	sub.w	r8, r3, r1
 800614a:	4490      	add	r8, r2
 800614c:	4ba3      	ldr	r3, [pc, #652]	; (80063dc <_strtod_l+0x964>)
 800614e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006152:	4598      	cmp	r8, r3
 8006154:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006158:	f280 80cc 	bge.w	80062f4 <_strtod_l+0x87c>
 800615c:	eba3 0308 	sub.w	r3, r3, r8
 8006160:	2b1f      	cmp	r3, #31
 8006162:	eba2 0203 	sub.w	r2, r2, r3
 8006166:	f04f 0101 	mov.w	r1, #1
 800616a:	f300 80b6 	bgt.w	80062da <_strtod_l+0x862>
 800616e:	fa01 f303 	lsl.w	r3, r1, r3
 8006172:	9311      	str	r3, [sp, #68]	; 0x44
 8006174:	2300      	movs	r3, #0
 8006176:	930c      	str	r3, [sp, #48]	; 0x30
 8006178:	eb09 0802 	add.w	r8, r9, r2
 800617c:	9b04      	ldr	r3, [sp, #16]
 800617e:	45c1      	cmp	r9, r8
 8006180:	4417      	add	r7, r2
 8006182:	441f      	add	r7, r3
 8006184:	464b      	mov	r3, r9
 8006186:	bfa8      	it	ge
 8006188:	4643      	movge	r3, r8
 800618a:	42bb      	cmp	r3, r7
 800618c:	bfa8      	it	ge
 800618e:	463b      	movge	r3, r7
 8006190:	2b00      	cmp	r3, #0
 8006192:	bfc2      	ittt	gt
 8006194:	eba8 0803 	subgt.w	r8, r8, r3
 8006198:	1aff      	subgt	r7, r7, r3
 800619a:	eba9 0903 	subgt.w	r9, r9, r3
 800619e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	dd17      	ble.n	80061d4 <_strtod_l+0x75c>
 80061a4:	4631      	mov	r1, r6
 80061a6:	461a      	mov	r2, r3
 80061a8:	4620      	mov	r0, r4
 80061aa:	f001 ff45 	bl	8008038 <__pow5mult>
 80061ae:	4606      	mov	r6, r0
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f43f aead 	beq.w	8005f10 <_strtod_l+0x498>
 80061b6:	4601      	mov	r1, r0
 80061b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80061ba:	4620      	mov	r0, r4
 80061bc:	f001 fe96 	bl	8007eec <__multiply>
 80061c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80061c2:	2800      	cmp	r0, #0
 80061c4:	f43f aea4 	beq.w	8005f10 <_strtod_l+0x498>
 80061c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80061ca:	4620      	mov	r0, r4
 80061cc:	f001 fd72 	bl	8007cb4 <_Bfree>
 80061d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061d2:	931e      	str	r3, [sp, #120]	; 0x78
 80061d4:	f1b8 0f00 	cmp.w	r8, #0
 80061d8:	f300 8091 	bgt.w	80062fe <_strtod_l+0x886>
 80061dc:	9b08      	ldr	r3, [sp, #32]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	dd08      	ble.n	80061f4 <_strtod_l+0x77c>
 80061e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80061e4:	9907      	ldr	r1, [sp, #28]
 80061e6:	4620      	mov	r0, r4
 80061e8:	f001 ff26 	bl	8008038 <__pow5mult>
 80061ec:	9007      	str	r0, [sp, #28]
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f43f ae8e 	beq.w	8005f10 <_strtod_l+0x498>
 80061f4:	2f00      	cmp	r7, #0
 80061f6:	dd08      	ble.n	800620a <_strtod_l+0x792>
 80061f8:	9907      	ldr	r1, [sp, #28]
 80061fa:	463a      	mov	r2, r7
 80061fc:	4620      	mov	r0, r4
 80061fe:	f001 ff75 	bl	80080ec <__lshift>
 8006202:	9007      	str	r0, [sp, #28]
 8006204:	2800      	cmp	r0, #0
 8006206:	f43f ae83 	beq.w	8005f10 <_strtod_l+0x498>
 800620a:	f1b9 0f00 	cmp.w	r9, #0
 800620e:	dd08      	ble.n	8006222 <_strtod_l+0x7aa>
 8006210:	4631      	mov	r1, r6
 8006212:	464a      	mov	r2, r9
 8006214:	4620      	mov	r0, r4
 8006216:	f001 ff69 	bl	80080ec <__lshift>
 800621a:	4606      	mov	r6, r0
 800621c:	2800      	cmp	r0, #0
 800621e:	f43f ae77 	beq.w	8005f10 <_strtod_l+0x498>
 8006222:	9a07      	ldr	r2, [sp, #28]
 8006224:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006226:	4620      	mov	r0, r4
 8006228:	f001 ffe8 	bl	80081fc <__mdiff>
 800622c:	4605      	mov	r5, r0
 800622e:	2800      	cmp	r0, #0
 8006230:	f43f ae6e 	beq.w	8005f10 <_strtod_l+0x498>
 8006234:	68c3      	ldr	r3, [r0, #12]
 8006236:	930f      	str	r3, [sp, #60]	; 0x3c
 8006238:	2300      	movs	r3, #0
 800623a:	60c3      	str	r3, [r0, #12]
 800623c:	4631      	mov	r1, r6
 800623e:	f001 ffc1 	bl	80081c4 <__mcmp>
 8006242:	2800      	cmp	r0, #0
 8006244:	da65      	bge.n	8006312 <_strtod_l+0x89a>
 8006246:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006248:	ea53 030a 	orrs.w	r3, r3, sl
 800624c:	f040 8087 	bne.w	800635e <_strtod_l+0x8e6>
 8006250:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 8082 	bne.w	800635e <_strtod_l+0x8e6>
 800625a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800625e:	0d1b      	lsrs	r3, r3, #20
 8006260:	051b      	lsls	r3, r3, #20
 8006262:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006266:	d97a      	bls.n	800635e <_strtod_l+0x8e6>
 8006268:	696b      	ldr	r3, [r5, #20]
 800626a:	b913      	cbnz	r3, 8006272 <_strtod_l+0x7fa>
 800626c:	692b      	ldr	r3, [r5, #16]
 800626e:	2b01      	cmp	r3, #1
 8006270:	dd75      	ble.n	800635e <_strtod_l+0x8e6>
 8006272:	4629      	mov	r1, r5
 8006274:	2201      	movs	r2, #1
 8006276:	4620      	mov	r0, r4
 8006278:	f001 ff38 	bl	80080ec <__lshift>
 800627c:	4631      	mov	r1, r6
 800627e:	4605      	mov	r5, r0
 8006280:	f001 ffa0 	bl	80081c4 <__mcmp>
 8006284:	2800      	cmp	r0, #0
 8006286:	dd6a      	ble.n	800635e <_strtod_l+0x8e6>
 8006288:	9904      	ldr	r1, [sp, #16]
 800628a:	4a55      	ldr	r2, [pc, #340]	; (80063e0 <_strtod_l+0x968>)
 800628c:	465b      	mov	r3, fp
 800628e:	2900      	cmp	r1, #0
 8006290:	f000 8085 	beq.w	800639e <_strtod_l+0x926>
 8006294:	ea02 010b 	and.w	r1, r2, fp
 8006298:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800629c:	dc7f      	bgt.n	800639e <_strtod_l+0x926>
 800629e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80062a2:	f77f aeaa 	ble.w	8005ffa <_strtod_l+0x582>
 80062a6:	4a4f      	ldr	r2, [pc, #316]	; (80063e4 <_strtod_l+0x96c>)
 80062a8:	2300      	movs	r3, #0
 80062aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80062ae:	4650      	mov	r0, sl
 80062b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80062b4:	4659      	mov	r1, fp
 80062b6:	f7fa f9b7 	bl	8000628 <__aeabi_dmul>
 80062ba:	460b      	mov	r3, r1
 80062bc:	4303      	orrs	r3, r0
 80062be:	bf08      	it	eq
 80062c0:	2322      	moveq	r3, #34	; 0x22
 80062c2:	4682      	mov	sl, r0
 80062c4:	468b      	mov	fp, r1
 80062c6:	bf08      	it	eq
 80062c8:	6023      	streq	r3, [r4, #0]
 80062ca:	e62b      	b.n	8005f24 <_strtod_l+0x4ac>
 80062cc:	f04f 32ff 	mov.w	r2, #4294967295
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	ea03 0a0a 	and.w	sl, r3, sl
 80062d8:	e6de      	b.n	8006098 <_strtod_l+0x620>
 80062da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80062de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80062e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80062e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80062ea:	fa01 f308 	lsl.w	r3, r1, r8
 80062ee:	930c      	str	r3, [sp, #48]	; 0x30
 80062f0:	9111      	str	r1, [sp, #68]	; 0x44
 80062f2:	e741      	b.n	8006178 <_strtod_l+0x700>
 80062f4:	2300      	movs	r3, #0
 80062f6:	930c      	str	r3, [sp, #48]	; 0x30
 80062f8:	2301      	movs	r3, #1
 80062fa:	9311      	str	r3, [sp, #68]	; 0x44
 80062fc:	e73c      	b.n	8006178 <_strtod_l+0x700>
 80062fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006300:	4642      	mov	r2, r8
 8006302:	4620      	mov	r0, r4
 8006304:	f001 fef2 	bl	80080ec <__lshift>
 8006308:	901e      	str	r0, [sp, #120]	; 0x78
 800630a:	2800      	cmp	r0, #0
 800630c:	f47f af66 	bne.w	80061dc <_strtod_l+0x764>
 8006310:	e5fe      	b.n	8005f10 <_strtod_l+0x498>
 8006312:	465f      	mov	r7, fp
 8006314:	d16e      	bne.n	80063f4 <_strtod_l+0x97c>
 8006316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006318:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800631c:	b342      	cbz	r2, 8006370 <_strtod_l+0x8f8>
 800631e:	4a32      	ldr	r2, [pc, #200]	; (80063e8 <_strtod_l+0x970>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d128      	bne.n	8006376 <_strtod_l+0x8fe>
 8006324:	9b04      	ldr	r3, [sp, #16]
 8006326:	4650      	mov	r0, sl
 8006328:	b1eb      	cbz	r3, 8006366 <_strtod_l+0x8ee>
 800632a:	4a2d      	ldr	r2, [pc, #180]	; (80063e0 <_strtod_l+0x968>)
 800632c:	403a      	ands	r2, r7
 800632e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006332:	f04f 31ff 	mov.w	r1, #4294967295
 8006336:	d819      	bhi.n	800636c <_strtod_l+0x8f4>
 8006338:	0d12      	lsrs	r2, r2, #20
 800633a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800633e:	fa01 f303 	lsl.w	r3, r1, r3
 8006342:	4298      	cmp	r0, r3
 8006344:	d117      	bne.n	8006376 <_strtod_l+0x8fe>
 8006346:	4b29      	ldr	r3, [pc, #164]	; (80063ec <_strtod_l+0x974>)
 8006348:	429f      	cmp	r7, r3
 800634a:	d102      	bne.n	8006352 <_strtod_l+0x8da>
 800634c:	3001      	adds	r0, #1
 800634e:	f43f addf 	beq.w	8005f10 <_strtod_l+0x498>
 8006352:	4b23      	ldr	r3, [pc, #140]	; (80063e0 <_strtod_l+0x968>)
 8006354:	403b      	ands	r3, r7
 8006356:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800635a:	f04f 0a00 	mov.w	sl, #0
 800635e:	9b04      	ldr	r3, [sp, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1a0      	bne.n	80062a6 <_strtod_l+0x82e>
 8006364:	e5de      	b.n	8005f24 <_strtod_l+0x4ac>
 8006366:	f04f 33ff 	mov.w	r3, #4294967295
 800636a:	e7ea      	b.n	8006342 <_strtod_l+0x8ca>
 800636c:	460b      	mov	r3, r1
 800636e:	e7e8      	b.n	8006342 <_strtod_l+0x8ca>
 8006370:	ea53 030a 	orrs.w	r3, r3, sl
 8006374:	d088      	beq.n	8006288 <_strtod_l+0x810>
 8006376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006378:	b1db      	cbz	r3, 80063b2 <_strtod_l+0x93a>
 800637a:	423b      	tst	r3, r7
 800637c:	d0ef      	beq.n	800635e <_strtod_l+0x8e6>
 800637e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006380:	9a04      	ldr	r2, [sp, #16]
 8006382:	4650      	mov	r0, sl
 8006384:	4659      	mov	r1, fp
 8006386:	b1c3      	cbz	r3, 80063ba <_strtod_l+0x942>
 8006388:	f7ff fb5a 	bl	8005a40 <sulp>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006394:	f7f9 ff92 	bl	80002bc <__adddf3>
 8006398:	4682      	mov	sl, r0
 800639a:	468b      	mov	fp, r1
 800639c:	e7df      	b.n	800635e <_strtod_l+0x8e6>
 800639e:	4013      	ands	r3, r2
 80063a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80063a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80063a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80063ac:	f04f 3aff 	mov.w	sl, #4294967295
 80063b0:	e7d5      	b.n	800635e <_strtod_l+0x8e6>
 80063b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063b4:	ea13 0f0a 	tst.w	r3, sl
 80063b8:	e7e0      	b.n	800637c <_strtod_l+0x904>
 80063ba:	f7ff fb41 	bl	8005a40 <sulp>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063c6:	f7f9 ff77 	bl	80002b8 <__aeabi_dsub>
 80063ca:	2200      	movs	r2, #0
 80063cc:	2300      	movs	r3, #0
 80063ce:	4682      	mov	sl, r0
 80063d0:	468b      	mov	fp, r1
 80063d2:	f7fa fb91 	bl	8000af8 <__aeabi_dcmpeq>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d0c1      	beq.n	800635e <_strtod_l+0x8e6>
 80063da:	e60e      	b.n	8005ffa <_strtod_l+0x582>
 80063dc:	fffffc02 	.word	0xfffffc02
 80063e0:	7ff00000 	.word	0x7ff00000
 80063e4:	39500000 	.word	0x39500000
 80063e8:	000fffff 	.word	0x000fffff
 80063ec:	7fefffff 	.word	0x7fefffff
 80063f0:	08009ff0 	.word	0x08009ff0
 80063f4:	4631      	mov	r1, r6
 80063f6:	4628      	mov	r0, r5
 80063f8:	f002 f860 	bl	80084bc <__ratio>
 80063fc:	ec59 8b10 	vmov	r8, r9, d0
 8006400:	ee10 0a10 	vmov	r0, s0
 8006404:	2200      	movs	r2, #0
 8006406:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800640a:	4649      	mov	r1, r9
 800640c:	f7fa fb88 	bl	8000b20 <__aeabi_dcmple>
 8006410:	2800      	cmp	r0, #0
 8006412:	d07c      	beq.n	800650e <_strtod_l+0xa96>
 8006414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006416:	2b00      	cmp	r3, #0
 8006418:	d04c      	beq.n	80064b4 <_strtod_l+0xa3c>
 800641a:	4b95      	ldr	r3, [pc, #596]	; (8006670 <_strtod_l+0xbf8>)
 800641c:	2200      	movs	r2, #0
 800641e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006422:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006670 <_strtod_l+0xbf8>
 8006426:	f04f 0800 	mov.w	r8, #0
 800642a:	4b92      	ldr	r3, [pc, #584]	; (8006674 <_strtod_l+0xbfc>)
 800642c:	403b      	ands	r3, r7
 800642e:	9311      	str	r3, [sp, #68]	; 0x44
 8006430:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006432:	4b91      	ldr	r3, [pc, #580]	; (8006678 <_strtod_l+0xc00>)
 8006434:	429a      	cmp	r2, r3
 8006436:	f040 80b2 	bne.w	800659e <_strtod_l+0xb26>
 800643a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800643e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006442:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006446:	ec4b ab10 	vmov	d0, sl, fp
 800644a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800644e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006452:	f001 ff5b 	bl	800830c <__ulp>
 8006456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800645a:	ec53 2b10 	vmov	r2, r3, d0
 800645e:	f7fa f8e3 	bl	8000628 <__aeabi_dmul>
 8006462:	4652      	mov	r2, sl
 8006464:	465b      	mov	r3, fp
 8006466:	f7f9 ff29 	bl	80002bc <__adddf3>
 800646a:	460b      	mov	r3, r1
 800646c:	4981      	ldr	r1, [pc, #516]	; (8006674 <_strtod_l+0xbfc>)
 800646e:	4a83      	ldr	r2, [pc, #524]	; (800667c <_strtod_l+0xc04>)
 8006470:	4019      	ands	r1, r3
 8006472:	4291      	cmp	r1, r2
 8006474:	4682      	mov	sl, r0
 8006476:	d95e      	bls.n	8006536 <_strtod_l+0xabe>
 8006478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800647a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800647e:	4293      	cmp	r3, r2
 8006480:	d103      	bne.n	800648a <_strtod_l+0xa12>
 8006482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006484:	3301      	adds	r3, #1
 8006486:	f43f ad43 	beq.w	8005f10 <_strtod_l+0x498>
 800648a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006688 <_strtod_l+0xc10>
 800648e:	f04f 3aff 	mov.w	sl, #4294967295
 8006492:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006494:	4620      	mov	r0, r4
 8006496:	f001 fc0d 	bl	8007cb4 <_Bfree>
 800649a:	9907      	ldr	r1, [sp, #28]
 800649c:	4620      	mov	r0, r4
 800649e:	f001 fc09 	bl	8007cb4 <_Bfree>
 80064a2:	4631      	mov	r1, r6
 80064a4:	4620      	mov	r0, r4
 80064a6:	f001 fc05 	bl	8007cb4 <_Bfree>
 80064aa:	4629      	mov	r1, r5
 80064ac:	4620      	mov	r0, r4
 80064ae:	f001 fc01 	bl	8007cb4 <_Bfree>
 80064b2:	e613      	b.n	80060dc <_strtod_l+0x664>
 80064b4:	f1ba 0f00 	cmp.w	sl, #0
 80064b8:	d11b      	bne.n	80064f2 <_strtod_l+0xa7a>
 80064ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064be:	b9f3      	cbnz	r3, 80064fe <_strtod_l+0xa86>
 80064c0:	4b6b      	ldr	r3, [pc, #428]	; (8006670 <_strtod_l+0xbf8>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	4640      	mov	r0, r8
 80064c6:	4649      	mov	r1, r9
 80064c8:	f7fa fb20 	bl	8000b0c <__aeabi_dcmplt>
 80064cc:	b9d0      	cbnz	r0, 8006504 <_strtod_l+0xa8c>
 80064ce:	4640      	mov	r0, r8
 80064d0:	4649      	mov	r1, r9
 80064d2:	4b6b      	ldr	r3, [pc, #428]	; (8006680 <_strtod_l+0xc08>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	f7fa f8a7 	bl	8000628 <__aeabi_dmul>
 80064da:	4680      	mov	r8, r0
 80064dc:	4689      	mov	r9, r1
 80064de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80064e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80064e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80064e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80064ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80064f0:	e79b      	b.n	800642a <_strtod_l+0x9b2>
 80064f2:	f1ba 0f01 	cmp.w	sl, #1
 80064f6:	d102      	bne.n	80064fe <_strtod_l+0xa86>
 80064f8:	2f00      	cmp	r7, #0
 80064fa:	f43f ad7e 	beq.w	8005ffa <_strtod_l+0x582>
 80064fe:	4b61      	ldr	r3, [pc, #388]	; (8006684 <_strtod_l+0xc0c>)
 8006500:	2200      	movs	r2, #0
 8006502:	e78c      	b.n	800641e <_strtod_l+0x9a6>
 8006504:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006680 <_strtod_l+0xc08>
 8006508:	f04f 0800 	mov.w	r8, #0
 800650c:	e7e7      	b.n	80064de <_strtod_l+0xa66>
 800650e:	4b5c      	ldr	r3, [pc, #368]	; (8006680 <_strtod_l+0xc08>)
 8006510:	4640      	mov	r0, r8
 8006512:	4649      	mov	r1, r9
 8006514:	2200      	movs	r2, #0
 8006516:	f7fa f887 	bl	8000628 <__aeabi_dmul>
 800651a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800651c:	4680      	mov	r8, r0
 800651e:	4689      	mov	r9, r1
 8006520:	b933      	cbnz	r3, 8006530 <_strtod_l+0xab8>
 8006522:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006526:	9012      	str	r0, [sp, #72]	; 0x48
 8006528:	9313      	str	r3, [sp, #76]	; 0x4c
 800652a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800652e:	e7dd      	b.n	80064ec <_strtod_l+0xa74>
 8006530:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006534:	e7f9      	b.n	800652a <_strtod_l+0xab2>
 8006536:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800653a:	9b04      	ldr	r3, [sp, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1a8      	bne.n	8006492 <_strtod_l+0xa1a>
 8006540:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006544:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006546:	0d1b      	lsrs	r3, r3, #20
 8006548:	051b      	lsls	r3, r3, #20
 800654a:	429a      	cmp	r2, r3
 800654c:	d1a1      	bne.n	8006492 <_strtod_l+0xa1a>
 800654e:	4640      	mov	r0, r8
 8006550:	4649      	mov	r1, r9
 8006552:	f7fa fbc9 	bl	8000ce8 <__aeabi_d2lz>
 8006556:	f7fa f839 	bl	80005cc <__aeabi_l2d>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4640      	mov	r0, r8
 8006560:	4649      	mov	r1, r9
 8006562:	f7f9 fea9 	bl	80002b8 <__aeabi_dsub>
 8006566:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006568:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800656c:	ea43 030a 	orr.w	r3, r3, sl
 8006570:	4313      	orrs	r3, r2
 8006572:	4680      	mov	r8, r0
 8006574:	4689      	mov	r9, r1
 8006576:	d053      	beq.n	8006620 <_strtod_l+0xba8>
 8006578:	a335      	add	r3, pc, #212	; (adr r3, 8006650 <_strtod_l+0xbd8>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7fa fac5 	bl	8000b0c <__aeabi_dcmplt>
 8006582:	2800      	cmp	r0, #0
 8006584:	f47f acce 	bne.w	8005f24 <_strtod_l+0x4ac>
 8006588:	a333      	add	r3, pc, #204	; (adr r3, 8006658 <_strtod_l+0xbe0>)
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	4640      	mov	r0, r8
 8006590:	4649      	mov	r1, r9
 8006592:	f7fa fad9 	bl	8000b48 <__aeabi_dcmpgt>
 8006596:	2800      	cmp	r0, #0
 8006598:	f43f af7b 	beq.w	8006492 <_strtod_l+0xa1a>
 800659c:	e4c2      	b.n	8005f24 <_strtod_l+0x4ac>
 800659e:	9b04      	ldr	r3, [sp, #16]
 80065a0:	b333      	cbz	r3, 80065f0 <_strtod_l+0xb78>
 80065a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80065a8:	d822      	bhi.n	80065f0 <_strtod_l+0xb78>
 80065aa:	a32d      	add	r3, pc, #180	; (adr r3, 8006660 <_strtod_l+0xbe8>)
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	4640      	mov	r0, r8
 80065b2:	4649      	mov	r1, r9
 80065b4:	f7fa fab4 	bl	8000b20 <__aeabi_dcmple>
 80065b8:	b1a0      	cbz	r0, 80065e4 <_strtod_l+0xb6c>
 80065ba:	4649      	mov	r1, r9
 80065bc:	4640      	mov	r0, r8
 80065be:	f7fa fb0b 	bl	8000bd8 <__aeabi_d2uiz>
 80065c2:	2801      	cmp	r0, #1
 80065c4:	bf38      	it	cc
 80065c6:	2001      	movcc	r0, #1
 80065c8:	f7f9 ffb4 	bl	8000534 <__aeabi_ui2d>
 80065cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065ce:	4680      	mov	r8, r0
 80065d0:	4689      	mov	r9, r1
 80065d2:	bb13      	cbnz	r3, 800661a <_strtod_l+0xba2>
 80065d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80065d8:	9014      	str	r0, [sp, #80]	; 0x50
 80065da:	9315      	str	r3, [sp, #84]	; 0x54
 80065dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80065e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80065e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80065e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80065ec:	1a9b      	subs	r3, r3, r2
 80065ee:	930d      	str	r3, [sp, #52]	; 0x34
 80065f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80065f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80065f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80065fc:	f001 fe86 	bl	800830c <__ulp>
 8006600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006604:	ec53 2b10 	vmov	r2, r3, d0
 8006608:	f7fa f80e 	bl	8000628 <__aeabi_dmul>
 800660c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006610:	f7f9 fe54 	bl	80002bc <__adddf3>
 8006614:	4682      	mov	sl, r0
 8006616:	468b      	mov	fp, r1
 8006618:	e78f      	b.n	800653a <_strtod_l+0xac2>
 800661a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800661e:	e7dd      	b.n	80065dc <_strtod_l+0xb64>
 8006620:	a311      	add	r3, pc, #68	; (adr r3, 8006668 <_strtod_l+0xbf0>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7fa fa71 	bl	8000b0c <__aeabi_dcmplt>
 800662a:	e7b4      	b.n	8006596 <_strtod_l+0xb1e>
 800662c:	2300      	movs	r3, #0
 800662e:	930e      	str	r3, [sp, #56]	; 0x38
 8006630:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006632:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	f7ff ba65 	b.w	8005b04 <_strtod_l+0x8c>
 800663a:	2b65      	cmp	r3, #101	; 0x65
 800663c:	f43f ab5d 	beq.w	8005cfa <_strtod_l+0x282>
 8006640:	2b45      	cmp	r3, #69	; 0x45
 8006642:	f43f ab5a 	beq.w	8005cfa <_strtod_l+0x282>
 8006646:	2201      	movs	r2, #1
 8006648:	f7ff bb92 	b.w	8005d70 <_strtod_l+0x2f8>
 800664c:	f3af 8000 	nop.w
 8006650:	94a03595 	.word	0x94a03595
 8006654:	3fdfffff 	.word	0x3fdfffff
 8006658:	35afe535 	.word	0x35afe535
 800665c:	3fe00000 	.word	0x3fe00000
 8006660:	ffc00000 	.word	0xffc00000
 8006664:	41dfffff 	.word	0x41dfffff
 8006668:	94a03595 	.word	0x94a03595
 800666c:	3fcfffff 	.word	0x3fcfffff
 8006670:	3ff00000 	.word	0x3ff00000
 8006674:	7ff00000 	.word	0x7ff00000
 8006678:	7fe00000 	.word	0x7fe00000
 800667c:	7c9fffff 	.word	0x7c9fffff
 8006680:	3fe00000 	.word	0x3fe00000
 8006684:	bff00000 	.word	0xbff00000
 8006688:	7fefffff 	.word	0x7fefffff

0800668c <_strtod_r>:
 800668c:	4b01      	ldr	r3, [pc, #4]	; (8006694 <_strtod_r+0x8>)
 800668e:	f7ff b9f3 	b.w	8005a78 <_strtod_l>
 8006692:	bf00      	nop
 8006694:	20000098 	.word	0x20000098

08006698 <_strtol_l.isra.0>:
 8006698:	2b01      	cmp	r3, #1
 800669a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800669e:	d001      	beq.n	80066a4 <_strtol_l.isra.0+0xc>
 80066a0:	2b24      	cmp	r3, #36	; 0x24
 80066a2:	d906      	bls.n	80066b2 <_strtol_l.isra.0+0x1a>
 80066a4:	f7fe fa7c 	bl	8004ba0 <__errno>
 80066a8:	2316      	movs	r3, #22
 80066aa:	6003      	str	r3, [r0, #0]
 80066ac:	2000      	movs	r0, #0
 80066ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b2:	4f3a      	ldr	r7, [pc, #232]	; (800679c <_strtol_l.isra.0+0x104>)
 80066b4:	468e      	mov	lr, r1
 80066b6:	4676      	mov	r6, lr
 80066b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80066bc:	5de5      	ldrb	r5, [r4, r7]
 80066be:	f015 0508 	ands.w	r5, r5, #8
 80066c2:	d1f8      	bne.n	80066b6 <_strtol_l.isra.0+0x1e>
 80066c4:	2c2d      	cmp	r4, #45	; 0x2d
 80066c6:	d134      	bne.n	8006732 <_strtol_l.isra.0+0x9a>
 80066c8:	f89e 4000 	ldrb.w	r4, [lr]
 80066cc:	f04f 0801 	mov.w	r8, #1
 80066d0:	f106 0e02 	add.w	lr, r6, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d05c      	beq.n	8006792 <_strtol_l.isra.0+0xfa>
 80066d8:	2b10      	cmp	r3, #16
 80066da:	d10c      	bne.n	80066f6 <_strtol_l.isra.0+0x5e>
 80066dc:	2c30      	cmp	r4, #48	; 0x30
 80066de:	d10a      	bne.n	80066f6 <_strtol_l.isra.0+0x5e>
 80066e0:	f89e 4000 	ldrb.w	r4, [lr]
 80066e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80066e8:	2c58      	cmp	r4, #88	; 0x58
 80066ea:	d14d      	bne.n	8006788 <_strtol_l.isra.0+0xf0>
 80066ec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80066f0:	2310      	movs	r3, #16
 80066f2:	f10e 0e02 	add.w	lr, lr, #2
 80066f6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80066fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80066fe:	2600      	movs	r6, #0
 8006700:	fbbc f9f3 	udiv	r9, ip, r3
 8006704:	4635      	mov	r5, r6
 8006706:	fb03 ca19 	mls	sl, r3, r9, ip
 800670a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800670e:	2f09      	cmp	r7, #9
 8006710:	d818      	bhi.n	8006744 <_strtol_l.isra.0+0xac>
 8006712:	463c      	mov	r4, r7
 8006714:	42a3      	cmp	r3, r4
 8006716:	dd24      	ble.n	8006762 <_strtol_l.isra.0+0xca>
 8006718:	2e00      	cmp	r6, #0
 800671a:	db1f      	blt.n	800675c <_strtol_l.isra.0+0xc4>
 800671c:	45a9      	cmp	r9, r5
 800671e:	d31d      	bcc.n	800675c <_strtol_l.isra.0+0xc4>
 8006720:	d101      	bne.n	8006726 <_strtol_l.isra.0+0x8e>
 8006722:	45a2      	cmp	sl, r4
 8006724:	db1a      	blt.n	800675c <_strtol_l.isra.0+0xc4>
 8006726:	fb05 4503 	mla	r5, r5, r3, r4
 800672a:	2601      	movs	r6, #1
 800672c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006730:	e7eb      	b.n	800670a <_strtol_l.isra.0+0x72>
 8006732:	2c2b      	cmp	r4, #43	; 0x2b
 8006734:	bf08      	it	eq
 8006736:	f89e 4000 	ldrbeq.w	r4, [lr]
 800673a:	46a8      	mov	r8, r5
 800673c:	bf08      	it	eq
 800673e:	f106 0e02 	addeq.w	lr, r6, #2
 8006742:	e7c7      	b.n	80066d4 <_strtol_l.isra.0+0x3c>
 8006744:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006748:	2f19      	cmp	r7, #25
 800674a:	d801      	bhi.n	8006750 <_strtol_l.isra.0+0xb8>
 800674c:	3c37      	subs	r4, #55	; 0x37
 800674e:	e7e1      	b.n	8006714 <_strtol_l.isra.0+0x7c>
 8006750:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006754:	2f19      	cmp	r7, #25
 8006756:	d804      	bhi.n	8006762 <_strtol_l.isra.0+0xca>
 8006758:	3c57      	subs	r4, #87	; 0x57
 800675a:	e7db      	b.n	8006714 <_strtol_l.isra.0+0x7c>
 800675c:	f04f 36ff 	mov.w	r6, #4294967295
 8006760:	e7e4      	b.n	800672c <_strtol_l.isra.0+0x94>
 8006762:	2e00      	cmp	r6, #0
 8006764:	da05      	bge.n	8006772 <_strtol_l.isra.0+0xda>
 8006766:	2322      	movs	r3, #34	; 0x22
 8006768:	6003      	str	r3, [r0, #0]
 800676a:	4665      	mov	r5, ip
 800676c:	b942      	cbnz	r2, 8006780 <_strtol_l.isra.0+0xe8>
 800676e:	4628      	mov	r0, r5
 8006770:	e79d      	b.n	80066ae <_strtol_l.isra.0+0x16>
 8006772:	f1b8 0f00 	cmp.w	r8, #0
 8006776:	d000      	beq.n	800677a <_strtol_l.isra.0+0xe2>
 8006778:	426d      	negs	r5, r5
 800677a:	2a00      	cmp	r2, #0
 800677c:	d0f7      	beq.n	800676e <_strtol_l.isra.0+0xd6>
 800677e:	b10e      	cbz	r6, 8006784 <_strtol_l.isra.0+0xec>
 8006780:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006784:	6011      	str	r1, [r2, #0]
 8006786:	e7f2      	b.n	800676e <_strtol_l.isra.0+0xd6>
 8006788:	2430      	movs	r4, #48	; 0x30
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1b3      	bne.n	80066f6 <_strtol_l.isra.0+0x5e>
 800678e:	2308      	movs	r3, #8
 8006790:	e7b1      	b.n	80066f6 <_strtol_l.isra.0+0x5e>
 8006792:	2c30      	cmp	r4, #48	; 0x30
 8006794:	d0a4      	beq.n	80066e0 <_strtol_l.isra.0+0x48>
 8006796:	230a      	movs	r3, #10
 8006798:	e7ad      	b.n	80066f6 <_strtol_l.isra.0+0x5e>
 800679a:	bf00      	nop
 800679c:	0800a019 	.word	0x0800a019

080067a0 <_strtol_r>:
 80067a0:	f7ff bf7a 	b.w	8006698 <_strtol_l.isra.0>

080067a4 <_write_r>:
 80067a4:	b538      	push	{r3, r4, r5, lr}
 80067a6:	4d07      	ldr	r5, [pc, #28]	; (80067c4 <_write_r+0x20>)
 80067a8:	4604      	mov	r4, r0
 80067aa:	4608      	mov	r0, r1
 80067ac:	4611      	mov	r1, r2
 80067ae:	2200      	movs	r2, #0
 80067b0:	602a      	str	r2, [r5, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	f7fb fd57 	bl	8002266 <_write>
 80067b8:	1c43      	adds	r3, r0, #1
 80067ba:	d102      	bne.n	80067c2 <_write_r+0x1e>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	b103      	cbz	r3, 80067c2 <_write_r+0x1e>
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	bd38      	pop	{r3, r4, r5, pc}
 80067c4:	20007f08 	.word	0x20007f08

080067c8 <_close_r>:
 80067c8:	b538      	push	{r3, r4, r5, lr}
 80067ca:	4d06      	ldr	r5, [pc, #24]	; (80067e4 <_close_r+0x1c>)
 80067cc:	2300      	movs	r3, #0
 80067ce:	4604      	mov	r4, r0
 80067d0:	4608      	mov	r0, r1
 80067d2:	602b      	str	r3, [r5, #0]
 80067d4:	f7fb fd63 	bl	800229e <_close>
 80067d8:	1c43      	adds	r3, r0, #1
 80067da:	d102      	bne.n	80067e2 <_close_r+0x1a>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	b103      	cbz	r3, 80067e2 <_close_r+0x1a>
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	bd38      	pop	{r3, r4, r5, pc}
 80067e4:	20007f08 	.word	0x20007f08

080067e8 <quorem>:
 80067e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	6903      	ldr	r3, [r0, #16]
 80067ee:	690c      	ldr	r4, [r1, #16]
 80067f0:	42a3      	cmp	r3, r4
 80067f2:	4607      	mov	r7, r0
 80067f4:	f2c0 8081 	blt.w	80068fa <quorem+0x112>
 80067f8:	3c01      	subs	r4, #1
 80067fa:	f101 0814 	add.w	r8, r1, #20
 80067fe:	f100 0514 	add.w	r5, r0, #20
 8006802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800680c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006810:	3301      	adds	r3, #1
 8006812:	429a      	cmp	r2, r3
 8006814:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006818:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800681c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006820:	d331      	bcc.n	8006886 <quorem+0x9e>
 8006822:	f04f 0e00 	mov.w	lr, #0
 8006826:	4640      	mov	r0, r8
 8006828:	46ac      	mov	ip, r5
 800682a:	46f2      	mov	sl, lr
 800682c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006830:	b293      	uxth	r3, r2
 8006832:	fb06 e303 	mla	r3, r6, r3, lr
 8006836:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800683a:	b29b      	uxth	r3, r3
 800683c:	ebaa 0303 	sub.w	r3, sl, r3
 8006840:	0c12      	lsrs	r2, r2, #16
 8006842:	f8dc a000 	ldr.w	sl, [ip]
 8006846:	fb06 e202 	mla	r2, r6, r2, lr
 800684a:	fa13 f38a 	uxtah	r3, r3, sl
 800684e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006852:	fa1f fa82 	uxth.w	sl, r2
 8006856:	f8dc 2000 	ldr.w	r2, [ip]
 800685a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800685e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006862:	b29b      	uxth	r3, r3
 8006864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006868:	4581      	cmp	r9, r0
 800686a:	f84c 3b04 	str.w	r3, [ip], #4
 800686e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006872:	d2db      	bcs.n	800682c <quorem+0x44>
 8006874:	f855 300b 	ldr.w	r3, [r5, fp]
 8006878:	b92b      	cbnz	r3, 8006886 <quorem+0x9e>
 800687a:	9b01      	ldr	r3, [sp, #4]
 800687c:	3b04      	subs	r3, #4
 800687e:	429d      	cmp	r5, r3
 8006880:	461a      	mov	r2, r3
 8006882:	d32e      	bcc.n	80068e2 <quorem+0xfa>
 8006884:	613c      	str	r4, [r7, #16]
 8006886:	4638      	mov	r0, r7
 8006888:	f001 fc9c 	bl	80081c4 <__mcmp>
 800688c:	2800      	cmp	r0, #0
 800688e:	db24      	blt.n	80068da <quorem+0xf2>
 8006890:	3601      	adds	r6, #1
 8006892:	4628      	mov	r0, r5
 8006894:	f04f 0c00 	mov.w	ip, #0
 8006898:	f858 2b04 	ldr.w	r2, [r8], #4
 800689c:	f8d0 e000 	ldr.w	lr, [r0]
 80068a0:	b293      	uxth	r3, r2
 80068a2:	ebac 0303 	sub.w	r3, ip, r3
 80068a6:	0c12      	lsrs	r2, r2, #16
 80068a8:	fa13 f38e 	uxtah	r3, r3, lr
 80068ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068ba:	45c1      	cmp	r9, r8
 80068bc:	f840 3b04 	str.w	r3, [r0], #4
 80068c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80068c4:	d2e8      	bcs.n	8006898 <quorem+0xb0>
 80068c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068ce:	b922      	cbnz	r2, 80068da <quorem+0xf2>
 80068d0:	3b04      	subs	r3, #4
 80068d2:	429d      	cmp	r5, r3
 80068d4:	461a      	mov	r2, r3
 80068d6:	d30a      	bcc.n	80068ee <quorem+0x106>
 80068d8:	613c      	str	r4, [r7, #16]
 80068da:	4630      	mov	r0, r6
 80068dc:	b003      	add	sp, #12
 80068de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	3b04      	subs	r3, #4
 80068e6:	2a00      	cmp	r2, #0
 80068e8:	d1cc      	bne.n	8006884 <quorem+0x9c>
 80068ea:	3c01      	subs	r4, #1
 80068ec:	e7c7      	b.n	800687e <quorem+0x96>
 80068ee:	6812      	ldr	r2, [r2, #0]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	d1f0      	bne.n	80068d8 <quorem+0xf0>
 80068f6:	3c01      	subs	r4, #1
 80068f8:	e7eb      	b.n	80068d2 <quorem+0xea>
 80068fa:	2000      	movs	r0, #0
 80068fc:	e7ee      	b.n	80068dc <quorem+0xf4>
	...

08006900 <_dtoa_r>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	ed2d 8b02 	vpush	{d8}
 8006908:	ec57 6b10 	vmov	r6, r7, d0
 800690c:	b095      	sub	sp, #84	; 0x54
 800690e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006910:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006914:	9105      	str	r1, [sp, #20]
 8006916:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800691a:	4604      	mov	r4, r0
 800691c:	9209      	str	r2, [sp, #36]	; 0x24
 800691e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006920:	b975      	cbnz	r5, 8006940 <_dtoa_r+0x40>
 8006922:	2010      	movs	r0, #16
 8006924:	f001 f95e 	bl	8007be4 <malloc>
 8006928:	4602      	mov	r2, r0
 800692a:	6260      	str	r0, [r4, #36]	; 0x24
 800692c:	b920      	cbnz	r0, 8006938 <_dtoa_r+0x38>
 800692e:	4bb2      	ldr	r3, [pc, #712]	; (8006bf8 <_dtoa_r+0x2f8>)
 8006930:	21ea      	movs	r1, #234	; 0xea
 8006932:	48b2      	ldr	r0, [pc, #712]	; (8006bfc <_dtoa_r+0x2fc>)
 8006934:	f002 fca0 	bl	8009278 <__assert_func>
 8006938:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800693c:	6005      	str	r5, [r0, #0]
 800693e:	60c5      	str	r5, [r0, #12]
 8006940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006942:	6819      	ldr	r1, [r3, #0]
 8006944:	b151      	cbz	r1, 800695c <_dtoa_r+0x5c>
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	604a      	str	r2, [r1, #4]
 800694a:	2301      	movs	r3, #1
 800694c:	4093      	lsls	r3, r2
 800694e:	608b      	str	r3, [r1, #8]
 8006950:	4620      	mov	r0, r4
 8006952:	f001 f9af 	bl	8007cb4 <_Bfree>
 8006956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	1e3b      	subs	r3, r7, #0
 800695e:	bfb9      	ittee	lt
 8006960:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006964:	9303      	strlt	r3, [sp, #12]
 8006966:	2300      	movge	r3, #0
 8006968:	f8c8 3000 	strge.w	r3, [r8]
 800696c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006970:	4ba3      	ldr	r3, [pc, #652]	; (8006c00 <_dtoa_r+0x300>)
 8006972:	bfbc      	itt	lt
 8006974:	2201      	movlt	r2, #1
 8006976:	f8c8 2000 	strlt.w	r2, [r8]
 800697a:	ea33 0309 	bics.w	r3, r3, r9
 800697e:	d11b      	bne.n	80069b8 <_dtoa_r+0xb8>
 8006980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006982:	f242 730f 	movw	r3, #9999	; 0x270f
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800698c:	4333      	orrs	r3, r6
 800698e:	f000 857a 	beq.w	8007486 <_dtoa_r+0xb86>
 8006992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006994:	b963      	cbnz	r3, 80069b0 <_dtoa_r+0xb0>
 8006996:	4b9b      	ldr	r3, [pc, #620]	; (8006c04 <_dtoa_r+0x304>)
 8006998:	e024      	b.n	80069e4 <_dtoa_r+0xe4>
 800699a:	4b9b      	ldr	r3, [pc, #620]	; (8006c08 <_dtoa_r+0x308>)
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	3308      	adds	r3, #8
 80069a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	9800      	ldr	r0, [sp, #0]
 80069a6:	b015      	add	sp, #84	; 0x54
 80069a8:	ecbd 8b02 	vpop	{d8}
 80069ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b0:	4b94      	ldr	r3, [pc, #592]	; (8006c04 <_dtoa_r+0x304>)
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	3303      	adds	r3, #3
 80069b6:	e7f3      	b.n	80069a0 <_dtoa_r+0xa0>
 80069b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069bc:	2200      	movs	r2, #0
 80069be:	ec51 0b17 	vmov	r0, r1, d7
 80069c2:	2300      	movs	r3, #0
 80069c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80069c8:	f7fa f896 	bl	8000af8 <__aeabi_dcmpeq>
 80069cc:	4680      	mov	r8, r0
 80069ce:	b158      	cbz	r0, 80069e8 <_dtoa_r+0xe8>
 80069d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069d2:	2301      	movs	r3, #1
 80069d4:	6013      	str	r3, [r2, #0]
 80069d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8551 	beq.w	8007480 <_dtoa_r+0xb80>
 80069de:	488b      	ldr	r0, [pc, #556]	; (8006c0c <_dtoa_r+0x30c>)
 80069e0:	6018      	str	r0, [r3, #0]
 80069e2:	1e43      	subs	r3, r0, #1
 80069e4:	9300      	str	r3, [sp, #0]
 80069e6:	e7dd      	b.n	80069a4 <_dtoa_r+0xa4>
 80069e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80069ec:	aa12      	add	r2, sp, #72	; 0x48
 80069ee:	a913      	add	r1, sp, #76	; 0x4c
 80069f0:	4620      	mov	r0, r4
 80069f2:	f001 fd07 	bl	8008404 <__d2b>
 80069f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80069fa:	4683      	mov	fp, r0
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	d07c      	beq.n	8006afa <_dtoa_r+0x1fa>
 8006a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006a0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a1a:	4b7d      	ldr	r3, [pc, #500]	; (8006c10 <_dtoa_r+0x310>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4630      	mov	r0, r6
 8006a20:	4639      	mov	r1, r7
 8006a22:	f7f9 fc49 	bl	80002b8 <__aeabi_dsub>
 8006a26:	a36e      	add	r3, pc, #440	; (adr r3, 8006be0 <_dtoa_r+0x2e0>)
 8006a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2c:	f7f9 fdfc 	bl	8000628 <__aeabi_dmul>
 8006a30:	a36d      	add	r3, pc, #436	; (adr r3, 8006be8 <_dtoa_r+0x2e8>)
 8006a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a36:	f7f9 fc41 	bl	80002bc <__adddf3>
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	460f      	mov	r7, r1
 8006a40:	f7f9 fd88 	bl	8000554 <__aeabi_i2d>
 8006a44:	a36a      	add	r3, pc, #424	; (adr r3, 8006bf0 <_dtoa_r+0x2f0>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	f7f9 fded 	bl	8000628 <__aeabi_dmul>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4630      	mov	r0, r6
 8006a54:	4639      	mov	r1, r7
 8006a56:	f7f9 fc31 	bl	80002bc <__adddf3>
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	460f      	mov	r7, r1
 8006a5e:	f7fa f893 	bl	8000b88 <__aeabi_d2iz>
 8006a62:	2200      	movs	r2, #0
 8006a64:	4682      	mov	sl, r0
 8006a66:	2300      	movs	r3, #0
 8006a68:	4630      	mov	r0, r6
 8006a6a:	4639      	mov	r1, r7
 8006a6c:	f7fa f84e 	bl	8000b0c <__aeabi_dcmplt>
 8006a70:	b148      	cbz	r0, 8006a86 <_dtoa_r+0x186>
 8006a72:	4650      	mov	r0, sl
 8006a74:	f7f9 fd6e 	bl	8000554 <__aeabi_i2d>
 8006a78:	4632      	mov	r2, r6
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	f7fa f83c 	bl	8000af8 <__aeabi_dcmpeq>
 8006a80:	b908      	cbnz	r0, 8006a86 <_dtoa_r+0x186>
 8006a82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a86:	f1ba 0f16 	cmp.w	sl, #22
 8006a8a:	d854      	bhi.n	8006b36 <_dtoa_r+0x236>
 8006a8c:	4b61      	ldr	r3, [pc, #388]	; (8006c14 <_dtoa_r+0x314>)
 8006a8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a9a:	f7fa f837 	bl	8000b0c <__aeabi_dcmplt>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d04b      	beq.n	8006b3a <_dtoa_r+0x23a>
 8006aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	930e      	str	r3, [sp, #56]	; 0x38
 8006aaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006aac:	1b5d      	subs	r5, r3, r5
 8006aae:	1e6b      	subs	r3, r5, #1
 8006ab0:	9304      	str	r3, [sp, #16]
 8006ab2:	bf43      	ittte	mi
 8006ab4:	2300      	movmi	r3, #0
 8006ab6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006aba:	9304      	strmi	r3, [sp, #16]
 8006abc:	f04f 0800 	movpl.w	r8, #0
 8006ac0:	f1ba 0f00 	cmp.w	sl, #0
 8006ac4:	db3b      	blt.n	8006b3e <_dtoa_r+0x23e>
 8006ac6:	9b04      	ldr	r3, [sp, #16]
 8006ac8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006acc:	4453      	add	r3, sl
 8006ace:	9304      	str	r3, [sp, #16]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9306      	str	r3, [sp, #24]
 8006ad4:	9b05      	ldr	r3, [sp, #20]
 8006ad6:	2b09      	cmp	r3, #9
 8006ad8:	d869      	bhi.n	8006bae <_dtoa_r+0x2ae>
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	bfc4      	itt	gt
 8006ade:	3b04      	subgt	r3, #4
 8006ae0:	9305      	strgt	r3, [sp, #20]
 8006ae2:	9b05      	ldr	r3, [sp, #20]
 8006ae4:	f1a3 0302 	sub.w	r3, r3, #2
 8006ae8:	bfcc      	ite	gt
 8006aea:	2500      	movgt	r5, #0
 8006aec:	2501      	movle	r5, #1
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d869      	bhi.n	8006bc6 <_dtoa_r+0x2c6>
 8006af2:	e8df f003 	tbb	[pc, r3]
 8006af6:	4e2c      	.short	0x4e2c
 8006af8:	5a4c      	.short	0x5a4c
 8006afa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006afe:	441d      	add	r5, r3
 8006b00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	bfc1      	itttt	gt
 8006b08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b0c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b10:	fa09 f303 	lslgt.w	r3, r9, r3
 8006b14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b18:	bfda      	itte	le
 8006b1a:	f1c3 0320 	rsble	r3, r3, #32
 8006b1e:	fa06 f003 	lslle.w	r0, r6, r3
 8006b22:	4318      	orrgt	r0, r3
 8006b24:	f7f9 fd06 	bl	8000534 <__aeabi_ui2d>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b30:	3d01      	subs	r5, #1
 8006b32:	9310      	str	r3, [sp, #64]	; 0x40
 8006b34:	e771      	b.n	8006a1a <_dtoa_r+0x11a>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e7b6      	b.n	8006aa8 <_dtoa_r+0x1a8>
 8006b3a:	900e      	str	r0, [sp, #56]	; 0x38
 8006b3c:	e7b5      	b.n	8006aaa <_dtoa_r+0x1aa>
 8006b3e:	f1ca 0300 	rsb	r3, sl, #0
 8006b42:	9306      	str	r3, [sp, #24]
 8006b44:	2300      	movs	r3, #0
 8006b46:	eba8 080a 	sub.w	r8, r8, sl
 8006b4a:	930d      	str	r3, [sp, #52]	; 0x34
 8006b4c:	e7c2      	b.n	8006ad4 <_dtoa_r+0x1d4>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9308      	str	r3, [sp, #32]
 8006b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	dc39      	bgt.n	8006bcc <_dtoa_r+0x2cc>
 8006b58:	f04f 0901 	mov.w	r9, #1
 8006b5c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b60:	464b      	mov	r3, r9
 8006b62:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006b66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b68:	2200      	movs	r2, #0
 8006b6a:	6042      	str	r2, [r0, #4]
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	f102 0614 	add.w	r6, r2, #20
 8006b72:	429e      	cmp	r6, r3
 8006b74:	6841      	ldr	r1, [r0, #4]
 8006b76:	d92f      	bls.n	8006bd8 <_dtoa_r+0x2d8>
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f001 f85b 	bl	8007c34 <_Balloc>
 8006b7e:	9000      	str	r0, [sp, #0]
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d14b      	bne.n	8006c1c <_dtoa_r+0x31c>
 8006b84:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <_dtoa_r+0x318>)
 8006b86:	4602      	mov	r2, r0
 8006b88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b8c:	e6d1      	b.n	8006932 <_dtoa_r+0x32>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e7de      	b.n	8006b50 <_dtoa_r+0x250>
 8006b92:	2300      	movs	r3, #0
 8006b94:	9308      	str	r3, [sp, #32]
 8006b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b98:	eb0a 0903 	add.w	r9, sl, r3
 8006b9c:	f109 0301 	add.w	r3, r9, #1
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	bfb8      	it	lt
 8006ba6:	2301      	movlt	r3, #1
 8006ba8:	e7dd      	b.n	8006b66 <_dtoa_r+0x266>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e7f2      	b.n	8006b94 <_dtoa_r+0x294>
 8006bae:	2501      	movs	r5, #1
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9305      	str	r3, [sp, #20]
 8006bb4:	9508      	str	r5, [sp, #32]
 8006bb6:	f04f 39ff 	mov.w	r9, #4294967295
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bc0:	2312      	movs	r3, #18
 8006bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8006bc4:	e7cf      	b.n	8006b66 <_dtoa_r+0x266>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	9308      	str	r3, [sp, #32]
 8006bca:	e7f4      	b.n	8006bb6 <_dtoa_r+0x2b6>
 8006bcc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006bd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	e7c6      	b.n	8006b66 <_dtoa_r+0x266>
 8006bd8:	3101      	adds	r1, #1
 8006bda:	6041      	str	r1, [r0, #4]
 8006bdc:	0052      	lsls	r2, r2, #1
 8006bde:	e7c6      	b.n	8006b6e <_dtoa_r+0x26e>
 8006be0:	636f4361 	.word	0x636f4361
 8006be4:	3fd287a7 	.word	0x3fd287a7
 8006be8:	8b60c8b3 	.word	0x8b60c8b3
 8006bec:	3fc68a28 	.word	0x3fc68a28
 8006bf0:	509f79fb 	.word	0x509f79fb
 8006bf4:	3fd34413 	.word	0x3fd34413
 8006bf8:	0800a126 	.word	0x0800a126
 8006bfc:	0800a13d 	.word	0x0800a13d
 8006c00:	7ff00000 	.word	0x7ff00000
 8006c04:	0800a122 	.word	0x0800a122
 8006c08:	0800a119 	.word	0x0800a119
 8006c0c:	0800a3a2 	.word	0x0800a3a2
 8006c10:	3ff80000 	.word	0x3ff80000
 8006c14:	0800a2b8 	.word	0x0800a2b8
 8006c18:	0800a19c 	.word	0x0800a19c
 8006c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c1e:	9a00      	ldr	r2, [sp, #0]
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	9b01      	ldr	r3, [sp, #4]
 8006c24:	2b0e      	cmp	r3, #14
 8006c26:	f200 80ad 	bhi.w	8006d84 <_dtoa_r+0x484>
 8006c2a:	2d00      	cmp	r5, #0
 8006c2c:	f000 80aa 	beq.w	8006d84 <_dtoa_r+0x484>
 8006c30:	f1ba 0f00 	cmp.w	sl, #0
 8006c34:	dd36      	ble.n	8006ca4 <_dtoa_r+0x3a4>
 8006c36:	4ac3      	ldr	r2, [pc, #780]	; (8006f44 <_dtoa_r+0x644>)
 8006c38:	f00a 030f 	and.w	r3, sl, #15
 8006c3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c40:	ed93 7b00 	vldr	d7, [r3]
 8006c44:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006c48:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006c4c:	eeb0 8a47 	vmov.f32	s16, s14
 8006c50:	eef0 8a67 	vmov.f32	s17, s15
 8006c54:	d016      	beq.n	8006c84 <_dtoa_r+0x384>
 8006c56:	4bbc      	ldr	r3, [pc, #752]	; (8006f48 <_dtoa_r+0x648>)
 8006c58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c60:	f7f9 fe0c 	bl	800087c <__aeabi_ddiv>
 8006c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c68:	f007 070f 	and.w	r7, r7, #15
 8006c6c:	2503      	movs	r5, #3
 8006c6e:	4eb6      	ldr	r6, [pc, #728]	; (8006f48 <_dtoa_r+0x648>)
 8006c70:	b957      	cbnz	r7, 8006c88 <_dtoa_r+0x388>
 8006c72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c76:	ec53 2b18 	vmov	r2, r3, d8
 8006c7a:	f7f9 fdff 	bl	800087c <__aeabi_ddiv>
 8006c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c82:	e029      	b.n	8006cd8 <_dtoa_r+0x3d8>
 8006c84:	2502      	movs	r5, #2
 8006c86:	e7f2      	b.n	8006c6e <_dtoa_r+0x36e>
 8006c88:	07f9      	lsls	r1, r7, #31
 8006c8a:	d508      	bpl.n	8006c9e <_dtoa_r+0x39e>
 8006c8c:	ec51 0b18 	vmov	r0, r1, d8
 8006c90:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c94:	f7f9 fcc8 	bl	8000628 <__aeabi_dmul>
 8006c98:	ec41 0b18 	vmov	d8, r0, r1
 8006c9c:	3501      	adds	r5, #1
 8006c9e:	107f      	asrs	r7, r7, #1
 8006ca0:	3608      	adds	r6, #8
 8006ca2:	e7e5      	b.n	8006c70 <_dtoa_r+0x370>
 8006ca4:	f000 80a6 	beq.w	8006df4 <_dtoa_r+0x4f4>
 8006ca8:	f1ca 0600 	rsb	r6, sl, #0
 8006cac:	4ba5      	ldr	r3, [pc, #660]	; (8006f44 <_dtoa_r+0x644>)
 8006cae:	4fa6      	ldr	r7, [pc, #664]	; (8006f48 <_dtoa_r+0x648>)
 8006cb0:	f006 020f 	and.w	r2, r6, #15
 8006cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cc0:	f7f9 fcb2 	bl	8000628 <__aeabi_dmul>
 8006cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cc8:	1136      	asrs	r6, r6, #4
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2502      	movs	r5, #2
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	f040 8085 	bne.w	8006dde <_dtoa_r+0x4de>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1d2      	bne.n	8006c7e <_dtoa_r+0x37e>
 8006cd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	f000 808c 	beq.w	8006df8 <_dtoa_r+0x4f8>
 8006ce0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006ce4:	4b99      	ldr	r3, [pc, #612]	; (8006f4c <_dtoa_r+0x64c>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	4630      	mov	r0, r6
 8006cea:	4639      	mov	r1, r7
 8006cec:	f7f9 ff0e 	bl	8000b0c <__aeabi_dcmplt>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	f000 8081 	beq.w	8006df8 <_dtoa_r+0x4f8>
 8006cf6:	9b01      	ldr	r3, [sp, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d07d      	beq.n	8006df8 <_dtoa_r+0x4f8>
 8006cfc:	f1b9 0f00 	cmp.w	r9, #0
 8006d00:	dd3c      	ble.n	8006d7c <_dtoa_r+0x47c>
 8006d02:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d06:	9307      	str	r3, [sp, #28]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	4b91      	ldr	r3, [pc, #580]	; (8006f50 <_dtoa_r+0x650>)
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 fc8a 	bl	8000628 <__aeabi_dmul>
 8006d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d18:	3501      	adds	r5, #1
 8006d1a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006d1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d22:	4628      	mov	r0, r5
 8006d24:	f7f9 fc16 	bl	8000554 <__aeabi_i2d>
 8006d28:	4632      	mov	r2, r6
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	f7f9 fc7c 	bl	8000628 <__aeabi_dmul>
 8006d30:	4b88      	ldr	r3, [pc, #544]	; (8006f54 <_dtoa_r+0x654>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	f7f9 fac2 	bl	80002bc <__adddf3>
 8006d38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d40:	9303      	str	r3, [sp, #12]
 8006d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d15c      	bne.n	8006e02 <_dtoa_r+0x502>
 8006d48:	4b83      	ldr	r3, [pc, #524]	; (8006f58 <_dtoa_r+0x658>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	4639      	mov	r1, r7
 8006d50:	f7f9 fab2 	bl	80002b8 <__aeabi_dsub>
 8006d54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d58:	4606      	mov	r6, r0
 8006d5a:	460f      	mov	r7, r1
 8006d5c:	f7f9 fef4 	bl	8000b48 <__aeabi_dcmpgt>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	f040 8296 	bne.w	8007292 <_dtoa_r+0x992>
 8006d66:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d70:	4639      	mov	r1, r7
 8006d72:	f7f9 fecb 	bl	8000b0c <__aeabi_dcmplt>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f040 8288 	bne.w	800728c <_dtoa_r+0x98c>
 8006d7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f2c0 8158 	blt.w	800703c <_dtoa_r+0x73c>
 8006d8c:	f1ba 0f0e 	cmp.w	sl, #14
 8006d90:	f300 8154 	bgt.w	800703c <_dtoa_r+0x73c>
 8006d94:	4b6b      	ldr	r3, [pc, #428]	; (8006f44 <_dtoa_r+0x644>)
 8006d96:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f280 80e3 	bge.w	8006f6c <_dtoa_r+0x66c>
 8006da6:	9b01      	ldr	r3, [sp, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f300 80df 	bgt.w	8006f6c <_dtoa_r+0x66c>
 8006dae:	f040 826d 	bne.w	800728c <_dtoa_r+0x98c>
 8006db2:	4b69      	ldr	r3, [pc, #420]	; (8006f58 <_dtoa_r+0x658>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	4640      	mov	r0, r8
 8006db8:	4649      	mov	r1, r9
 8006dba:	f7f9 fc35 	bl	8000628 <__aeabi_dmul>
 8006dbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dc2:	f7f9 feb7 	bl	8000b34 <__aeabi_dcmpge>
 8006dc6:	9e01      	ldr	r6, [sp, #4]
 8006dc8:	4637      	mov	r7, r6
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	f040 8243 	bne.w	8007256 <_dtoa_r+0x956>
 8006dd0:	9d00      	ldr	r5, [sp, #0]
 8006dd2:	2331      	movs	r3, #49	; 0x31
 8006dd4:	f805 3b01 	strb.w	r3, [r5], #1
 8006dd8:	f10a 0a01 	add.w	sl, sl, #1
 8006ddc:	e23f      	b.n	800725e <_dtoa_r+0x95e>
 8006dde:	07f2      	lsls	r2, r6, #31
 8006de0:	d505      	bpl.n	8006dee <_dtoa_r+0x4ee>
 8006de2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006de6:	f7f9 fc1f 	bl	8000628 <__aeabi_dmul>
 8006dea:	3501      	adds	r5, #1
 8006dec:	2301      	movs	r3, #1
 8006dee:	1076      	asrs	r6, r6, #1
 8006df0:	3708      	adds	r7, #8
 8006df2:	e76c      	b.n	8006cce <_dtoa_r+0x3ce>
 8006df4:	2502      	movs	r5, #2
 8006df6:	e76f      	b.n	8006cd8 <_dtoa_r+0x3d8>
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	f8cd a01c 	str.w	sl, [sp, #28]
 8006dfe:	930c      	str	r3, [sp, #48]	; 0x30
 8006e00:	e78d      	b.n	8006d1e <_dtoa_r+0x41e>
 8006e02:	9900      	ldr	r1, [sp, #0]
 8006e04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e08:	4b4e      	ldr	r3, [pc, #312]	; (8006f44 <_dtoa_r+0x644>)
 8006e0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e0e:	4401      	add	r1, r0
 8006e10:	9102      	str	r1, [sp, #8]
 8006e12:	9908      	ldr	r1, [sp, #32]
 8006e14:	eeb0 8a47 	vmov.f32	s16, s14
 8006e18:	eef0 8a67 	vmov.f32	s17, s15
 8006e1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e24:	2900      	cmp	r1, #0
 8006e26:	d045      	beq.n	8006eb4 <_dtoa_r+0x5b4>
 8006e28:	494c      	ldr	r1, [pc, #304]	; (8006f5c <_dtoa_r+0x65c>)
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	f7f9 fd26 	bl	800087c <__aeabi_ddiv>
 8006e30:	ec53 2b18 	vmov	r2, r3, d8
 8006e34:	f7f9 fa40 	bl	80002b8 <__aeabi_dsub>
 8006e38:	9d00      	ldr	r5, [sp, #0]
 8006e3a:	ec41 0b18 	vmov	d8, r0, r1
 8006e3e:	4639      	mov	r1, r7
 8006e40:	4630      	mov	r0, r6
 8006e42:	f7f9 fea1 	bl	8000b88 <__aeabi_d2iz>
 8006e46:	900c      	str	r0, [sp, #48]	; 0x30
 8006e48:	f7f9 fb84 	bl	8000554 <__aeabi_i2d>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4630      	mov	r0, r6
 8006e52:	4639      	mov	r1, r7
 8006e54:	f7f9 fa30 	bl	80002b8 <__aeabi_dsub>
 8006e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e5a:	3330      	adds	r3, #48	; 0x30
 8006e5c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e60:	ec53 2b18 	vmov	r2, r3, d8
 8006e64:	4606      	mov	r6, r0
 8006e66:	460f      	mov	r7, r1
 8006e68:	f7f9 fe50 	bl	8000b0c <__aeabi_dcmplt>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d165      	bne.n	8006f3c <_dtoa_r+0x63c>
 8006e70:	4632      	mov	r2, r6
 8006e72:	463b      	mov	r3, r7
 8006e74:	4935      	ldr	r1, [pc, #212]	; (8006f4c <_dtoa_r+0x64c>)
 8006e76:	2000      	movs	r0, #0
 8006e78:	f7f9 fa1e 	bl	80002b8 <__aeabi_dsub>
 8006e7c:	ec53 2b18 	vmov	r2, r3, d8
 8006e80:	f7f9 fe44 	bl	8000b0c <__aeabi_dcmplt>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	f040 80b9 	bne.w	8006ffc <_dtoa_r+0x6fc>
 8006e8a:	9b02      	ldr	r3, [sp, #8]
 8006e8c:	429d      	cmp	r5, r3
 8006e8e:	f43f af75 	beq.w	8006d7c <_dtoa_r+0x47c>
 8006e92:	4b2f      	ldr	r3, [pc, #188]	; (8006f50 <_dtoa_r+0x650>)
 8006e94:	ec51 0b18 	vmov	r0, r1, d8
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f7f9 fbc5 	bl	8000628 <__aeabi_dmul>
 8006e9e:	4b2c      	ldr	r3, [pc, #176]	; (8006f50 <_dtoa_r+0x650>)
 8006ea0:	ec41 0b18 	vmov	d8, r0, r1
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	f7f9 fbbd 	bl	8000628 <__aeabi_dmul>
 8006eae:	4606      	mov	r6, r0
 8006eb0:	460f      	mov	r7, r1
 8006eb2:	e7c4      	b.n	8006e3e <_dtoa_r+0x53e>
 8006eb4:	ec51 0b17 	vmov	r0, r1, d7
 8006eb8:	f7f9 fbb6 	bl	8000628 <__aeabi_dmul>
 8006ebc:	9b02      	ldr	r3, [sp, #8]
 8006ebe:	9d00      	ldr	r5, [sp, #0]
 8006ec0:	930c      	str	r3, [sp, #48]	; 0x30
 8006ec2:	ec41 0b18 	vmov	d8, r0, r1
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f7f9 fe5d 	bl	8000b88 <__aeabi_d2iz>
 8006ece:	9011      	str	r0, [sp, #68]	; 0x44
 8006ed0:	f7f9 fb40 	bl	8000554 <__aeabi_i2d>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4630      	mov	r0, r6
 8006eda:	4639      	mov	r1, r7
 8006edc:	f7f9 f9ec 	bl	80002b8 <__aeabi_dsub>
 8006ee0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ee2:	3330      	adds	r3, #48	; 0x30
 8006ee4:	f805 3b01 	strb.w	r3, [r5], #1
 8006ee8:	9b02      	ldr	r3, [sp, #8]
 8006eea:	429d      	cmp	r5, r3
 8006eec:	4606      	mov	r6, r0
 8006eee:	460f      	mov	r7, r1
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	d134      	bne.n	8006f60 <_dtoa_r+0x660>
 8006ef6:	4b19      	ldr	r3, [pc, #100]	; (8006f5c <_dtoa_r+0x65c>)
 8006ef8:	ec51 0b18 	vmov	r0, r1, d8
 8006efc:	f7f9 f9de 	bl	80002bc <__adddf3>
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	4630      	mov	r0, r6
 8006f06:	4639      	mov	r1, r7
 8006f08:	f7f9 fe1e 	bl	8000b48 <__aeabi_dcmpgt>
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d175      	bne.n	8006ffc <_dtoa_r+0x6fc>
 8006f10:	ec53 2b18 	vmov	r2, r3, d8
 8006f14:	4911      	ldr	r1, [pc, #68]	; (8006f5c <_dtoa_r+0x65c>)
 8006f16:	2000      	movs	r0, #0
 8006f18:	f7f9 f9ce 	bl	80002b8 <__aeabi_dsub>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4630      	mov	r0, r6
 8006f22:	4639      	mov	r1, r7
 8006f24:	f7f9 fdf2 	bl	8000b0c <__aeabi_dcmplt>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	f43f af27 	beq.w	8006d7c <_dtoa_r+0x47c>
 8006f2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f30:	1e6b      	subs	r3, r5, #1
 8006f32:	930c      	str	r3, [sp, #48]	; 0x30
 8006f34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f38:	2b30      	cmp	r3, #48	; 0x30
 8006f3a:	d0f8      	beq.n	8006f2e <_dtoa_r+0x62e>
 8006f3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f40:	e04a      	b.n	8006fd8 <_dtoa_r+0x6d8>
 8006f42:	bf00      	nop
 8006f44:	0800a2b8 	.word	0x0800a2b8
 8006f48:	0800a290 	.word	0x0800a290
 8006f4c:	3ff00000 	.word	0x3ff00000
 8006f50:	40240000 	.word	0x40240000
 8006f54:	401c0000 	.word	0x401c0000
 8006f58:	40140000 	.word	0x40140000
 8006f5c:	3fe00000 	.word	0x3fe00000
 8006f60:	4baf      	ldr	r3, [pc, #700]	; (8007220 <_dtoa_r+0x920>)
 8006f62:	f7f9 fb61 	bl	8000628 <__aeabi_dmul>
 8006f66:	4606      	mov	r6, r0
 8006f68:	460f      	mov	r7, r1
 8006f6a:	e7ac      	b.n	8006ec6 <_dtoa_r+0x5c6>
 8006f6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f70:	9d00      	ldr	r5, [sp, #0]
 8006f72:	4642      	mov	r2, r8
 8006f74:	464b      	mov	r3, r9
 8006f76:	4630      	mov	r0, r6
 8006f78:	4639      	mov	r1, r7
 8006f7a:	f7f9 fc7f 	bl	800087c <__aeabi_ddiv>
 8006f7e:	f7f9 fe03 	bl	8000b88 <__aeabi_d2iz>
 8006f82:	9002      	str	r0, [sp, #8]
 8006f84:	f7f9 fae6 	bl	8000554 <__aeabi_i2d>
 8006f88:	4642      	mov	r2, r8
 8006f8a:	464b      	mov	r3, r9
 8006f8c:	f7f9 fb4c 	bl	8000628 <__aeabi_dmul>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4630      	mov	r0, r6
 8006f96:	4639      	mov	r1, r7
 8006f98:	f7f9 f98e 	bl	80002b8 <__aeabi_dsub>
 8006f9c:	9e02      	ldr	r6, [sp, #8]
 8006f9e:	9f01      	ldr	r7, [sp, #4]
 8006fa0:	3630      	adds	r6, #48	; 0x30
 8006fa2:	f805 6b01 	strb.w	r6, [r5], #1
 8006fa6:	9e00      	ldr	r6, [sp, #0]
 8006fa8:	1bae      	subs	r6, r5, r6
 8006faa:	42b7      	cmp	r7, r6
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	d137      	bne.n	8007022 <_dtoa_r+0x722>
 8006fb2:	f7f9 f983 	bl	80002bc <__adddf3>
 8006fb6:	4642      	mov	r2, r8
 8006fb8:	464b      	mov	r3, r9
 8006fba:	4606      	mov	r6, r0
 8006fbc:	460f      	mov	r7, r1
 8006fbe:	f7f9 fdc3 	bl	8000b48 <__aeabi_dcmpgt>
 8006fc2:	b9c8      	cbnz	r0, 8006ff8 <_dtoa_r+0x6f8>
 8006fc4:	4642      	mov	r2, r8
 8006fc6:	464b      	mov	r3, r9
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f7f9 fd94 	bl	8000af8 <__aeabi_dcmpeq>
 8006fd0:	b110      	cbz	r0, 8006fd8 <_dtoa_r+0x6d8>
 8006fd2:	9b02      	ldr	r3, [sp, #8]
 8006fd4:	07d9      	lsls	r1, r3, #31
 8006fd6:	d40f      	bmi.n	8006ff8 <_dtoa_r+0x6f8>
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4659      	mov	r1, fp
 8006fdc:	f000 fe6a 	bl	8007cb4 <_Bfree>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	702b      	strb	r3, [r5, #0]
 8006fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fe6:	f10a 0001 	add.w	r0, sl, #1
 8006fea:	6018      	str	r0, [r3, #0]
 8006fec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f43f acd8 	beq.w	80069a4 <_dtoa_r+0xa4>
 8006ff4:	601d      	str	r5, [r3, #0]
 8006ff6:	e4d5      	b.n	80069a4 <_dtoa_r+0xa4>
 8006ff8:	f8cd a01c 	str.w	sl, [sp, #28]
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	461d      	mov	r5, r3
 8007000:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007004:	2a39      	cmp	r2, #57	; 0x39
 8007006:	d108      	bne.n	800701a <_dtoa_r+0x71a>
 8007008:	9a00      	ldr	r2, [sp, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d1f7      	bne.n	8006ffe <_dtoa_r+0x6fe>
 800700e:	9a07      	ldr	r2, [sp, #28]
 8007010:	9900      	ldr	r1, [sp, #0]
 8007012:	3201      	adds	r2, #1
 8007014:	9207      	str	r2, [sp, #28]
 8007016:	2230      	movs	r2, #48	; 0x30
 8007018:	700a      	strb	r2, [r1, #0]
 800701a:	781a      	ldrb	r2, [r3, #0]
 800701c:	3201      	adds	r2, #1
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	e78c      	b.n	8006f3c <_dtoa_r+0x63c>
 8007022:	4b7f      	ldr	r3, [pc, #508]	; (8007220 <_dtoa_r+0x920>)
 8007024:	2200      	movs	r2, #0
 8007026:	f7f9 faff 	bl	8000628 <__aeabi_dmul>
 800702a:	2200      	movs	r2, #0
 800702c:	2300      	movs	r3, #0
 800702e:	4606      	mov	r6, r0
 8007030:	460f      	mov	r7, r1
 8007032:	f7f9 fd61 	bl	8000af8 <__aeabi_dcmpeq>
 8007036:	2800      	cmp	r0, #0
 8007038:	d09b      	beq.n	8006f72 <_dtoa_r+0x672>
 800703a:	e7cd      	b.n	8006fd8 <_dtoa_r+0x6d8>
 800703c:	9a08      	ldr	r2, [sp, #32]
 800703e:	2a00      	cmp	r2, #0
 8007040:	f000 80c4 	beq.w	80071cc <_dtoa_r+0x8cc>
 8007044:	9a05      	ldr	r2, [sp, #20]
 8007046:	2a01      	cmp	r2, #1
 8007048:	f300 80a8 	bgt.w	800719c <_dtoa_r+0x89c>
 800704c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800704e:	2a00      	cmp	r2, #0
 8007050:	f000 80a0 	beq.w	8007194 <_dtoa_r+0x894>
 8007054:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007058:	9e06      	ldr	r6, [sp, #24]
 800705a:	4645      	mov	r5, r8
 800705c:	9a04      	ldr	r2, [sp, #16]
 800705e:	2101      	movs	r1, #1
 8007060:	441a      	add	r2, r3
 8007062:	4620      	mov	r0, r4
 8007064:	4498      	add	r8, r3
 8007066:	9204      	str	r2, [sp, #16]
 8007068:	f000 ff2a 	bl	8007ec0 <__i2b>
 800706c:	4607      	mov	r7, r0
 800706e:	2d00      	cmp	r5, #0
 8007070:	dd0b      	ble.n	800708a <_dtoa_r+0x78a>
 8007072:	9b04      	ldr	r3, [sp, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	dd08      	ble.n	800708a <_dtoa_r+0x78a>
 8007078:	42ab      	cmp	r3, r5
 800707a:	9a04      	ldr	r2, [sp, #16]
 800707c:	bfa8      	it	ge
 800707e:	462b      	movge	r3, r5
 8007080:	eba8 0803 	sub.w	r8, r8, r3
 8007084:	1aed      	subs	r5, r5, r3
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	9b06      	ldr	r3, [sp, #24]
 800708c:	b1fb      	cbz	r3, 80070ce <_dtoa_r+0x7ce>
 800708e:	9b08      	ldr	r3, [sp, #32]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 809f 	beq.w	80071d4 <_dtoa_r+0x8d4>
 8007096:	2e00      	cmp	r6, #0
 8007098:	dd11      	ble.n	80070be <_dtoa_r+0x7be>
 800709a:	4639      	mov	r1, r7
 800709c:	4632      	mov	r2, r6
 800709e:	4620      	mov	r0, r4
 80070a0:	f000 ffca 	bl	8008038 <__pow5mult>
 80070a4:	465a      	mov	r2, fp
 80070a6:	4601      	mov	r1, r0
 80070a8:	4607      	mov	r7, r0
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 ff1e 	bl	8007eec <__multiply>
 80070b0:	4659      	mov	r1, fp
 80070b2:	9007      	str	r0, [sp, #28]
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 fdfd 	bl	8007cb4 <_Bfree>
 80070ba:	9b07      	ldr	r3, [sp, #28]
 80070bc:	469b      	mov	fp, r3
 80070be:	9b06      	ldr	r3, [sp, #24]
 80070c0:	1b9a      	subs	r2, r3, r6
 80070c2:	d004      	beq.n	80070ce <_dtoa_r+0x7ce>
 80070c4:	4659      	mov	r1, fp
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 ffb6 	bl	8008038 <__pow5mult>
 80070cc:	4683      	mov	fp, r0
 80070ce:	2101      	movs	r1, #1
 80070d0:	4620      	mov	r0, r4
 80070d2:	f000 fef5 	bl	8007ec0 <__i2b>
 80070d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070d8:	2b00      	cmp	r3, #0
 80070da:	4606      	mov	r6, r0
 80070dc:	dd7c      	ble.n	80071d8 <_dtoa_r+0x8d8>
 80070de:	461a      	mov	r2, r3
 80070e0:	4601      	mov	r1, r0
 80070e2:	4620      	mov	r0, r4
 80070e4:	f000 ffa8 	bl	8008038 <__pow5mult>
 80070e8:	9b05      	ldr	r3, [sp, #20]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	4606      	mov	r6, r0
 80070ee:	dd76      	ble.n	80071de <_dtoa_r+0x8de>
 80070f0:	2300      	movs	r3, #0
 80070f2:	9306      	str	r3, [sp, #24]
 80070f4:	6933      	ldr	r3, [r6, #16]
 80070f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070fa:	6918      	ldr	r0, [r3, #16]
 80070fc:	f000 fe90 	bl	8007e20 <__hi0bits>
 8007100:	f1c0 0020 	rsb	r0, r0, #32
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	4418      	add	r0, r3
 8007108:	f010 001f 	ands.w	r0, r0, #31
 800710c:	f000 8086 	beq.w	800721c <_dtoa_r+0x91c>
 8007110:	f1c0 0320 	rsb	r3, r0, #32
 8007114:	2b04      	cmp	r3, #4
 8007116:	dd7f      	ble.n	8007218 <_dtoa_r+0x918>
 8007118:	f1c0 001c 	rsb	r0, r0, #28
 800711c:	9b04      	ldr	r3, [sp, #16]
 800711e:	4403      	add	r3, r0
 8007120:	4480      	add	r8, r0
 8007122:	4405      	add	r5, r0
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	f1b8 0f00 	cmp.w	r8, #0
 800712a:	dd05      	ble.n	8007138 <_dtoa_r+0x838>
 800712c:	4659      	mov	r1, fp
 800712e:	4642      	mov	r2, r8
 8007130:	4620      	mov	r0, r4
 8007132:	f000 ffdb 	bl	80080ec <__lshift>
 8007136:	4683      	mov	fp, r0
 8007138:	9b04      	ldr	r3, [sp, #16]
 800713a:	2b00      	cmp	r3, #0
 800713c:	dd05      	ble.n	800714a <_dtoa_r+0x84a>
 800713e:	4631      	mov	r1, r6
 8007140:	461a      	mov	r2, r3
 8007142:	4620      	mov	r0, r4
 8007144:	f000 ffd2 	bl	80080ec <__lshift>
 8007148:	4606      	mov	r6, r0
 800714a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800714c:	2b00      	cmp	r3, #0
 800714e:	d069      	beq.n	8007224 <_dtoa_r+0x924>
 8007150:	4631      	mov	r1, r6
 8007152:	4658      	mov	r0, fp
 8007154:	f001 f836 	bl	80081c4 <__mcmp>
 8007158:	2800      	cmp	r0, #0
 800715a:	da63      	bge.n	8007224 <_dtoa_r+0x924>
 800715c:	2300      	movs	r3, #0
 800715e:	4659      	mov	r1, fp
 8007160:	220a      	movs	r2, #10
 8007162:	4620      	mov	r0, r4
 8007164:	f000 fdc8 	bl	8007cf8 <__multadd>
 8007168:	9b08      	ldr	r3, [sp, #32]
 800716a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800716e:	4683      	mov	fp, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 818f 	beq.w	8007494 <_dtoa_r+0xb94>
 8007176:	4639      	mov	r1, r7
 8007178:	2300      	movs	r3, #0
 800717a:	220a      	movs	r2, #10
 800717c:	4620      	mov	r0, r4
 800717e:	f000 fdbb 	bl	8007cf8 <__multadd>
 8007182:	f1b9 0f00 	cmp.w	r9, #0
 8007186:	4607      	mov	r7, r0
 8007188:	f300 808e 	bgt.w	80072a8 <_dtoa_r+0x9a8>
 800718c:	9b05      	ldr	r3, [sp, #20]
 800718e:	2b02      	cmp	r3, #2
 8007190:	dc50      	bgt.n	8007234 <_dtoa_r+0x934>
 8007192:	e089      	b.n	80072a8 <_dtoa_r+0x9a8>
 8007194:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007196:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800719a:	e75d      	b.n	8007058 <_dtoa_r+0x758>
 800719c:	9b01      	ldr	r3, [sp, #4]
 800719e:	1e5e      	subs	r6, r3, #1
 80071a0:	9b06      	ldr	r3, [sp, #24]
 80071a2:	42b3      	cmp	r3, r6
 80071a4:	bfbf      	itttt	lt
 80071a6:	9b06      	ldrlt	r3, [sp, #24]
 80071a8:	9606      	strlt	r6, [sp, #24]
 80071aa:	1af2      	sublt	r2, r6, r3
 80071ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80071ae:	bfb6      	itet	lt
 80071b0:	189b      	addlt	r3, r3, r2
 80071b2:	1b9e      	subge	r6, r3, r6
 80071b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80071b6:	9b01      	ldr	r3, [sp, #4]
 80071b8:	bfb8      	it	lt
 80071ba:	2600      	movlt	r6, #0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	bfb5      	itete	lt
 80071c0:	eba8 0503 	sublt.w	r5, r8, r3
 80071c4:	9b01      	ldrge	r3, [sp, #4]
 80071c6:	2300      	movlt	r3, #0
 80071c8:	4645      	movge	r5, r8
 80071ca:	e747      	b.n	800705c <_dtoa_r+0x75c>
 80071cc:	9e06      	ldr	r6, [sp, #24]
 80071ce:	9f08      	ldr	r7, [sp, #32]
 80071d0:	4645      	mov	r5, r8
 80071d2:	e74c      	b.n	800706e <_dtoa_r+0x76e>
 80071d4:	9a06      	ldr	r2, [sp, #24]
 80071d6:	e775      	b.n	80070c4 <_dtoa_r+0x7c4>
 80071d8:	9b05      	ldr	r3, [sp, #20]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	dc18      	bgt.n	8007210 <_dtoa_r+0x910>
 80071de:	9b02      	ldr	r3, [sp, #8]
 80071e0:	b9b3      	cbnz	r3, 8007210 <_dtoa_r+0x910>
 80071e2:	9b03      	ldr	r3, [sp, #12]
 80071e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071e8:	b9a3      	cbnz	r3, 8007214 <_dtoa_r+0x914>
 80071ea:	9b03      	ldr	r3, [sp, #12]
 80071ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071f0:	0d1b      	lsrs	r3, r3, #20
 80071f2:	051b      	lsls	r3, r3, #20
 80071f4:	b12b      	cbz	r3, 8007202 <_dtoa_r+0x902>
 80071f6:	9b04      	ldr	r3, [sp, #16]
 80071f8:	3301      	adds	r3, #1
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	f108 0801 	add.w	r8, r8, #1
 8007200:	2301      	movs	r3, #1
 8007202:	9306      	str	r3, [sp, #24]
 8007204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007206:	2b00      	cmp	r3, #0
 8007208:	f47f af74 	bne.w	80070f4 <_dtoa_r+0x7f4>
 800720c:	2001      	movs	r0, #1
 800720e:	e779      	b.n	8007104 <_dtoa_r+0x804>
 8007210:	2300      	movs	r3, #0
 8007212:	e7f6      	b.n	8007202 <_dtoa_r+0x902>
 8007214:	9b02      	ldr	r3, [sp, #8]
 8007216:	e7f4      	b.n	8007202 <_dtoa_r+0x902>
 8007218:	d085      	beq.n	8007126 <_dtoa_r+0x826>
 800721a:	4618      	mov	r0, r3
 800721c:	301c      	adds	r0, #28
 800721e:	e77d      	b.n	800711c <_dtoa_r+0x81c>
 8007220:	40240000 	.word	0x40240000
 8007224:	9b01      	ldr	r3, [sp, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	dc38      	bgt.n	800729c <_dtoa_r+0x99c>
 800722a:	9b05      	ldr	r3, [sp, #20]
 800722c:	2b02      	cmp	r3, #2
 800722e:	dd35      	ble.n	800729c <_dtoa_r+0x99c>
 8007230:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007234:	f1b9 0f00 	cmp.w	r9, #0
 8007238:	d10d      	bne.n	8007256 <_dtoa_r+0x956>
 800723a:	4631      	mov	r1, r6
 800723c:	464b      	mov	r3, r9
 800723e:	2205      	movs	r2, #5
 8007240:	4620      	mov	r0, r4
 8007242:	f000 fd59 	bl	8007cf8 <__multadd>
 8007246:	4601      	mov	r1, r0
 8007248:	4606      	mov	r6, r0
 800724a:	4658      	mov	r0, fp
 800724c:	f000 ffba 	bl	80081c4 <__mcmp>
 8007250:	2800      	cmp	r0, #0
 8007252:	f73f adbd 	bgt.w	8006dd0 <_dtoa_r+0x4d0>
 8007256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007258:	9d00      	ldr	r5, [sp, #0]
 800725a:	ea6f 0a03 	mvn.w	sl, r3
 800725e:	f04f 0800 	mov.w	r8, #0
 8007262:	4631      	mov	r1, r6
 8007264:	4620      	mov	r0, r4
 8007266:	f000 fd25 	bl	8007cb4 <_Bfree>
 800726a:	2f00      	cmp	r7, #0
 800726c:	f43f aeb4 	beq.w	8006fd8 <_dtoa_r+0x6d8>
 8007270:	f1b8 0f00 	cmp.w	r8, #0
 8007274:	d005      	beq.n	8007282 <_dtoa_r+0x982>
 8007276:	45b8      	cmp	r8, r7
 8007278:	d003      	beq.n	8007282 <_dtoa_r+0x982>
 800727a:	4641      	mov	r1, r8
 800727c:	4620      	mov	r0, r4
 800727e:	f000 fd19 	bl	8007cb4 <_Bfree>
 8007282:	4639      	mov	r1, r7
 8007284:	4620      	mov	r0, r4
 8007286:	f000 fd15 	bl	8007cb4 <_Bfree>
 800728a:	e6a5      	b.n	8006fd8 <_dtoa_r+0x6d8>
 800728c:	2600      	movs	r6, #0
 800728e:	4637      	mov	r7, r6
 8007290:	e7e1      	b.n	8007256 <_dtoa_r+0x956>
 8007292:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007294:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007298:	4637      	mov	r7, r6
 800729a:	e599      	b.n	8006dd0 <_dtoa_r+0x4d0>
 800729c:	9b08      	ldr	r3, [sp, #32]
 800729e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80fd 	beq.w	80074a2 <_dtoa_r+0xba2>
 80072a8:	2d00      	cmp	r5, #0
 80072aa:	dd05      	ble.n	80072b8 <_dtoa_r+0x9b8>
 80072ac:	4639      	mov	r1, r7
 80072ae:	462a      	mov	r2, r5
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 ff1b 	bl	80080ec <__lshift>
 80072b6:	4607      	mov	r7, r0
 80072b8:	9b06      	ldr	r3, [sp, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d05c      	beq.n	8007378 <_dtoa_r+0xa78>
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fcb7 	bl	8007c34 <_Balloc>
 80072c6:	4605      	mov	r5, r0
 80072c8:	b928      	cbnz	r0, 80072d6 <_dtoa_r+0x9d6>
 80072ca:	4b80      	ldr	r3, [pc, #512]	; (80074cc <_dtoa_r+0xbcc>)
 80072cc:	4602      	mov	r2, r0
 80072ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80072d2:	f7ff bb2e 	b.w	8006932 <_dtoa_r+0x32>
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	3202      	adds	r2, #2
 80072da:	0092      	lsls	r2, r2, #2
 80072dc:	f107 010c 	add.w	r1, r7, #12
 80072e0:	300c      	adds	r0, #12
 80072e2:	f000 fc99 	bl	8007c18 <memcpy>
 80072e6:	2201      	movs	r2, #1
 80072e8:	4629      	mov	r1, r5
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 fefe 	bl	80080ec <__lshift>
 80072f0:	9b00      	ldr	r3, [sp, #0]
 80072f2:	3301      	adds	r3, #1
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	9b00      	ldr	r3, [sp, #0]
 80072f8:	444b      	add	r3, r9
 80072fa:	9307      	str	r3, [sp, #28]
 80072fc:	9b02      	ldr	r3, [sp, #8]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	46b8      	mov	r8, r7
 8007304:	9306      	str	r3, [sp, #24]
 8007306:	4607      	mov	r7, r0
 8007308:	9b01      	ldr	r3, [sp, #4]
 800730a:	4631      	mov	r1, r6
 800730c:	3b01      	subs	r3, #1
 800730e:	4658      	mov	r0, fp
 8007310:	9302      	str	r3, [sp, #8]
 8007312:	f7ff fa69 	bl	80067e8 <quorem>
 8007316:	4603      	mov	r3, r0
 8007318:	3330      	adds	r3, #48	; 0x30
 800731a:	9004      	str	r0, [sp, #16]
 800731c:	4641      	mov	r1, r8
 800731e:	4658      	mov	r0, fp
 8007320:	9308      	str	r3, [sp, #32]
 8007322:	f000 ff4f 	bl	80081c4 <__mcmp>
 8007326:	463a      	mov	r2, r7
 8007328:	4681      	mov	r9, r0
 800732a:	4631      	mov	r1, r6
 800732c:	4620      	mov	r0, r4
 800732e:	f000 ff65 	bl	80081fc <__mdiff>
 8007332:	68c2      	ldr	r2, [r0, #12]
 8007334:	9b08      	ldr	r3, [sp, #32]
 8007336:	4605      	mov	r5, r0
 8007338:	bb02      	cbnz	r2, 800737c <_dtoa_r+0xa7c>
 800733a:	4601      	mov	r1, r0
 800733c:	4658      	mov	r0, fp
 800733e:	f000 ff41 	bl	80081c4 <__mcmp>
 8007342:	9b08      	ldr	r3, [sp, #32]
 8007344:	4602      	mov	r2, r0
 8007346:	4629      	mov	r1, r5
 8007348:	4620      	mov	r0, r4
 800734a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800734e:	f000 fcb1 	bl	8007cb4 <_Bfree>
 8007352:	9b05      	ldr	r3, [sp, #20]
 8007354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007356:	9d01      	ldr	r5, [sp, #4]
 8007358:	ea43 0102 	orr.w	r1, r3, r2
 800735c:	9b06      	ldr	r3, [sp, #24]
 800735e:	430b      	orrs	r3, r1
 8007360:	9b08      	ldr	r3, [sp, #32]
 8007362:	d10d      	bne.n	8007380 <_dtoa_r+0xa80>
 8007364:	2b39      	cmp	r3, #57	; 0x39
 8007366:	d029      	beq.n	80073bc <_dtoa_r+0xabc>
 8007368:	f1b9 0f00 	cmp.w	r9, #0
 800736c:	dd01      	ble.n	8007372 <_dtoa_r+0xa72>
 800736e:	9b04      	ldr	r3, [sp, #16]
 8007370:	3331      	adds	r3, #49	; 0x31
 8007372:	9a02      	ldr	r2, [sp, #8]
 8007374:	7013      	strb	r3, [r2, #0]
 8007376:	e774      	b.n	8007262 <_dtoa_r+0x962>
 8007378:	4638      	mov	r0, r7
 800737a:	e7b9      	b.n	80072f0 <_dtoa_r+0x9f0>
 800737c:	2201      	movs	r2, #1
 800737e:	e7e2      	b.n	8007346 <_dtoa_r+0xa46>
 8007380:	f1b9 0f00 	cmp.w	r9, #0
 8007384:	db06      	blt.n	8007394 <_dtoa_r+0xa94>
 8007386:	9905      	ldr	r1, [sp, #20]
 8007388:	ea41 0909 	orr.w	r9, r1, r9
 800738c:	9906      	ldr	r1, [sp, #24]
 800738e:	ea59 0101 	orrs.w	r1, r9, r1
 8007392:	d120      	bne.n	80073d6 <_dtoa_r+0xad6>
 8007394:	2a00      	cmp	r2, #0
 8007396:	ddec      	ble.n	8007372 <_dtoa_r+0xa72>
 8007398:	4659      	mov	r1, fp
 800739a:	2201      	movs	r2, #1
 800739c:	4620      	mov	r0, r4
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	f000 fea4 	bl	80080ec <__lshift>
 80073a4:	4631      	mov	r1, r6
 80073a6:	4683      	mov	fp, r0
 80073a8:	f000 ff0c 	bl	80081c4 <__mcmp>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	9b01      	ldr	r3, [sp, #4]
 80073b0:	dc02      	bgt.n	80073b8 <_dtoa_r+0xab8>
 80073b2:	d1de      	bne.n	8007372 <_dtoa_r+0xa72>
 80073b4:	07da      	lsls	r2, r3, #31
 80073b6:	d5dc      	bpl.n	8007372 <_dtoa_r+0xa72>
 80073b8:	2b39      	cmp	r3, #57	; 0x39
 80073ba:	d1d8      	bne.n	800736e <_dtoa_r+0xa6e>
 80073bc:	9a02      	ldr	r2, [sp, #8]
 80073be:	2339      	movs	r3, #57	; 0x39
 80073c0:	7013      	strb	r3, [r2, #0]
 80073c2:	462b      	mov	r3, r5
 80073c4:	461d      	mov	r5, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80073cc:	2a39      	cmp	r2, #57	; 0x39
 80073ce:	d050      	beq.n	8007472 <_dtoa_r+0xb72>
 80073d0:	3201      	adds	r2, #1
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	e745      	b.n	8007262 <_dtoa_r+0x962>
 80073d6:	2a00      	cmp	r2, #0
 80073d8:	dd03      	ble.n	80073e2 <_dtoa_r+0xae2>
 80073da:	2b39      	cmp	r3, #57	; 0x39
 80073dc:	d0ee      	beq.n	80073bc <_dtoa_r+0xabc>
 80073de:	3301      	adds	r3, #1
 80073e0:	e7c7      	b.n	8007372 <_dtoa_r+0xa72>
 80073e2:	9a01      	ldr	r2, [sp, #4]
 80073e4:	9907      	ldr	r1, [sp, #28]
 80073e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80073ea:	428a      	cmp	r2, r1
 80073ec:	d02a      	beq.n	8007444 <_dtoa_r+0xb44>
 80073ee:	4659      	mov	r1, fp
 80073f0:	2300      	movs	r3, #0
 80073f2:	220a      	movs	r2, #10
 80073f4:	4620      	mov	r0, r4
 80073f6:	f000 fc7f 	bl	8007cf8 <__multadd>
 80073fa:	45b8      	cmp	r8, r7
 80073fc:	4683      	mov	fp, r0
 80073fe:	f04f 0300 	mov.w	r3, #0
 8007402:	f04f 020a 	mov.w	r2, #10
 8007406:	4641      	mov	r1, r8
 8007408:	4620      	mov	r0, r4
 800740a:	d107      	bne.n	800741c <_dtoa_r+0xb1c>
 800740c:	f000 fc74 	bl	8007cf8 <__multadd>
 8007410:	4680      	mov	r8, r0
 8007412:	4607      	mov	r7, r0
 8007414:	9b01      	ldr	r3, [sp, #4]
 8007416:	3301      	adds	r3, #1
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	e775      	b.n	8007308 <_dtoa_r+0xa08>
 800741c:	f000 fc6c 	bl	8007cf8 <__multadd>
 8007420:	4639      	mov	r1, r7
 8007422:	4680      	mov	r8, r0
 8007424:	2300      	movs	r3, #0
 8007426:	220a      	movs	r2, #10
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fc65 	bl	8007cf8 <__multadd>
 800742e:	4607      	mov	r7, r0
 8007430:	e7f0      	b.n	8007414 <_dtoa_r+0xb14>
 8007432:	f1b9 0f00 	cmp.w	r9, #0
 8007436:	9a00      	ldr	r2, [sp, #0]
 8007438:	bfcc      	ite	gt
 800743a:	464d      	movgt	r5, r9
 800743c:	2501      	movle	r5, #1
 800743e:	4415      	add	r5, r2
 8007440:	f04f 0800 	mov.w	r8, #0
 8007444:	4659      	mov	r1, fp
 8007446:	2201      	movs	r2, #1
 8007448:	4620      	mov	r0, r4
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	f000 fe4e 	bl	80080ec <__lshift>
 8007450:	4631      	mov	r1, r6
 8007452:	4683      	mov	fp, r0
 8007454:	f000 feb6 	bl	80081c4 <__mcmp>
 8007458:	2800      	cmp	r0, #0
 800745a:	dcb2      	bgt.n	80073c2 <_dtoa_r+0xac2>
 800745c:	d102      	bne.n	8007464 <_dtoa_r+0xb64>
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	07db      	lsls	r3, r3, #31
 8007462:	d4ae      	bmi.n	80073c2 <_dtoa_r+0xac2>
 8007464:	462b      	mov	r3, r5
 8007466:	461d      	mov	r5, r3
 8007468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800746c:	2a30      	cmp	r2, #48	; 0x30
 800746e:	d0fa      	beq.n	8007466 <_dtoa_r+0xb66>
 8007470:	e6f7      	b.n	8007262 <_dtoa_r+0x962>
 8007472:	9a00      	ldr	r2, [sp, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d1a5      	bne.n	80073c4 <_dtoa_r+0xac4>
 8007478:	f10a 0a01 	add.w	sl, sl, #1
 800747c:	2331      	movs	r3, #49	; 0x31
 800747e:	e779      	b.n	8007374 <_dtoa_r+0xa74>
 8007480:	4b13      	ldr	r3, [pc, #76]	; (80074d0 <_dtoa_r+0xbd0>)
 8007482:	f7ff baaf 	b.w	80069e4 <_dtoa_r+0xe4>
 8007486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007488:	2b00      	cmp	r3, #0
 800748a:	f47f aa86 	bne.w	800699a <_dtoa_r+0x9a>
 800748e:	4b11      	ldr	r3, [pc, #68]	; (80074d4 <_dtoa_r+0xbd4>)
 8007490:	f7ff baa8 	b.w	80069e4 <_dtoa_r+0xe4>
 8007494:	f1b9 0f00 	cmp.w	r9, #0
 8007498:	dc03      	bgt.n	80074a2 <_dtoa_r+0xba2>
 800749a:	9b05      	ldr	r3, [sp, #20]
 800749c:	2b02      	cmp	r3, #2
 800749e:	f73f aec9 	bgt.w	8007234 <_dtoa_r+0x934>
 80074a2:	9d00      	ldr	r5, [sp, #0]
 80074a4:	4631      	mov	r1, r6
 80074a6:	4658      	mov	r0, fp
 80074a8:	f7ff f99e 	bl	80067e8 <quorem>
 80074ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80074b0:	f805 3b01 	strb.w	r3, [r5], #1
 80074b4:	9a00      	ldr	r2, [sp, #0]
 80074b6:	1aaa      	subs	r2, r5, r2
 80074b8:	4591      	cmp	r9, r2
 80074ba:	ddba      	ble.n	8007432 <_dtoa_r+0xb32>
 80074bc:	4659      	mov	r1, fp
 80074be:	2300      	movs	r3, #0
 80074c0:	220a      	movs	r2, #10
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 fc18 	bl	8007cf8 <__multadd>
 80074c8:	4683      	mov	fp, r0
 80074ca:	e7eb      	b.n	80074a4 <_dtoa_r+0xba4>
 80074cc:	0800a19c 	.word	0x0800a19c
 80074d0:	0800a3a1 	.word	0x0800a3a1
 80074d4:	0800a119 	.word	0x0800a119

080074d8 <rshift>:
 80074d8:	6903      	ldr	r3, [r0, #16]
 80074da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80074de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80074e6:	f100 0414 	add.w	r4, r0, #20
 80074ea:	dd45      	ble.n	8007578 <rshift+0xa0>
 80074ec:	f011 011f 	ands.w	r1, r1, #31
 80074f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80074f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80074f8:	d10c      	bne.n	8007514 <rshift+0x3c>
 80074fa:	f100 0710 	add.w	r7, r0, #16
 80074fe:	4629      	mov	r1, r5
 8007500:	42b1      	cmp	r1, r6
 8007502:	d334      	bcc.n	800756e <rshift+0x96>
 8007504:	1a9b      	subs	r3, r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	1eea      	subs	r2, r5, #3
 800750a:	4296      	cmp	r6, r2
 800750c:	bf38      	it	cc
 800750e:	2300      	movcc	r3, #0
 8007510:	4423      	add	r3, r4
 8007512:	e015      	b.n	8007540 <rshift+0x68>
 8007514:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007518:	f1c1 0820 	rsb	r8, r1, #32
 800751c:	40cf      	lsrs	r7, r1
 800751e:	f105 0e04 	add.w	lr, r5, #4
 8007522:	46a1      	mov	r9, r4
 8007524:	4576      	cmp	r6, lr
 8007526:	46f4      	mov	ip, lr
 8007528:	d815      	bhi.n	8007556 <rshift+0x7e>
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	009a      	lsls	r2, r3, #2
 800752e:	3a04      	subs	r2, #4
 8007530:	3501      	adds	r5, #1
 8007532:	42ae      	cmp	r6, r5
 8007534:	bf38      	it	cc
 8007536:	2200      	movcc	r2, #0
 8007538:	18a3      	adds	r3, r4, r2
 800753a:	50a7      	str	r7, [r4, r2]
 800753c:	b107      	cbz	r7, 8007540 <rshift+0x68>
 800753e:	3304      	adds	r3, #4
 8007540:	1b1a      	subs	r2, r3, r4
 8007542:	42a3      	cmp	r3, r4
 8007544:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007548:	bf08      	it	eq
 800754a:	2300      	moveq	r3, #0
 800754c:	6102      	str	r2, [r0, #16]
 800754e:	bf08      	it	eq
 8007550:	6143      	streq	r3, [r0, #20]
 8007552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007556:	f8dc c000 	ldr.w	ip, [ip]
 800755a:	fa0c fc08 	lsl.w	ip, ip, r8
 800755e:	ea4c 0707 	orr.w	r7, ip, r7
 8007562:	f849 7b04 	str.w	r7, [r9], #4
 8007566:	f85e 7b04 	ldr.w	r7, [lr], #4
 800756a:	40cf      	lsrs	r7, r1
 800756c:	e7da      	b.n	8007524 <rshift+0x4c>
 800756e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007572:	f847 cf04 	str.w	ip, [r7, #4]!
 8007576:	e7c3      	b.n	8007500 <rshift+0x28>
 8007578:	4623      	mov	r3, r4
 800757a:	e7e1      	b.n	8007540 <rshift+0x68>

0800757c <__hexdig_fun>:
 800757c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007580:	2b09      	cmp	r3, #9
 8007582:	d802      	bhi.n	800758a <__hexdig_fun+0xe>
 8007584:	3820      	subs	r0, #32
 8007586:	b2c0      	uxtb	r0, r0
 8007588:	4770      	bx	lr
 800758a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800758e:	2b05      	cmp	r3, #5
 8007590:	d801      	bhi.n	8007596 <__hexdig_fun+0x1a>
 8007592:	3847      	subs	r0, #71	; 0x47
 8007594:	e7f7      	b.n	8007586 <__hexdig_fun+0xa>
 8007596:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800759a:	2b05      	cmp	r3, #5
 800759c:	d801      	bhi.n	80075a2 <__hexdig_fun+0x26>
 800759e:	3827      	subs	r0, #39	; 0x27
 80075a0:	e7f1      	b.n	8007586 <__hexdig_fun+0xa>
 80075a2:	2000      	movs	r0, #0
 80075a4:	4770      	bx	lr
	...

080075a8 <__gethex>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	ed2d 8b02 	vpush	{d8}
 80075b0:	b089      	sub	sp, #36	; 0x24
 80075b2:	ee08 0a10 	vmov	s16, r0
 80075b6:	9304      	str	r3, [sp, #16]
 80075b8:	4bbc      	ldr	r3, [pc, #752]	; (80078ac <__gethex+0x304>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	4618      	mov	r0, r3
 80075c0:	468b      	mov	fp, r1
 80075c2:	4690      	mov	r8, r2
 80075c4:	f7f8 fe16 	bl	80001f4 <strlen>
 80075c8:	9b01      	ldr	r3, [sp, #4]
 80075ca:	f8db 2000 	ldr.w	r2, [fp]
 80075ce:	4403      	add	r3, r0
 80075d0:	4682      	mov	sl, r0
 80075d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80075d6:	9305      	str	r3, [sp, #20]
 80075d8:	1c93      	adds	r3, r2, #2
 80075da:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80075de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80075e2:	32fe      	adds	r2, #254	; 0xfe
 80075e4:	18d1      	adds	r1, r2, r3
 80075e6:	461f      	mov	r7, r3
 80075e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80075ec:	9100      	str	r1, [sp, #0]
 80075ee:	2830      	cmp	r0, #48	; 0x30
 80075f0:	d0f8      	beq.n	80075e4 <__gethex+0x3c>
 80075f2:	f7ff ffc3 	bl	800757c <__hexdig_fun>
 80075f6:	4604      	mov	r4, r0
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d13a      	bne.n	8007672 <__gethex+0xca>
 80075fc:	9901      	ldr	r1, [sp, #4]
 80075fe:	4652      	mov	r2, sl
 8007600:	4638      	mov	r0, r7
 8007602:	f001 fd61 	bl	80090c8 <strncmp>
 8007606:	4605      	mov	r5, r0
 8007608:	2800      	cmp	r0, #0
 800760a:	d168      	bne.n	80076de <__gethex+0x136>
 800760c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007610:	eb07 060a 	add.w	r6, r7, sl
 8007614:	f7ff ffb2 	bl	800757c <__hexdig_fun>
 8007618:	2800      	cmp	r0, #0
 800761a:	d062      	beq.n	80076e2 <__gethex+0x13a>
 800761c:	4633      	mov	r3, r6
 800761e:	7818      	ldrb	r0, [r3, #0]
 8007620:	2830      	cmp	r0, #48	; 0x30
 8007622:	461f      	mov	r7, r3
 8007624:	f103 0301 	add.w	r3, r3, #1
 8007628:	d0f9      	beq.n	800761e <__gethex+0x76>
 800762a:	f7ff ffa7 	bl	800757c <__hexdig_fun>
 800762e:	2301      	movs	r3, #1
 8007630:	fab0 f480 	clz	r4, r0
 8007634:	0964      	lsrs	r4, r4, #5
 8007636:	4635      	mov	r5, r6
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	463a      	mov	r2, r7
 800763c:	4616      	mov	r6, r2
 800763e:	3201      	adds	r2, #1
 8007640:	7830      	ldrb	r0, [r6, #0]
 8007642:	f7ff ff9b 	bl	800757c <__hexdig_fun>
 8007646:	2800      	cmp	r0, #0
 8007648:	d1f8      	bne.n	800763c <__gethex+0x94>
 800764a:	9901      	ldr	r1, [sp, #4]
 800764c:	4652      	mov	r2, sl
 800764e:	4630      	mov	r0, r6
 8007650:	f001 fd3a 	bl	80090c8 <strncmp>
 8007654:	b980      	cbnz	r0, 8007678 <__gethex+0xd0>
 8007656:	b94d      	cbnz	r5, 800766c <__gethex+0xc4>
 8007658:	eb06 050a 	add.w	r5, r6, sl
 800765c:	462a      	mov	r2, r5
 800765e:	4616      	mov	r6, r2
 8007660:	3201      	adds	r2, #1
 8007662:	7830      	ldrb	r0, [r6, #0]
 8007664:	f7ff ff8a 	bl	800757c <__hexdig_fun>
 8007668:	2800      	cmp	r0, #0
 800766a:	d1f8      	bne.n	800765e <__gethex+0xb6>
 800766c:	1bad      	subs	r5, r5, r6
 800766e:	00ad      	lsls	r5, r5, #2
 8007670:	e004      	b.n	800767c <__gethex+0xd4>
 8007672:	2400      	movs	r4, #0
 8007674:	4625      	mov	r5, r4
 8007676:	e7e0      	b.n	800763a <__gethex+0x92>
 8007678:	2d00      	cmp	r5, #0
 800767a:	d1f7      	bne.n	800766c <__gethex+0xc4>
 800767c:	7833      	ldrb	r3, [r6, #0]
 800767e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007682:	2b50      	cmp	r3, #80	; 0x50
 8007684:	d13b      	bne.n	80076fe <__gethex+0x156>
 8007686:	7873      	ldrb	r3, [r6, #1]
 8007688:	2b2b      	cmp	r3, #43	; 0x2b
 800768a:	d02c      	beq.n	80076e6 <__gethex+0x13e>
 800768c:	2b2d      	cmp	r3, #45	; 0x2d
 800768e:	d02e      	beq.n	80076ee <__gethex+0x146>
 8007690:	1c71      	adds	r1, r6, #1
 8007692:	f04f 0900 	mov.w	r9, #0
 8007696:	7808      	ldrb	r0, [r1, #0]
 8007698:	f7ff ff70 	bl	800757c <__hexdig_fun>
 800769c:	1e43      	subs	r3, r0, #1
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b18      	cmp	r3, #24
 80076a2:	d82c      	bhi.n	80076fe <__gethex+0x156>
 80076a4:	f1a0 0210 	sub.w	r2, r0, #16
 80076a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80076ac:	f7ff ff66 	bl	800757c <__hexdig_fun>
 80076b0:	1e43      	subs	r3, r0, #1
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b18      	cmp	r3, #24
 80076b6:	d91d      	bls.n	80076f4 <__gethex+0x14c>
 80076b8:	f1b9 0f00 	cmp.w	r9, #0
 80076bc:	d000      	beq.n	80076c0 <__gethex+0x118>
 80076be:	4252      	negs	r2, r2
 80076c0:	4415      	add	r5, r2
 80076c2:	f8cb 1000 	str.w	r1, [fp]
 80076c6:	b1e4      	cbz	r4, 8007702 <__gethex+0x15a>
 80076c8:	9b00      	ldr	r3, [sp, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	bf14      	ite	ne
 80076ce:	2700      	movne	r7, #0
 80076d0:	2706      	moveq	r7, #6
 80076d2:	4638      	mov	r0, r7
 80076d4:	b009      	add	sp, #36	; 0x24
 80076d6:	ecbd 8b02 	vpop	{d8}
 80076da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076de:	463e      	mov	r6, r7
 80076e0:	4625      	mov	r5, r4
 80076e2:	2401      	movs	r4, #1
 80076e4:	e7ca      	b.n	800767c <__gethex+0xd4>
 80076e6:	f04f 0900 	mov.w	r9, #0
 80076ea:	1cb1      	adds	r1, r6, #2
 80076ec:	e7d3      	b.n	8007696 <__gethex+0xee>
 80076ee:	f04f 0901 	mov.w	r9, #1
 80076f2:	e7fa      	b.n	80076ea <__gethex+0x142>
 80076f4:	230a      	movs	r3, #10
 80076f6:	fb03 0202 	mla	r2, r3, r2, r0
 80076fa:	3a10      	subs	r2, #16
 80076fc:	e7d4      	b.n	80076a8 <__gethex+0x100>
 80076fe:	4631      	mov	r1, r6
 8007700:	e7df      	b.n	80076c2 <__gethex+0x11a>
 8007702:	1bf3      	subs	r3, r6, r7
 8007704:	3b01      	subs	r3, #1
 8007706:	4621      	mov	r1, r4
 8007708:	2b07      	cmp	r3, #7
 800770a:	dc0b      	bgt.n	8007724 <__gethex+0x17c>
 800770c:	ee18 0a10 	vmov	r0, s16
 8007710:	f000 fa90 	bl	8007c34 <_Balloc>
 8007714:	4604      	mov	r4, r0
 8007716:	b940      	cbnz	r0, 800772a <__gethex+0x182>
 8007718:	4b65      	ldr	r3, [pc, #404]	; (80078b0 <__gethex+0x308>)
 800771a:	4602      	mov	r2, r0
 800771c:	21de      	movs	r1, #222	; 0xde
 800771e:	4865      	ldr	r0, [pc, #404]	; (80078b4 <__gethex+0x30c>)
 8007720:	f001 fdaa 	bl	8009278 <__assert_func>
 8007724:	3101      	adds	r1, #1
 8007726:	105b      	asrs	r3, r3, #1
 8007728:	e7ee      	b.n	8007708 <__gethex+0x160>
 800772a:	f100 0914 	add.w	r9, r0, #20
 800772e:	f04f 0b00 	mov.w	fp, #0
 8007732:	f1ca 0301 	rsb	r3, sl, #1
 8007736:	f8cd 9008 	str.w	r9, [sp, #8]
 800773a:	f8cd b000 	str.w	fp, [sp]
 800773e:	9306      	str	r3, [sp, #24]
 8007740:	42b7      	cmp	r7, r6
 8007742:	d340      	bcc.n	80077c6 <__gethex+0x21e>
 8007744:	9802      	ldr	r0, [sp, #8]
 8007746:	9b00      	ldr	r3, [sp, #0]
 8007748:	f840 3b04 	str.w	r3, [r0], #4
 800774c:	eba0 0009 	sub.w	r0, r0, r9
 8007750:	1080      	asrs	r0, r0, #2
 8007752:	0146      	lsls	r6, r0, #5
 8007754:	6120      	str	r0, [r4, #16]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fb62 	bl	8007e20 <__hi0bits>
 800775c:	1a30      	subs	r0, r6, r0
 800775e:	f8d8 6000 	ldr.w	r6, [r8]
 8007762:	42b0      	cmp	r0, r6
 8007764:	dd63      	ble.n	800782e <__gethex+0x286>
 8007766:	1b87      	subs	r7, r0, r6
 8007768:	4639      	mov	r1, r7
 800776a:	4620      	mov	r0, r4
 800776c:	f000 fefc 	bl	8008568 <__any_on>
 8007770:	4682      	mov	sl, r0
 8007772:	b1a8      	cbz	r0, 80077a0 <__gethex+0x1f8>
 8007774:	1e7b      	subs	r3, r7, #1
 8007776:	1159      	asrs	r1, r3, #5
 8007778:	f003 021f 	and.w	r2, r3, #31
 800777c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007780:	f04f 0a01 	mov.w	sl, #1
 8007784:	fa0a f202 	lsl.w	r2, sl, r2
 8007788:	420a      	tst	r2, r1
 800778a:	d009      	beq.n	80077a0 <__gethex+0x1f8>
 800778c:	4553      	cmp	r3, sl
 800778e:	dd05      	ble.n	800779c <__gethex+0x1f4>
 8007790:	1eb9      	subs	r1, r7, #2
 8007792:	4620      	mov	r0, r4
 8007794:	f000 fee8 	bl	8008568 <__any_on>
 8007798:	2800      	cmp	r0, #0
 800779a:	d145      	bne.n	8007828 <__gethex+0x280>
 800779c:	f04f 0a02 	mov.w	sl, #2
 80077a0:	4639      	mov	r1, r7
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7ff fe98 	bl	80074d8 <rshift>
 80077a8:	443d      	add	r5, r7
 80077aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80077ae:	42ab      	cmp	r3, r5
 80077b0:	da4c      	bge.n	800784c <__gethex+0x2a4>
 80077b2:	ee18 0a10 	vmov	r0, s16
 80077b6:	4621      	mov	r1, r4
 80077b8:	f000 fa7c 	bl	8007cb4 <_Bfree>
 80077bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077be:	2300      	movs	r3, #0
 80077c0:	6013      	str	r3, [r2, #0]
 80077c2:	27a3      	movs	r7, #163	; 0xa3
 80077c4:	e785      	b.n	80076d2 <__gethex+0x12a>
 80077c6:	1e73      	subs	r3, r6, #1
 80077c8:	9a05      	ldr	r2, [sp, #20]
 80077ca:	9303      	str	r3, [sp, #12]
 80077cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d019      	beq.n	8007808 <__gethex+0x260>
 80077d4:	f1bb 0f20 	cmp.w	fp, #32
 80077d8:	d107      	bne.n	80077ea <__gethex+0x242>
 80077da:	9b02      	ldr	r3, [sp, #8]
 80077dc:	9a00      	ldr	r2, [sp, #0]
 80077de:	f843 2b04 	str.w	r2, [r3], #4
 80077e2:	9302      	str	r3, [sp, #8]
 80077e4:	2300      	movs	r3, #0
 80077e6:	9300      	str	r3, [sp, #0]
 80077e8:	469b      	mov	fp, r3
 80077ea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80077ee:	f7ff fec5 	bl	800757c <__hexdig_fun>
 80077f2:	9b00      	ldr	r3, [sp, #0]
 80077f4:	f000 000f 	and.w	r0, r0, #15
 80077f8:	fa00 f00b 	lsl.w	r0, r0, fp
 80077fc:	4303      	orrs	r3, r0
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	f10b 0b04 	add.w	fp, fp, #4
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	e00d      	b.n	8007824 <__gethex+0x27c>
 8007808:	9b03      	ldr	r3, [sp, #12]
 800780a:	9a06      	ldr	r2, [sp, #24]
 800780c:	4413      	add	r3, r2
 800780e:	42bb      	cmp	r3, r7
 8007810:	d3e0      	bcc.n	80077d4 <__gethex+0x22c>
 8007812:	4618      	mov	r0, r3
 8007814:	9901      	ldr	r1, [sp, #4]
 8007816:	9307      	str	r3, [sp, #28]
 8007818:	4652      	mov	r2, sl
 800781a:	f001 fc55 	bl	80090c8 <strncmp>
 800781e:	9b07      	ldr	r3, [sp, #28]
 8007820:	2800      	cmp	r0, #0
 8007822:	d1d7      	bne.n	80077d4 <__gethex+0x22c>
 8007824:	461e      	mov	r6, r3
 8007826:	e78b      	b.n	8007740 <__gethex+0x198>
 8007828:	f04f 0a03 	mov.w	sl, #3
 800782c:	e7b8      	b.n	80077a0 <__gethex+0x1f8>
 800782e:	da0a      	bge.n	8007846 <__gethex+0x29e>
 8007830:	1a37      	subs	r7, r6, r0
 8007832:	4621      	mov	r1, r4
 8007834:	ee18 0a10 	vmov	r0, s16
 8007838:	463a      	mov	r2, r7
 800783a:	f000 fc57 	bl	80080ec <__lshift>
 800783e:	1bed      	subs	r5, r5, r7
 8007840:	4604      	mov	r4, r0
 8007842:	f100 0914 	add.w	r9, r0, #20
 8007846:	f04f 0a00 	mov.w	sl, #0
 800784a:	e7ae      	b.n	80077aa <__gethex+0x202>
 800784c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007850:	42a8      	cmp	r0, r5
 8007852:	dd72      	ble.n	800793a <__gethex+0x392>
 8007854:	1b45      	subs	r5, r0, r5
 8007856:	42ae      	cmp	r6, r5
 8007858:	dc36      	bgt.n	80078c8 <__gethex+0x320>
 800785a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800785e:	2b02      	cmp	r3, #2
 8007860:	d02a      	beq.n	80078b8 <__gethex+0x310>
 8007862:	2b03      	cmp	r3, #3
 8007864:	d02c      	beq.n	80078c0 <__gethex+0x318>
 8007866:	2b01      	cmp	r3, #1
 8007868:	d115      	bne.n	8007896 <__gethex+0x2ee>
 800786a:	42ae      	cmp	r6, r5
 800786c:	d113      	bne.n	8007896 <__gethex+0x2ee>
 800786e:	2e01      	cmp	r6, #1
 8007870:	d10b      	bne.n	800788a <__gethex+0x2e2>
 8007872:	9a04      	ldr	r2, [sp, #16]
 8007874:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	2301      	movs	r3, #1
 800787c:	6123      	str	r3, [r4, #16]
 800787e:	f8c9 3000 	str.w	r3, [r9]
 8007882:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007884:	2762      	movs	r7, #98	; 0x62
 8007886:	601c      	str	r4, [r3, #0]
 8007888:	e723      	b.n	80076d2 <__gethex+0x12a>
 800788a:	1e71      	subs	r1, r6, #1
 800788c:	4620      	mov	r0, r4
 800788e:	f000 fe6b 	bl	8008568 <__any_on>
 8007892:	2800      	cmp	r0, #0
 8007894:	d1ed      	bne.n	8007872 <__gethex+0x2ca>
 8007896:	ee18 0a10 	vmov	r0, s16
 800789a:	4621      	mov	r1, r4
 800789c:	f000 fa0a 	bl	8007cb4 <_Bfree>
 80078a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078a2:	2300      	movs	r3, #0
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	2750      	movs	r7, #80	; 0x50
 80078a8:	e713      	b.n	80076d2 <__gethex+0x12a>
 80078aa:	bf00      	nop
 80078ac:	0800a218 	.word	0x0800a218
 80078b0:	0800a19c 	.word	0x0800a19c
 80078b4:	0800a1ad 	.word	0x0800a1ad
 80078b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1eb      	bne.n	8007896 <__gethex+0x2ee>
 80078be:	e7d8      	b.n	8007872 <__gethex+0x2ca>
 80078c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1d5      	bne.n	8007872 <__gethex+0x2ca>
 80078c6:	e7e6      	b.n	8007896 <__gethex+0x2ee>
 80078c8:	1e6f      	subs	r7, r5, #1
 80078ca:	f1ba 0f00 	cmp.w	sl, #0
 80078ce:	d131      	bne.n	8007934 <__gethex+0x38c>
 80078d0:	b127      	cbz	r7, 80078dc <__gethex+0x334>
 80078d2:	4639      	mov	r1, r7
 80078d4:	4620      	mov	r0, r4
 80078d6:	f000 fe47 	bl	8008568 <__any_on>
 80078da:	4682      	mov	sl, r0
 80078dc:	117b      	asrs	r3, r7, #5
 80078de:	2101      	movs	r1, #1
 80078e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80078e4:	f007 071f 	and.w	r7, r7, #31
 80078e8:	fa01 f707 	lsl.w	r7, r1, r7
 80078ec:	421f      	tst	r7, r3
 80078ee:	4629      	mov	r1, r5
 80078f0:	4620      	mov	r0, r4
 80078f2:	bf18      	it	ne
 80078f4:	f04a 0a02 	orrne.w	sl, sl, #2
 80078f8:	1b76      	subs	r6, r6, r5
 80078fa:	f7ff fded 	bl	80074d8 <rshift>
 80078fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007902:	2702      	movs	r7, #2
 8007904:	f1ba 0f00 	cmp.w	sl, #0
 8007908:	d048      	beq.n	800799c <__gethex+0x3f4>
 800790a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d015      	beq.n	800793e <__gethex+0x396>
 8007912:	2b03      	cmp	r3, #3
 8007914:	d017      	beq.n	8007946 <__gethex+0x39e>
 8007916:	2b01      	cmp	r3, #1
 8007918:	d109      	bne.n	800792e <__gethex+0x386>
 800791a:	f01a 0f02 	tst.w	sl, #2
 800791e:	d006      	beq.n	800792e <__gethex+0x386>
 8007920:	f8d9 0000 	ldr.w	r0, [r9]
 8007924:	ea4a 0a00 	orr.w	sl, sl, r0
 8007928:	f01a 0f01 	tst.w	sl, #1
 800792c:	d10e      	bne.n	800794c <__gethex+0x3a4>
 800792e:	f047 0710 	orr.w	r7, r7, #16
 8007932:	e033      	b.n	800799c <__gethex+0x3f4>
 8007934:	f04f 0a01 	mov.w	sl, #1
 8007938:	e7d0      	b.n	80078dc <__gethex+0x334>
 800793a:	2701      	movs	r7, #1
 800793c:	e7e2      	b.n	8007904 <__gethex+0x35c>
 800793e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007940:	f1c3 0301 	rsb	r3, r3, #1
 8007944:	9315      	str	r3, [sp, #84]	; 0x54
 8007946:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0f0      	beq.n	800792e <__gethex+0x386>
 800794c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007950:	f104 0314 	add.w	r3, r4, #20
 8007954:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007958:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800795c:	f04f 0c00 	mov.w	ip, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f853 2b04 	ldr.w	r2, [r3], #4
 8007966:	f1b2 3fff 	cmp.w	r2, #4294967295
 800796a:	d01c      	beq.n	80079a6 <__gethex+0x3fe>
 800796c:	3201      	adds	r2, #1
 800796e:	6002      	str	r2, [r0, #0]
 8007970:	2f02      	cmp	r7, #2
 8007972:	f104 0314 	add.w	r3, r4, #20
 8007976:	d13f      	bne.n	80079f8 <__gethex+0x450>
 8007978:	f8d8 2000 	ldr.w	r2, [r8]
 800797c:	3a01      	subs	r2, #1
 800797e:	42b2      	cmp	r2, r6
 8007980:	d10a      	bne.n	8007998 <__gethex+0x3f0>
 8007982:	1171      	asrs	r1, r6, #5
 8007984:	2201      	movs	r2, #1
 8007986:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800798a:	f006 061f 	and.w	r6, r6, #31
 800798e:	fa02 f606 	lsl.w	r6, r2, r6
 8007992:	421e      	tst	r6, r3
 8007994:	bf18      	it	ne
 8007996:	4617      	movne	r7, r2
 8007998:	f047 0720 	orr.w	r7, r7, #32
 800799c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800799e:	601c      	str	r4, [r3, #0]
 80079a0:	9b04      	ldr	r3, [sp, #16]
 80079a2:	601d      	str	r5, [r3, #0]
 80079a4:	e695      	b.n	80076d2 <__gethex+0x12a>
 80079a6:	4299      	cmp	r1, r3
 80079a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80079ac:	d8d8      	bhi.n	8007960 <__gethex+0x3b8>
 80079ae:	68a3      	ldr	r3, [r4, #8]
 80079b0:	459b      	cmp	fp, r3
 80079b2:	db19      	blt.n	80079e8 <__gethex+0x440>
 80079b4:	6861      	ldr	r1, [r4, #4]
 80079b6:	ee18 0a10 	vmov	r0, s16
 80079ba:	3101      	adds	r1, #1
 80079bc:	f000 f93a 	bl	8007c34 <_Balloc>
 80079c0:	4681      	mov	r9, r0
 80079c2:	b918      	cbnz	r0, 80079cc <__gethex+0x424>
 80079c4:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <__gethex+0x488>)
 80079c6:	4602      	mov	r2, r0
 80079c8:	2184      	movs	r1, #132	; 0x84
 80079ca:	e6a8      	b.n	800771e <__gethex+0x176>
 80079cc:	6922      	ldr	r2, [r4, #16]
 80079ce:	3202      	adds	r2, #2
 80079d0:	f104 010c 	add.w	r1, r4, #12
 80079d4:	0092      	lsls	r2, r2, #2
 80079d6:	300c      	adds	r0, #12
 80079d8:	f000 f91e 	bl	8007c18 <memcpy>
 80079dc:	4621      	mov	r1, r4
 80079de:	ee18 0a10 	vmov	r0, s16
 80079e2:	f000 f967 	bl	8007cb4 <_Bfree>
 80079e6:	464c      	mov	r4, r9
 80079e8:	6923      	ldr	r3, [r4, #16]
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079f0:	6122      	str	r2, [r4, #16]
 80079f2:	2201      	movs	r2, #1
 80079f4:	615a      	str	r2, [r3, #20]
 80079f6:	e7bb      	b.n	8007970 <__gethex+0x3c8>
 80079f8:	6922      	ldr	r2, [r4, #16]
 80079fa:	455a      	cmp	r2, fp
 80079fc:	dd0b      	ble.n	8007a16 <__gethex+0x46e>
 80079fe:	2101      	movs	r1, #1
 8007a00:	4620      	mov	r0, r4
 8007a02:	f7ff fd69 	bl	80074d8 <rshift>
 8007a06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a0a:	3501      	adds	r5, #1
 8007a0c:	42ab      	cmp	r3, r5
 8007a0e:	f6ff aed0 	blt.w	80077b2 <__gethex+0x20a>
 8007a12:	2701      	movs	r7, #1
 8007a14:	e7c0      	b.n	8007998 <__gethex+0x3f0>
 8007a16:	f016 061f 	ands.w	r6, r6, #31
 8007a1a:	d0fa      	beq.n	8007a12 <__gethex+0x46a>
 8007a1c:	449a      	add	sl, r3
 8007a1e:	f1c6 0620 	rsb	r6, r6, #32
 8007a22:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007a26:	f000 f9fb 	bl	8007e20 <__hi0bits>
 8007a2a:	42b0      	cmp	r0, r6
 8007a2c:	dbe7      	blt.n	80079fe <__gethex+0x456>
 8007a2e:	e7f0      	b.n	8007a12 <__gethex+0x46a>
 8007a30:	0800a19c 	.word	0x0800a19c

08007a34 <L_shift>:
 8007a34:	f1c2 0208 	rsb	r2, r2, #8
 8007a38:	0092      	lsls	r2, r2, #2
 8007a3a:	b570      	push	{r4, r5, r6, lr}
 8007a3c:	f1c2 0620 	rsb	r6, r2, #32
 8007a40:	6843      	ldr	r3, [r0, #4]
 8007a42:	6804      	ldr	r4, [r0, #0]
 8007a44:	fa03 f506 	lsl.w	r5, r3, r6
 8007a48:	432c      	orrs	r4, r5
 8007a4a:	40d3      	lsrs	r3, r2
 8007a4c:	6004      	str	r4, [r0, #0]
 8007a4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007a52:	4288      	cmp	r0, r1
 8007a54:	d3f4      	bcc.n	8007a40 <L_shift+0xc>
 8007a56:	bd70      	pop	{r4, r5, r6, pc}

08007a58 <__match>:
 8007a58:	b530      	push	{r4, r5, lr}
 8007a5a:	6803      	ldr	r3, [r0, #0]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a62:	b914      	cbnz	r4, 8007a6a <__match+0x12>
 8007a64:	6003      	str	r3, [r0, #0]
 8007a66:	2001      	movs	r0, #1
 8007a68:	bd30      	pop	{r4, r5, pc}
 8007a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a6e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007a72:	2d19      	cmp	r5, #25
 8007a74:	bf98      	it	ls
 8007a76:	3220      	addls	r2, #32
 8007a78:	42a2      	cmp	r2, r4
 8007a7a:	d0f0      	beq.n	8007a5e <__match+0x6>
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e7f3      	b.n	8007a68 <__match+0x10>

08007a80 <__hexnan>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	680b      	ldr	r3, [r1, #0]
 8007a86:	6801      	ldr	r1, [r0, #0]
 8007a88:	115e      	asrs	r6, r3, #5
 8007a8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007a8e:	f013 031f 	ands.w	r3, r3, #31
 8007a92:	b087      	sub	sp, #28
 8007a94:	bf18      	it	ne
 8007a96:	3604      	addne	r6, #4
 8007a98:	2500      	movs	r5, #0
 8007a9a:	1f37      	subs	r7, r6, #4
 8007a9c:	4682      	mov	sl, r0
 8007a9e:	4690      	mov	r8, r2
 8007aa0:	9301      	str	r3, [sp, #4]
 8007aa2:	f846 5c04 	str.w	r5, [r6, #-4]
 8007aa6:	46b9      	mov	r9, r7
 8007aa8:	463c      	mov	r4, r7
 8007aaa:	9502      	str	r5, [sp, #8]
 8007aac:	46ab      	mov	fp, r5
 8007aae:	784a      	ldrb	r2, [r1, #1]
 8007ab0:	1c4b      	adds	r3, r1, #1
 8007ab2:	9303      	str	r3, [sp, #12]
 8007ab4:	b342      	cbz	r2, 8007b08 <__hexnan+0x88>
 8007ab6:	4610      	mov	r0, r2
 8007ab8:	9105      	str	r1, [sp, #20]
 8007aba:	9204      	str	r2, [sp, #16]
 8007abc:	f7ff fd5e 	bl	800757c <__hexdig_fun>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d14f      	bne.n	8007b64 <__hexnan+0xe4>
 8007ac4:	9a04      	ldr	r2, [sp, #16]
 8007ac6:	9905      	ldr	r1, [sp, #20]
 8007ac8:	2a20      	cmp	r2, #32
 8007aca:	d818      	bhi.n	8007afe <__hexnan+0x7e>
 8007acc:	9b02      	ldr	r3, [sp, #8]
 8007ace:	459b      	cmp	fp, r3
 8007ad0:	dd13      	ble.n	8007afa <__hexnan+0x7a>
 8007ad2:	454c      	cmp	r4, r9
 8007ad4:	d206      	bcs.n	8007ae4 <__hexnan+0x64>
 8007ad6:	2d07      	cmp	r5, #7
 8007ad8:	dc04      	bgt.n	8007ae4 <__hexnan+0x64>
 8007ada:	462a      	mov	r2, r5
 8007adc:	4649      	mov	r1, r9
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f7ff ffa8 	bl	8007a34 <L_shift>
 8007ae4:	4544      	cmp	r4, r8
 8007ae6:	d950      	bls.n	8007b8a <__hexnan+0x10a>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f1a4 0904 	sub.w	r9, r4, #4
 8007aee:	f844 3c04 	str.w	r3, [r4, #-4]
 8007af2:	f8cd b008 	str.w	fp, [sp, #8]
 8007af6:	464c      	mov	r4, r9
 8007af8:	461d      	mov	r5, r3
 8007afa:	9903      	ldr	r1, [sp, #12]
 8007afc:	e7d7      	b.n	8007aae <__hexnan+0x2e>
 8007afe:	2a29      	cmp	r2, #41	; 0x29
 8007b00:	d156      	bne.n	8007bb0 <__hexnan+0x130>
 8007b02:	3102      	adds	r1, #2
 8007b04:	f8ca 1000 	str.w	r1, [sl]
 8007b08:	f1bb 0f00 	cmp.w	fp, #0
 8007b0c:	d050      	beq.n	8007bb0 <__hexnan+0x130>
 8007b0e:	454c      	cmp	r4, r9
 8007b10:	d206      	bcs.n	8007b20 <__hexnan+0xa0>
 8007b12:	2d07      	cmp	r5, #7
 8007b14:	dc04      	bgt.n	8007b20 <__hexnan+0xa0>
 8007b16:	462a      	mov	r2, r5
 8007b18:	4649      	mov	r1, r9
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	f7ff ff8a 	bl	8007a34 <L_shift>
 8007b20:	4544      	cmp	r4, r8
 8007b22:	d934      	bls.n	8007b8e <__hexnan+0x10e>
 8007b24:	f1a8 0204 	sub.w	r2, r8, #4
 8007b28:	4623      	mov	r3, r4
 8007b2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007b2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007b32:	429f      	cmp	r7, r3
 8007b34:	d2f9      	bcs.n	8007b2a <__hexnan+0xaa>
 8007b36:	1b3b      	subs	r3, r7, r4
 8007b38:	f023 0303 	bic.w	r3, r3, #3
 8007b3c:	3304      	adds	r3, #4
 8007b3e:	3401      	adds	r4, #1
 8007b40:	3e03      	subs	r6, #3
 8007b42:	42b4      	cmp	r4, r6
 8007b44:	bf88      	it	hi
 8007b46:	2304      	movhi	r3, #4
 8007b48:	4443      	add	r3, r8
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f843 2b04 	str.w	r2, [r3], #4
 8007b50:	429f      	cmp	r7, r3
 8007b52:	d2fb      	bcs.n	8007b4c <__hexnan+0xcc>
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	b91b      	cbnz	r3, 8007b60 <__hexnan+0xe0>
 8007b58:	4547      	cmp	r7, r8
 8007b5a:	d127      	bne.n	8007bac <__hexnan+0x12c>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	2005      	movs	r0, #5
 8007b62:	e026      	b.n	8007bb2 <__hexnan+0x132>
 8007b64:	3501      	adds	r5, #1
 8007b66:	2d08      	cmp	r5, #8
 8007b68:	f10b 0b01 	add.w	fp, fp, #1
 8007b6c:	dd06      	ble.n	8007b7c <__hexnan+0xfc>
 8007b6e:	4544      	cmp	r4, r8
 8007b70:	d9c3      	bls.n	8007afa <__hexnan+0x7a>
 8007b72:	2300      	movs	r3, #0
 8007b74:	f844 3c04 	str.w	r3, [r4, #-4]
 8007b78:	2501      	movs	r5, #1
 8007b7a:	3c04      	subs	r4, #4
 8007b7c:	6822      	ldr	r2, [r4, #0]
 8007b7e:	f000 000f 	and.w	r0, r0, #15
 8007b82:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007b86:	6022      	str	r2, [r4, #0]
 8007b88:	e7b7      	b.n	8007afa <__hexnan+0x7a>
 8007b8a:	2508      	movs	r5, #8
 8007b8c:	e7b5      	b.n	8007afa <__hexnan+0x7a>
 8007b8e:	9b01      	ldr	r3, [sp, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0df      	beq.n	8007b54 <__hexnan+0xd4>
 8007b94:	f04f 32ff 	mov.w	r2, #4294967295
 8007b98:	f1c3 0320 	rsb	r3, r3, #32
 8007b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ba4:	401a      	ands	r2, r3
 8007ba6:	f846 2c04 	str.w	r2, [r6, #-4]
 8007baa:	e7d3      	b.n	8007b54 <__hexnan+0xd4>
 8007bac:	3f04      	subs	r7, #4
 8007bae:	e7d1      	b.n	8007b54 <__hexnan+0xd4>
 8007bb0:	2004      	movs	r0, #4
 8007bb2:	b007      	add	sp, #28
 8007bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007bb8 <_localeconv_r>:
 8007bb8:	4800      	ldr	r0, [pc, #0]	; (8007bbc <_localeconv_r+0x4>)
 8007bba:	4770      	bx	lr
 8007bbc:	20000188 	.word	0x20000188

08007bc0 <_lseek_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	4d07      	ldr	r5, [pc, #28]	; (8007be0 <_lseek_r+0x20>)
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	4608      	mov	r0, r1
 8007bc8:	4611      	mov	r1, r2
 8007bca:	2200      	movs	r2, #0
 8007bcc:	602a      	str	r2, [r5, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f7fa fb8c 	bl	80022ec <_lseek>
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d102      	bne.n	8007bde <_lseek_r+0x1e>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	b103      	cbz	r3, 8007bde <_lseek_r+0x1e>
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	20007f08 	.word	0x20007f08

08007be4 <malloc>:
 8007be4:	4b02      	ldr	r3, [pc, #8]	; (8007bf0 <malloc+0xc>)
 8007be6:	4601      	mov	r1, r0
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	f000 bd3d 	b.w	8008668 <_malloc_r>
 8007bee:	bf00      	nop
 8007bf0:	20000030 	.word	0x20000030

08007bf4 <__ascii_mbtowc>:
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	b901      	cbnz	r1, 8007bfa <__ascii_mbtowc+0x6>
 8007bf8:	a901      	add	r1, sp, #4
 8007bfa:	b142      	cbz	r2, 8007c0e <__ascii_mbtowc+0x1a>
 8007bfc:	b14b      	cbz	r3, 8007c12 <__ascii_mbtowc+0x1e>
 8007bfe:	7813      	ldrb	r3, [r2, #0]
 8007c00:	600b      	str	r3, [r1, #0]
 8007c02:	7812      	ldrb	r2, [r2, #0]
 8007c04:	1e10      	subs	r0, r2, #0
 8007c06:	bf18      	it	ne
 8007c08:	2001      	movne	r0, #1
 8007c0a:	b002      	add	sp, #8
 8007c0c:	4770      	bx	lr
 8007c0e:	4610      	mov	r0, r2
 8007c10:	e7fb      	b.n	8007c0a <__ascii_mbtowc+0x16>
 8007c12:	f06f 0001 	mvn.w	r0, #1
 8007c16:	e7f8      	b.n	8007c0a <__ascii_mbtowc+0x16>

08007c18 <memcpy>:
 8007c18:	440a      	add	r2, r1
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c20:	d100      	bne.n	8007c24 <memcpy+0xc>
 8007c22:	4770      	bx	lr
 8007c24:	b510      	push	{r4, lr}
 8007c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c2e:	4291      	cmp	r1, r2
 8007c30:	d1f9      	bne.n	8007c26 <memcpy+0xe>
 8007c32:	bd10      	pop	{r4, pc}

08007c34 <_Balloc>:
 8007c34:	b570      	push	{r4, r5, r6, lr}
 8007c36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c38:	4604      	mov	r4, r0
 8007c3a:	460d      	mov	r5, r1
 8007c3c:	b976      	cbnz	r6, 8007c5c <_Balloc+0x28>
 8007c3e:	2010      	movs	r0, #16
 8007c40:	f7ff ffd0 	bl	8007be4 <malloc>
 8007c44:	4602      	mov	r2, r0
 8007c46:	6260      	str	r0, [r4, #36]	; 0x24
 8007c48:	b920      	cbnz	r0, 8007c54 <_Balloc+0x20>
 8007c4a:	4b18      	ldr	r3, [pc, #96]	; (8007cac <_Balloc+0x78>)
 8007c4c:	4818      	ldr	r0, [pc, #96]	; (8007cb0 <_Balloc+0x7c>)
 8007c4e:	2166      	movs	r1, #102	; 0x66
 8007c50:	f001 fb12 	bl	8009278 <__assert_func>
 8007c54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c58:	6006      	str	r6, [r0, #0]
 8007c5a:	60c6      	str	r6, [r0, #12]
 8007c5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c5e:	68f3      	ldr	r3, [r6, #12]
 8007c60:	b183      	cbz	r3, 8007c84 <_Balloc+0x50>
 8007c62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c6a:	b9b8      	cbnz	r0, 8007c9c <_Balloc+0x68>
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	fa01 f605 	lsl.w	r6, r1, r5
 8007c72:	1d72      	adds	r2, r6, #5
 8007c74:	0092      	lsls	r2, r2, #2
 8007c76:	4620      	mov	r0, r4
 8007c78:	f000 fc97 	bl	80085aa <_calloc_r>
 8007c7c:	b160      	cbz	r0, 8007c98 <_Balloc+0x64>
 8007c7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c82:	e00e      	b.n	8007ca2 <_Balloc+0x6e>
 8007c84:	2221      	movs	r2, #33	; 0x21
 8007c86:	2104      	movs	r1, #4
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 fc8e 	bl	80085aa <_calloc_r>
 8007c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c90:	60f0      	str	r0, [r6, #12]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1e4      	bne.n	8007c62 <_Balloc+0x2e>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	bd70      	pop	{r4, r5, r6, pc}
 8007c9c:	6802      	ldr	r2, [r0, #0]
 8007c9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ca8:	e7f7      	b.n	8007c9a <_Balloc+0x66>
 8007caa:	bf00      	nop
 8007cac:	0800a126 	.word	0x0800a126
 8007cb0:	0800a22c 	.word	0x0800a22c

08007cb4 <_Bfree>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cb8:	4605      	mov	r5, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	b976      	cbnz	r6, 8007cdc <_Bfree+0x28>
 8007cbe:	2010      	movs	r0, #16
 8007cc0:	f7ff ff90 	bl	8007be4 <malloc>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	6268      	str	r0, [r5, #36]	; 0x24
 8007cc8:	b920      	cbnz	r0, 8007cd4 <_Bfree+0x20>
 8007cca:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <_Bfree+0x3c>)
 8007ccc:	4809      	ldr	r0, [pc, #36]	; (8007cf4 <_Bfree+0x40>)
 8007cce:	218a      	movs	r1, #138	; 0x8a
 8007cd0:	f001 fad2 	bl	8009278 <__assert_func>
 8007cd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cd8:	6006      	str	r6, [r0, #0]
 8007cda:	60c6      	str	r6, [r0, #12]
 8007cdc:	b13c      	cbz	r4, 8007cee <_Bfree+0x3a>
 8007cde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ce0:	6862      	ldr	r2, [r4, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ce8:	6021      	str	r1, [r4, #0]
 8007cea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cee:	bd70      	pop	{r4, r5, r6, pc}
 8007cf0:	0800a126 	.word	0x0800a126
 8007cf4:	0800a22c 	.word	0x0800a22c

08007cf8 <__multadd>:
 8007cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfc:	690e      	ldr	r6, [r1, #16]
 8007cfe:	4607      	mov	r7, r0
 8007d00:	4698      	mov	r8, r3
 8007d02:	460c      	mov	r4, r1
 8007d04:	f101 0014 	add.w	r0, r1, #20
 8007d08:	2300      	movs	r3, #0
 8007d0a:	6805      	ldr	r5, [r0, #0]
 8007d0c:	b2a9      	uxth	r1, r5
 8007d0e:	fb02 8101 	mla	r1, r2, r1, r8
 8007d12:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007d16:	0c2d      	lsrs	r5, r5, #16
 8007d18:	fb02 c505 	mla	r5, r2, r5, ip
 8007d1c:	b289      	uxth	r1, r1
 8007d1e:	3301      	adds	r3, #1
 8007d20:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007d24:	429e      	cmp	r6, r3
 8007d26:	f840 1b04 	str.w	r1, [r0], #4
 8007d2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007d2e:	dcec      	bgt.n	8007d0a <__multadd+0x12>
 8007d30:	f1b8 0f00 	cmp.w	r8, #0
 8007d34:	d022      	beq.n	8007d7c <__multadd+0x84>
 8007d36:	68a3      	ldr	r3, [r4, #8]
 8007d38:	42b3      	cmp	r3, r6
 8007d3a:	dc19      	bgt.n	8007d70 <__multadd+0x78>
 8007d3c:	6861      	ldr	r1, [r4, #4]
 8007d3e:	4638      	mov	r0, r7
 8007d40:	3101      	adds	r1, #1
 8007d42:	f7ff ff77 	bl	8007c34 <_Balloc>
 8007d46:	4605      	mov	r5, r0
 8007d48:	b928      	cbnz	r0, 8007d56 <__multadd+0x5e>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <__multadd+0x8c>)
 8007d4e:	480e      	ldr	r0, [pc, #56]	; (8007d88 <__multadd+0x90>)
 8007d50:	21b5      	movs	r1, #181	; 0xb5
 8007d52:	f001 fa91 	bl	8009278 <__assert_func>
 8007d56:	6922      	ldr	r2, [r4, #16]
 8007d58:	3202      	adds	r2, #2
 8007d5a:	f104 010c 	add.w	r1, r4, #12
 8007d5e:	0092      	lsls	r2, r2, #2
 8007d60:	300c      	adds	r0, #12
 8007d62:	f7ff ff59 	bl	8007c18 <memcpy>
 8007d66:	4621      	mov	r1, r4
 8007d68:	4638      	mov	r0, r7
 8007d6a:	f7ff ffa3 	bl	8007cb4 <_Bfree>
 8007d6e:	462c      	mov	r4, r5
 8007d70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007d74:	3601      	adds	r6, #1
 8007d76:	f8c3 8014 	str.w	r8, [r3, #20]
 8007d7a:	6126      	str	r6, [r4, #16]
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d82:	bf00      	nop
 8007d84:	0800a19c 	.word	0x0800a19c
 8007d88:	0800a22c 	.word	0x0800a22c

08007d8c <__s2b>:
 8007d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d90:	460c      	mov	r4, r1
 8007d92:	4615      	mov	r5, r2
 8007d94:	461f      	mov	r7, r3
 8007d96:	2209      	movs	r2, #9
 8007d98:	3308      	adds	r3, #8
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007da0:	2100      	movs	r1, #0
 8007da2:	2201      	movs	r2, #1
 8007da4:	429a      	cmp	r2, r3
 8007da6:	db09      	blt.n	8007dbc <__s2b+0x30>
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7ff ff43 	bl	8007c34 <_Balloc>
 8007dae:	b940      	cbnz	r0, 8007dc2 <__s2b+0x36>
 8007db0:	4602      	mov	r2, r0
 8007db2:	4b19      	ldr	r3, [pc, #100]	; (8007e18 <__s2b+0x8c>)
 8007db4:	4819      	ldr	r0, [pc, #100]	; (8007e1c <__s2b+0x90>)
 8007db6:	21ce      	movs	r1, #206	; 0xce
 8007db8:	f001 fa5e 	bl	8009278 <__assert_func>
 8007dbc:	0052      	lsls	r2, r2, #1
 8007dbe:	3101      	adds	r1, #1
 8007dc0:	e7f0      	b.n	8007da4 <__s2b+0x18>
 8007dc2:	9b08      	ldr	r3, [sp, #32]
 8007dc4:	6143      	str	r3, [r0, #20]
 8007dc6:	2d09      	cmp	r5, #9
 8007dc8:	f04f 0301 	mov.w	r3, #1
 8007dcc:	6103      	str	r3, [r0, #16]
 8007dce:	dd16      	ble.n	8007dfe <__s2b+0x72>
 8007dd0:	f104 0909 	add.w	r9, r4, #9
 8007dd4:	46c8      	mov	r8, r9
 8007dd6:	442c      	add	r4, r5
 8007dd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007ddc:	4601      	mov	r1, r0
 8007dde:	3b30      	subs	r3, #48	; 0x30
 8007de0:	220a      	movs	r2, #10
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7ff ff88 	bl	8007cf8 <__multadd>
 8007de8:	45a0      	cmp	r8, r4
 8007dea:	d1f5      	bne.n	8007dd8 <__s2b+0x4c>
 8007dec:	f1a5 0408 	sub.w	r4, r5, #8
 8007df0:	444c      	add	r4, r9
 8007df2:	1b2d      	subs	r5, r5, r4
 8007df4:	1963      	adds	r3, r4, r5
 8007df6:	42bb      	cmp	r3, r7
 8007df8:	db04      	blt.n	8007e04 <__s2b+0x78>
 8007dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dfe:	340a      	adds	r4, #10
 8007e00:	2509      	movs	r5, #9
 8007e02:	e7f6      	b.n	8007df2 <__s2b+0x66>
 8007e04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e08:	4601      	mov	r1, r0
 8007e0a:	3b30      	subs	r3, #48	; 0x30
 8007e0c:	220a      	movs	r2, #10
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7ff ff72 	bl	8007cf8 <__multadd>
 8007e14:	e7ee      	b.n	8007df4 <__s2b+0x68>
 8007e16:	bf00      	nop
 8007e18:	0800a19c 	.word	0x0800a19c
 8007e1c:	0800a22c 	.word	0x0800a22c

08007e20 <__hi0bits>:
 8007e20:	0c03      	lsrs	r3, r0, #16
 8007e22:	041b      	lsls	r3, r3, #16
 8007e24:	b9d3      	cbnz	r3, 8007e5c <__hi0bits+0x3c>
 8007e26:	0400      	lsls	r0, r0, #16
 8007e28:	2310      	movs	r3, #16
 8007e2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e2e:	bf04      	itt	eq
 8007e30:	0200      	lsleq	r0, r0, #8
 8007e32:	3308      	addeq	r3, #8
 8007e34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007e38:	bf04      	itt	eq
 8007e3a:	0100      	lsleq	r0, r0, #4
 8007e3c:	3304      	addeq	r3, #4
 8007e3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e42:	bf04      	itt	eq
 8007e44:	0080      	lsleq	r0, r0, #2
 8007e46:	3302      	addeq	r3, #2
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	db05      	blt.n	8007e58 <__hi0bits+0x38>
 8007e4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e50:	f103 0301 	add.w	r3, r3, #1
 8007e54:	bf08      	it	eq
 8007e56:	2320      	moveq	r3, #32
 8007e58:	4618      	mov	r0, r3
 8007e5a:	4770      	bx	lr
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e7e4      	b.n	8007e2a <__hi0bits+0xa>

08007e60 <__lo0bits>:
 8007e60:	6803      	ldr	r3, [r0, #0]
 8007e62:	f013 0207 	ands.w	r2, r3, #7
 8007e66:	4601      	mov	r1, r0
 8007e68:	d00b      	beq.n	8007e82 <__lo0bits+0x22>
 8007e6a:	07da      	lsls	r2, r3, #31
 8007e6c:	d424      	bmi.n	8007eb8 <__lo0bits+0x58>
 8007e6e:	0798      	lsls	r0, r3, #30
 8007e70:	bf49      	itett	mi
 8007e72:	085b      	lsrmi	r3, r3, #1
 8007e74:	089b      	lsrpl	r3, r3, #2
 8007e76:	2001      	movmi	r0, #1
 8007e78:	600b      	strmi	r3, [r1, #0]
 8007e7a:	bf5c      	itt	pl
 8007e7c:	600b      	strpl	r3, [r1, #0]
 8007e7e:	2002      	movpl	r0, #2
 8007e80:	4770      	bx	lr
 8007e82:	b298      	uxth	r0, r3
 8007e84:	b9b0      	cbnz	r0, 8007eb4 <__lo0bits+0x54>
 8007e86:	0c1b      	lsrs	r3, r3, #16
 8007e88:	2010      	movs	r0, #16
 8007e8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007e8e:	bf04      	itt	eq
 8007e90:	0a1b      	lsreq	r3, r3, #8
 8007e92:	3008      	addeq	r0, #8
 8007e94:	071a      	lsls	r2, r3, #28
 8007e96:	bf04      	itt	eq
 8007e98:	091b      	lsreq	r3, r3, #4
 8007e9a:	3004      	addeq	r0, #4
 8007e9c:	079a      	lsls	r2, r3, #30
 8007e9e:	bf04      	itt	eq
 8007ea0:	089b      	lsreq	r3, r3, #2
 8007ea2:	3002      	addeq	r0, #2
 8007ea4:	07da      	lsls	r2, r3, #31
 8007ea6:	d403      	bmi.n	8007eb0 <__lo0bits+0x50>
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	f100 0001 	add.w	r0, r0, #1
 8007eae:	d005      	beq.n	8007ebc <__lo0bits+0x5c>
 8007eb0:	600b      	str	r3, [r1, #0]
 8007eb2:	4770      	bx	lr
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	e7e8      	b.n	8007e8a <__lo0bits+0x2a>
 8007eb8:	2000      	movs	r0, #0
 8007eba:	4770      	bx	lr
 8007ebc:	2020      	movs	r0, #32
 8007ebe:	4770      	bx	lr

08007ec0 <__i2b>:
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	f7ff feb5 	bl	8007c34 <_Balloc>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	b928      	cbnz	r0, 8007eda <__i2b+0x1a>
 8007ece:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <__i2b+0x24>)
 8007ed0:	4805      	ldr	r0, [pc, #20]	; (8007ee8 <__i2b+0x28>)
 8007ed2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ed6:	f001 f9cf 	bl	8009278 <__assert_func>
 8007eda:	2301      	movs	r3, #1
 8007edc:	6144      	str	r4, [r0, #20]
 8007ede:	6103      	str	r3, [r0, #16]
 8007ee0:	bd10      	pop	{r4, pc}
 8007ee2:	bf00      	nop
 8007ee4:	0800a19c 	.word	0x0800a19c
 8007ee8:	0800a22c 	.word	0x0800a22c

08007eec <__multiply>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	690a      	ldr	r2, [r1, #16]
 8007ef4:	6923      	ldr	r3, [r4, #16]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	bfb8      	it	lt
 8007efa:	460b      	movlt	r3, r1
 8007efc:	460d      	mov	r5, r1
 8007efe:	bfbc      	itt	lt
 8007f00:	4625      	movlt	r5, r4
 8007f02:	461c      	movlt	r4, r3
 8007f04:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007f08:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007f0c:	68ab      	ldr	r3, [r5, #8]
 8007f0e:	6869      	ldr	r1, [r5, #4]
 8007f10:	eb0a 0709 	add.w	r7, sl, r9
 8007f14:	42bb      	cmp	r3, r7
 8007f16:	b085      	sub	sp, #20
 8007f18:	bfb8      	it	lt
 8007f1a:	3101      	addlt	r1, #1
 8007f1c:	f7ff fe8a 	bl	8007c34 <_Balloc>
 8007f20:	b930      	cbnz	r0, 8007f30 <__multiply+0x44>
 8007f22:	4602      	mov	r2, r0
 8007f24:	4b42      	ldr	r3, [pc, #264]	; (8008030 <__multiply+0x144>)
 8007f26:	4843      	ldr	r0, [pc, #268]	; (8008034 <__multiply+0x148>)
 8007f28:	f240 115d 	movw	r1, #349	; 0x15d
 8007f2c:	f001 f9a4 	bl	8009278 <__assert_func>
 8007f30:	f100 0614 	add.w	r6, r0, #20
 8007f34:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007f38:	4633      	mov	r3, r6
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4543      	cmp	r3, r8
 8007f3e:	d31e      	bcc.n	8007f7e <__multiply+0x92>
 8007f40:	f105 0c14 	add.w	ip, r5, #20
 8007f44:	f104 0314 	add.w	r3, r4, #20
 8007f48:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007f4c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007f50:	9202      	str	r2, [sp, #8]
 8007f52:	ebac 0205 	sub.w	r2, ip, r5
 8007f56:	3a15      	subs	r2, #21
 8007f58:	f022 0203 	bic.w	r2, r2, #3
 8007f5c:	3204      	adds	r2, #4
 8007f5e:	f105 0115 	add.w	r1, r5, #21
 8007f62:	458c      	cmp	ip, r1
 8007f64:	bf38      	it	cc
 8007f66:	2204      	movcc	r2, #4
 8007f68:	9201      	str	r2, [sp, #4]
 8007f6a:	9a02      	ldr	r2, [sp, #8]
 8007f6c:	9303      	str	r3, [sp, #12]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d808      	bhi.n	8007f84 <__multiply+0x98>
 8007f72:	2f00      	cmp	r7, #0
 8007f74:	dc55      	bgt.n	8008022 <__multiply+0x136>
 8007f76:	6107      	str	r7, [r0, #16]
 8007f78:	b005      	add	sp, #20
 8007f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f7e:	f843 2b04 	str.w	r2, [r3], #4
 8007f82:	e7db      	b.n	8007f3c <__multiply+0x50>
 8007f84:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f88:	f1ba 0f00 	cmp.w	sl, #0
 8007f8c:	d020      	beq.n	8007fd0 <__multiply+0xe4>
 8007f8e:	f105 0e14 	add.w	lr, r5, #20
 8007f92:	46b1      	mov	r9, r6
 8007f94:	2200      	movs	r2, #0
 8007f96:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007f9a:	f8d9 b000 	ldr.w	fp, [r9]
 8007f9e:	b2a1      	uxth	r1, r4
 8007fa0:	fa1f fb8b 	uxth.w	fp, fp
 8007fa4:	fb0a b101 	mla	r1, sl, r1, fp
 8007fa8:	4411      	add	r1, r2
 8007faa:	f8d9 2000 	ldr.w	r2, [r9]
 8007fae:	0c24      	lsrs	r4, r4, #16
 8007fb0:	0c12      	lsrs	r2, r2, #16
 8007fb2:	fb0a 2404 	mla	r4, sl, r4, r2
 8007fb6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007fba:	b289      	uxth	r1, r1
 8007fbc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007fc0:	45f4      	cmp	ip, lr
 8007fc2:	f849 1b04 	str.w	r1, [r9], #4
 8007fc6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007fca:	d8e4      	bhi.n	8007f96 <__multiply+0xaa>
 8007fcc:	9901      	ldr	r1, [sp, #4]
 8007fce:	5072      	str	r2, [r6, r1]
 8007fd0:	9a03      	ldr	r2, [sp, #12]
 8007fd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	f1b9 0f00 	cmp.w	r9, #0
 8007fdc:	d01f      	beq.n	800801e <__multiply+0x132>
 8007fde:	6834      	ldr	r4, [r6, #0]
 8007fe0:	f105 0114 	add.w	r1, r5, #20
 8007fe4:	46b6      	mov	lr, r6
 8007fe6:	f04f 0a00 	mov.w	sl, #0
 8007fea:	880a      	ldrh	r2, [r1, #0]
 8007fec:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007ff0:	fb09 b202 	mla	r2, r9, r2, fp
 8007ff4:	4492      	add	sl, r2
 8007ff6:	b2a4      	uxth	r4, r4
 8007ff8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007ffc:	f84e 4b04 	str.w	r4, [lr], #4
 8008000:	f851 4b04 	ldr.w	r4, [r1], #4
 8008004:	f8be 2000 	ldrh.w	r2, [lr]
 8008008:	0c24      	lsrs	r4, r4, #16
 800800a:	fb09 2404 	mla	r4, r9, r4, r2
 800800e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008012:	458c      	cmp	ip, r1
 8008014:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008018:	d8e7      	bhi.n	8007fea <__multiply+0xfe>
 800801a:	9a01      	ldr	r2, [sp, #4]
 800801c:	50b4      	str	r4, [r6, r2]
 800801e:	3604      	adds	r6, #4
 8008020:	e7a3      	b.n	8007f6a <__multiply+0x7e>
 8008022:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1a5      	bne.n	8007f76 <__multiply+0x8a>
 800802a:	3f01      	subs	r7, #1
 800802c:	e7a1      	b.n	8007f72 <__multiply+0x86>
 800802e:	bf00      	nop
 8008030:	0800a19c 	.word	0x0800a19c
 8008034:	0800a22c 	.word	0x0800a22c

08008038 <__pow5mult>:
 8008038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800803c:	4615      	mov	r5, r2
 800803e:	f012 0203 	ands.w	r2, r2, #3
 8008042:	4606      	mov	r6, r0
 8008044:	460f      	mov	r7, r1
 8008046:	d007      	beq.n	8008058 <__pow5mult+0x20>
 8008048:	4c25      	ldr	r4, [pc, #148]	; (80080e0 <__pow5mult+0xa8>)
 800804a:	3a01      	subs	r2, #1
 800804c:	2300      	movs	r3, #0
 800804e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008052:	f7ff fe51 	bl	8007cf8 <__multadd>
 8008056:	4607      	mov	r7, r0
 8008058:	10ad      	asrs	r5, r5, #2
 800805a:	d03d      	beq.n	80080d8 <__pow5mult+0xa0>
 800805c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800805e:	b97c      	cbnz	r4, 8008080 <__pow5mult+0x48>
 8008060:	2010      	movs	r0, #16
 8008062:	f7ff fdbf 	bl	8007be4 <malloc>
 8008066:	4602      	mov	r2, r0
 8008068:	6270      	str	r0, [r6, #36]	; 0x24
 800806a:	b928      	cbnz	r0, 8008078 <__pow5mult+0x40>
 800806c:	4b1d      	ldr	r3, [pc, #116]	; (80080e4 <__pow5mult+0xac>)
 800806e:	481e      	ldr	r0, [pc, #120]	; (80080e8 <__pow5mult+0xb0>)
 8008070:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008074:	f001 f900 	bl	8009278 <__assert_func>
 8008078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800807c:	6004      	str	r4, [r0, #0]
 800807e:	60c4      	str	r4, [r0, #12]
 8008080:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008088:	b94c      	cbnz	r4, 800809e <__pow5mult+0x66>
 800808a:	f240 2171 	movw	r1, #625	; 0x271
 800808e:	4630      	mov	r0, r6
 8008090:	f7ff ff16 	bl	8007ec0 <__i2b>
 8008094:	2300      	movs	r3, #0
 8008096:	f8c8 0008 	str.w	r0, [r8, #8]
 800809a:	4604      	mov	r4, r0
 800809c:	6003      	str	r3, [r0, #0]
 800809e:	f04f 0900 	mov.w	r9, #0
 80080a2:	07eb      	lsls	r3, r5, #31
 80080a4:	d50a      	bpl.n	80080bc <__pow5mult+0x84>
 80080a6:	4639      	mov	r1, r7
 80080a8:	4622      	mov	r2, r4
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff ff1e 	bl	8007eec <__multiply>
 80080b0:	4639      	mov	r1, r7
 80080b2:	4680      	mov	r8, r0
 80080b4:	4630      	mov	r0, r6
 80080b6:	f7ff fdfd 	bl	8007cb4 <_Bfree>
 80080ba:	4647      	mov	r7, r8
 80080bc:	106d      	asrs	r5, r5, #1
 80080be:	d00b      	beq.n	80080d8 <__pow5mult+0xa0>
 80080c0:	6820      	ldr	r0, [r4, #0]
 80080c2:	b938      	cbnz	r0, 80080d4 <__pow5mult+0x9c>
 80080c4:	4622      	mov	r2, r4
 80080c6:	4621      	mov	r1, r4
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7ff ff0f 	bl	8007eec <__multiply>
 80080ce:	6020      	str	r0, [r4, #0]
 80080d0:	f8c0 9000 	str.w	r9, [r0]
 80080d4:	4604      	mov	r4, r0
 80080d6:	e7e4      	b.n	80080a2 <__pow5mult+0x6a>
 80080d8:	4638      	mov	r0, r7
 80080da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080de:	bf00      	nop
 80080e0:	0800a380 	.word	0x0800a380
 80080e4:	0800a126 	.word	0x0800a126
 80080e8:	0800a22c 	.word	0x0800a22c

080080ec <__lshift>:
 80080ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f0:	460c      	mov	r4, r1
 80080f2:	6849      	ldr	r1, [r1, #4]
 80080f4:	6923      	ldr	r3, [r4, #16]
 80080f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080fa:	68a3      	ldr	r3, [r4, #8]
 80080fc:	4607      	mov	r7, r0
 80080fe:	4691      	mov	r9, r2
 8008100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008104:	f108 0601 	add.w	r6, r8, #1
 8008108:	42b3      	cmp	r3, r6
 800810a:	db0b      	blt.n	8008124 <__lshift+0x38>
 800810c:	4638      	mov	r0, r7
 800810e:	f7ff fd91 	bl	8007c34 <_Balloc>
 8008112:	4605      	mov	r5, r0
 8008114:	b948      	cbnz	r0, 800812a <__lshift+0x3e>
 8008116:	4602      	mov	r2, r0
 8008118:	4b28      	ldr	r3, [pc, #160]	; (80081bc <__lshift+0xd0>)
 800811a:	4829      	ldr	r0, [pc, #164]	; (80081c0 <__lshift+0xd4>)
 800811c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008120:	f001 f8aa 	bl	8009278 <__assert_func>
 8008124:	3101      	adds	r1, #1
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	e7ee      	b.n	8008108 <__lshift+0x1c>
 800812a:	2300      	movs	r3, #0
 800812c:	f100 0114 	add.w	r1, r0, #20
 8008130:	f100 0210 	add.w	r2, r0, #16
 8008134:	4618      	mov	r0, r3
 8008136:	4553      	cmp	r3, sl
 8008138:	db33      	blt.n	80081a2 <__lshift+0xb6>
 800813a:	6920      	ldr	r0, [r4, #16]
 800813c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008140:	f104 0314 	add.w	r3, r4, #20
 8008144:	f019 091f 	ands.w	r9, r9, #31
 8008148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800814c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008150:	d02b      	beq.n	80081aa <__lshift+0xbe>
 8008152:	f1c9 0e20 	rsb	lr, r9, #32
 8008156:	468a      	mov	sl, r1
 8008158:	2200      	movs	r2, #0
 800815a:	6818      	ldr	r0, [r3, #0]
 800815c:	fa00 f009 	lsl.w	r0, r0, r9
 8008160:	4302      	orrs	r2, r0
 8008162:	f84a 2b04 	str.w	r2, [sl], #4
 8008166:	f853 2b04 	ldr.w	r2, [r3], #4
 800816a:	459c      	cmp	ip, r3
 800816c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008170:	d8f3      	bhi.n	800815a <__lshift+0x6e>
 8008172:	ebac 0304 	sub.w	r3, ip, r4
 8008176:	3b15      	subs	r3, #21
 8008178:	f023 0303 	bic.w	r3, r3, #3
 800817c:	3304      	adds	r3, #4
 800817e:	f104 0015 	add.w	r0, r4, #21
 8008182:	4584      	cmp	ip, r0
 8008184:	bf38      	it	cc
 8008186:	2304      	movcc	r3, #4
 8008188:	50ca      	str	r2, [r1, r3]
 800818a:	b10a      	cbz	r2, 8008190 <__lshift+0xa4>
 800818c:	f108 0602 	add.w	r6, r8, #2
 8008190:	3e01      	subs	r6, #1
 8008192:	4638      	mov	r0, r7
 8008194:	612e      	str	r6, [r5, #16]
 8008196:	4621      	mov	r1, r4
 8008198:	f7ff fd8c 	bl	8007cb4 <_Bfree>
 800819c:	4628      	mov	r0, r5
 800819e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80081a6:	3301      	adds	r3, #1
 80081a8:	e7c5      	b.n	8008136 <__lshift+0x4a>
 80081aa:	3904      	subs	r1, #4
 80081ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80081b4:	459c      	cmp	ip, r3
 80081b6:	d8f9      	bhi.n	80081ac <__lshift+0xc0>
 80081b8:	e7ea      	b.n	8008190 <__lshift+0xa4>
 80081ba:	bf00      	nop
 80081bc:	0800a19c 	.word	0x0800a19c
 80081c0:	0800a22c 	.word	0x0800a22c

080081c4 <__mcmp>:
 80081c4:	b530      	push	{r4, r5, lr}
 80081c6:	6902      	ldr	r2, [r0, #16]
 80081c8:	690c      	ldr	r4, [r1, #16]
 80081ca:	1b12      	subs	r2, r2, r4
 80081cc:	d10e      	bne.n	80081ec <__mcmp+0x28>
 80081ce:	f100 0314 	add.w	r3, r0, #20
 80081d2:	3114      	adds	r1, #20
 80081d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80081d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80081dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80081e4:	42a5      	cmp	r5, r4
 80081e6:	d003      	beq.n	80081f0 <__mcmp+0x2c>
 80081e8:	d305      	bcc.n	80081f6 <__mcmp+0x32>
 80081ea:	2201      	movs	r2, #1
 80081ec:	4610      	mov	r0, r2
 80081ee:	bd30      	pop	{r4, r5, pc}
 80081f0:	4283      	cmp	r3, r0
 80081f2:	d3f3      	bcc.n	80081dc <__mcmp+0x18>
 80081f4:	e7fa      	b.n	80081ec <__mcmp+0x28>
 80081f6:	f04f 32ff 	mov.w	r2, #4294967295
 80081fa:	e7f7      	b.n	80081ec <__mcmp+0x28>

080081fc <__mdiff>:
 80081fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008200:	460c      	mov	r4, r1
 8008202:	4606      	mov	r6, r0
 8008204:	4611      	mov	r1, r2
 8008206:	4620      	mov	r0, r4
 8008208:	4617      	mov	r7, r2
 800820a:	f7ff ffdb 	bl	80081c4 <__mcmp>
 800820e:	1e05      	subs	r5, r0, #0
 8008210:	d110      	bne.n	8008234 <__mdiff+0x38>
 8008212:	4629      	mov	r1, r5
 8008214:	4630      	mov	r0, r6
 8008216:	f7ff fd0d 	bl	8007c34 <_Balloc>
 800821a:	b930      	cbnz	r0, 800822a <__mdiff+0x2e>
 800821c:	4b39      	ldr	r3, [pc, #228]	; (8008304 <__mdiff+0x108>)
 800821e:	4602      	mov	r2, r0
 8008220:	f240 2132 	movw	r1, #562	; 0x232
 8008224:	4838      	ldr	r0, [pc, #224]	; (8008308 <__mdiff+0x10c>)
 8008226:	f001 f827 	bl	8009278 <__assert_func>
 800822a:	2301      	movs	r3, #1
 800822c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008234:	bfa4      	itt	ge
 8008236:	463b      	movge	r3, r7
 8008238:	4627      	movge	r7, r4
 800823a:	4630      	mov	r0, r6
 800823c:	6879      	ldr	r1, [r7, #4]
 800823e:	bfa6      	itte	ge
 8008240:	461c      	movge	r4, r3
 8008242:	2500      	movge	r5, #0
 8008244:	2501      	movlt	r5, #1
 8008246:	f7ff fcf5 	bl	8007c34 <_Balloc>
 800824a:	b920      	cbnz	r0, 8008256 <__mdiff+0x5a>
 800824c:	4b2d      	ldr	r3, [pc, #180]	; (8008304 <__mdiff+0x108>)
 800824e:	4602      	mov	r2, r0
 8008250:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008254:	e7e6      	b.n	8008224 <__mdiff+0x28>
 8008256:	693e      	ldr	r6, [r7, #16]
 8008258:	60c5      	str	r5, [r0, #12]
 800825a:	6925      	ldr	r5, [r4, #16]
 800825c:	f107 0114 	add.w	r1, r7, #20
 8008260:	f104 0914 	add.w	r9, r4, #20
 8008264:	f100 0e14 	add.w	lr, r0, #20
 8008268:	f107 0210 	add.w	r2, r7, #16
 800826c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008270:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008274:	46f2      	mov	sl, lr
 8008276:	2700      	movs	r7, #0
 8008278:	f859 3b04 	ldr.w	r3, [r9], #4
 800827c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008280:	fa1f f883 	uxth.w	r8, r3
 8008284:	fa17 f78b 	uxtah	r7, r7, fp
 8008288:	0c1b      	lsrs	r3, r3, #16
 800828a:	eba7 0808 	sub.w	r8, r7, r8
 800828e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008292:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008296:	fa1f f888 	uxth.w	r8, r8
 800829a:	141f      	asrs	r7, r3, #16
 800829c:	454d      	cmp	r5, r9
 800829e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80082a2:	f84a 3b04 	str.w	r3, [sl], #4
 80082a6:	d8e7      	bhi.n	8008278 <__mdiff+0x7c>
 80082a8:	1b2b      	subs	r3, r5, r4
 80082aa:	3b15      	subs	r3, #21
 80082ac:	f023 0303 	bic.w	r3, r3, #3
 80082b0:	3304      	adds	r3, #4
 80082b2:	3415      	adds	r4, #21
 80082b4:	42a5      	cmp	r5, r4
 80082b6:	bf38      	it	cc
 80082b8:	2304      	movcc	r3, #4
 80082ba:	4419      	add	r1, r3
 80082bc:	4473      	add	r3, lr
 80082be:	469e      	mov	lr, r3
 80082c0:	460d      	mov	r5, r1
 80082c2:	4565      	cmp	r5, ip
 80082c4:	d30e      	bcc.n	80082e4 <__mdiff+0xe8>
 80082c6:	f10c 0203 	add.w	r2, ip, #3
 80082ca:	1a52      	subs	r2, r2, r1
 80082cc:	f022 0203 	bic.w	r2, r2, #3
 80082d0:	3903      	subs	r1, #3
 80082d2:	458c      	cmp	ip, r1
 80082d4:	bf38      	it	cc
 80082d6:	2200      	movcc	r2, #0
 80082d8:	441a      	add	r2, r3
 80082da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80082de:	b17b      	cbz	r3, 8008300 <__mdiff+0x104>
 80082e0:	6106      	str	r6, [r0, #16]
 80082e2:	e7a5      	b.n	8008230 <__mdiff+0x34>
 80082e4:	f855 8b04 	ldr.w	r8, [r5], #4
 80082e8:	fa17 f488 	uxtah	r4, r7, r8
 80082ec:	1422      	asrs	r2, r4, #16
 80082ee:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80082f2:	b2a4      	uxth	r4, r4
 80082f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80082f8:	f84e 4b04 	str.w	r4, [lr], #4
 80082fc:	1417      	asrs	r7, r2, #16
 80082fe:	e7e0      	b.n	80082c2 <__mdiff+0xc6>
 8008300:	3e01      	subs	r6, #1
 8008302:	e7ea      	b.n	80082da <__mdiff+0xde>
 8008304:	0800a19c 	.word	0x0800a19c
 8008308:	0800a22c 	.word	0x0800a22c

0800830c <__ulp>:
 800830c:	b082      	sub	sp, #8
 800830e:	ed8d 0b00 	vstr	d0, [sp]
 8008312:	9b01      	ldr	r3, [sp, #4]
 8008314:	4912      	ldr	r1, [pc, #72]	; (8008360 <__ulp+0x54>)
 8008316:	4019      	ands	r1, r3
 8008318:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800831c:	2900      	cmp	r1, #0
 800831e:	dd05      	ble.n	800832c <__ulp+0x20>
 8008320:	2200      	movs	r2, #0
 8008322:	460b      	mov	r3, r1
 8008324:	ec43 2b10 	vmov	d0, r2, r3
 8008328:	b002      	add	sp, #8
 800832a:	4770      	bx	lr
 800832c:	4249      	negs	r1, r1
 800832e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008332:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	da04      	bge.n	800834a <__ulp+0x3e>
 8008340:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008344:	fa41 f300 	asr.w	r3, r1, r0
 8008348:	e7ec      	b.n	8008324 <__ulp+0x18>
 800834a:	f1a0 0114 	sub.w	r1, r0, #20
 800834e:	291e      	cmp	r1, #30
 8008350:	bfda      	itte	le
 8008352:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008356:	fa20 f101 	lsrle.w	r1, r0, r1
 800835a:	2101      	movgt	r1, #1
 800835c:	460a      	mov	r2, r1
 800835e:	e7e1      	b.n	8008324 <__ulp+0x18>
 8008360:	7ff00000 	.word	0x7ff00000

08008364 <__b2d>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	6905      	ldr	r5, [r0, #16]
 8008368:	f100 0714 	add.w	r7, r0, #20
 800836c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008370:	1f2e      	subs	r6, r5, #4
 8008372:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008376:	4620      	mov	r0, r4
 8008378:	f7ff fd52 	bl	8007e20 <__hi0bits>
 800837c:	f1c0 0320 	rsb	r3, r0, #32
 8008380:	280a      	cmp	r0, #10
 8008382:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008400 <__b2d+0x9c>
 8008386:	600b      	str	r3, [r1, #0]
 8008388:	dc14      	bgt.n	80083b4 <__b2d+0x50>
 800838a:	f1c0 0e0b 	rsb	lr, r0, #11
 800838e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008392:	42b7      	cmp	r7, r6
 8008394:	ea41 030c 	orr.w	r3, r1, ip
 8008398:	bf34      	ite	cc
 800839a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800839e:	2100      	movcs	r1, #0
 80083a0:	3015      	adds	r0, #21
 80083a2:	fa04 f000 	lsl.w	r0, r4, r0
 80083a6:	fa21 f10e 	lsr.w	r1, r1, lr
 80083aa:	ea40 0201 	orr.w	r2, r0, r1
 80083ae:	ec43 2b10 	vmov	d0, r2, r3
 80083b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083b4:	42b7      	cmp	r7, r6
 80083b6:	bf3a      	itte	cc
 80083b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80083bc:	f1a5 0608 	subcc.w	r6, r5, #8
 80083c0:	2100      	movcs	r1, #0
 80083c2:	380b      	subs	r0, #11
 80083c4:	d017      	beq.n	80083f6 <__b2d+0x92>
 80083c6:	f1c0 0c20 	rsb	ip, r0, #32
 80083ca:	fa04 f500 	lsl.w	r5, r4, r0
 80083ce:	42be      	cmp	r6, r7
 80083d0:	fa21 f40c 	lsr.w	r4, r1, ip
 80083d4:	ea45 0504 	orr.w	r5, r5, r4
 80083d8:	bf8c      	ite	hi
 80083da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80083de:	2400      	movls	r4, #0
 80083e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80083e4:	fa01 f000 	lsl.w	r0, r1, r0
 80083e8:	fa24 f40c 	lsr.w	r4, r4, ip
 80083ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083f0:	ea40 0204 	orr.w	r2, r0, r4
 80083f4:	e7db      	b.n	80083ae <__b2d+0x4a>
 80083f6:	ea44 030c 	orr.w	r3, r4, ip
 80083fa:	460a      	mov	r2, r1
 80083fc:	e7d7      	b.n	80083ae <__b2d+0x4a>
 80083fe:	bf00      	nop
 8008400:	3ff00000 	.word	0x3ff00000

08008404 <__d2b>:
 8008404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008408:	4689      	mov	r9, r1
 800840a:	2101      	movs	r1, #1
 800840c:	ec57 6b10 	vmov	r6, r7, d0
 8008410:	4690      	mov	r8, r2
 8008412:	f7ff fc0f 	bl	8007c34 <_Balloc>
 8008416:	4604      	mov	r4, r0
 8008418:	b930      	cbnz	r0, 8008428 <__d2b+0x24>
 800841a:	4602      	mov	r2, r0
 800841c:	4b25      	ldr	r3, [pc, #148]	; (80084b4 <__d2b+0xb0>)
 800841e:	4826      	ldr	r0, [pc, #152]	; (80084b8 <__d2b+0xb4>)
 8008420:	f240 310a 	movw	r1, #778	; 0x30a
 8008424:	f000 ff28 	bl	8009278 <__assert_func>
 8008428:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800842c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008430:	bb35      	cbnz	r5, 8008480 <__d2b+0x7c>
 8008432:	2e00      	cmp	r6, #0
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	d028      	beq.n	800848a <__d2b+0x86>
 8008438:	4668      	mov	r0, sp
 800843a:	9600      	str	r6, [sp, #0]
 800843c:	f7ff fd10 	bl	8007e60 <__lo0bits>
 8008440:	9900      	ldr	r1, [sp, #0]
 8008442:	b300      	cbz	r0, 8008486 <__d2b+0x82>
 8008444:	9a01      	ldr	r2, [sp, #4]
 8008446:	f1c0 0320 	rsb	r3, r0, #32
 800844a:	fa02 f303 	lsl.w	r3, r2, r3
 800844e:	430b      	orrs	r3, r1
 8008450:	40c2      	lsrs	r2, r0
 8008452:	6163      	str	r3, [r4, #20]
 8008454:	9201      	str	r2, [sp, #4]
 8008456:	9b01      	ldr	r3, [sp, #4]
 8008458:	61a3      	str	r3, [r4, #24]
 800845a:	2b00      	cmp	r3, #0
 800845c:	bf14      	ite	ne
 800845e:	2202      	movne	r2, #2
 8008460:	2201      	moveq	r2, #1
 8008462:	6122      	str	r2, [r4, #16]
 8008464:	b1d5      	cbz	r5, 800849c <__d2b+0x98>
 8008466:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800846a:	4405      	add	r5, r0
 800846c:	f8c9 5000 	str.w	r5, [r9]
 8008470:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008474:	f8c8 0000 	str.w	r0, [r8]
 8008478:	4620      	mov	r0, r4
 800847a:	b003      	add	sp, #12
 800847c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008484:	e7d5      	b.n	8008432 <__d2b+0x2e>
 8008486:	6161      	str	r1, [r4, #20]
 8008488:	e7e5      	b.n	8008456 <__d2b+0x52>
 800848a:	a801      	add	r0, sp, #4
 800848c:	f7ff fce8 	bl	8007e60 <__lo0bits>
 8008490:	9b01      	ldr	r3, [sp, #4]
 8008492:	6163      	str	r3, [r4, #20]
 8008494:	2201      	movs	r2, #1
 8008496:	6122      	str	r2, [r4, #16]
 8008498:	3020      	adds	r0, #32
 800849a:	e7e3      	b.n	8008464 <__d2b+0x60>
 800849c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084a4:	f8c9 0000 	str.w	r0, [r9]
 80084a8:	6918      	ldr	r0, [r3, #16]
 80084aa:	f7ff fcb9 	bl	8007e20 <__hi0bits>
 80084ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084b2:	e7df      	b.n	8008474 <__d2b+0x70>
 80084b4:	0800a19c 	.word	0x0800a19c
 80084b8:	0800a22c 	.word	0x0800a22c

080084bc <__ratio>:
 80084bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	4688      	mov	r8, r1
 80084c2:	4669      	mov	r1, sp
 80084c4:	4681      	mov	r9, r0
 80084c6:	f7ff ff4d 	bl	8008364 <__b2d>
 80084ca:	a901      	add	r1, sp, #4
 80084cc:	4640      	mov	r0, r8
 80084ce:	ec55 4b10 	vmov	r4, r5, d0
 80084d2:	f7ff ff47 	bl	8008364 <__b2d>
 80084d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80084de:	eba3 0c02 	sub.w	ip, r3, r2
 80084e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084e6:	1a9b      	subs	r3, r3, r2
 80084e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80084ec:	ec51 0b10 	vmov	r0, r1, d0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	bfd6      	itet	le
 80084f4:	460a      	movle	r2, r1
 80084f6:	462a      	movgt	r2, r5
 80084f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084fc:	468b      	mov	fp, r1
 80084fe:	462f      	mov	r7, r5
 8008500:	bfd4      	ite	le
 8008502:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008506:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800850a:	4620      	mov	r0, r4
 800850c:	ee10 2a10 	vmov	r2, s0
 8008510:	465b      	mov	r3, fp
 8008512:	4639      	mov	r1, r7
 8008514:	f7f8 f9b2 	bl	800087c <__aeabi_ddiv>
 8008518:	ec41 0b10 	vmov	d0, r0, r1
 800851c:	b003      	add	sp, #12
 800851e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008522 <__copybits>:
 8008522:	3901      	subs	r1, #1
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	1149      	asrs	r1, r1, #5
 8008528:	6914      	ldr	r4, [r2, #16]
 800852a:	3101      	adds	r1, #1
 800852c:	f102 0314 	add.w	r3, r2, #20
 8008530:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008534:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008538:	1f05      	subs	r5, r0, #4
 800853a:	42a3      	cmp	r3, r4
 800853c:	d30c      	bcc.n	8008558 <__copybits+0x36>
 800853e:	1aa3      	subs	r3, r4, r2
 8008540:	3b11      	subs	r3, #17
 8008542:	f023 0303 	bic.w	r3, r3, #3
 8008546:	3211      	adds	r2, #17
 8008548:	42a2      	cmp	r2, r4
 800854a:	bf88      	it	hi
 800854c:	2300      	movhi	r3, #0
 800854e:	4418      	add	r0, r3
 8008550:	2300      	movs	r3, #0
 8008552:	4288      	cmp	r0, r1
 8008554:	d305      	bcc.n	8008562 <__copybits+0x40>
 8008556:	bd70      	pop	{r4, r5, r6, pc}
 8008558:	f853 6b04 	ldr.w	r6, [r3], #4
 800855c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008560:	e7eb      	b.n	800853a <__copybits+0x18>
 8008562:	f840 3b04 	str.w	r3, [r0], #4
 8008566:	e7f4      	b.n	8008552 <__copybits+0x30>

08008568 <__any_on>:
 8008568:	f100 0214 	add.w	r2, r0, #20
 800856c:	6900      	ldr	r0, [r0, #16]
 800856e:	114b      	asrs	r3, r1, #5
 8008570:	4298      	cmp	r0, r3
 8008572:	b510      	push	{r4, lr}
 8008574:	db11      	blt.n	800859a <__any_on+0x32>
 8008576:	dd0a      	ble.n	800858e <__any_on+0x26>
 8008578:	f011 011f 	ands.w	r1, r1, #31
 800857c:	d007      	beq.n	800858e <__any_on+0x26>
 800857e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008582:	fa24 f001 	lsr.w	r0, r4, r1
 8008586:	fa00 f101 	lsl.w	r1, r0, r1
 800858a:	428c      	cmp	r4, r1
 800858c:	d10b      	bne.n	80085a6 <__any_on+0x3e>
 800858e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008592:	4293      	cmp	r3, r2
 8008594:	d803      	bhi.n	800859e <__any_on+0x36>
 8008596:	2000      	movs	r0, #0
 8008598:	bd10      	pop	{r4, pc}
 800859a:	4603      	mov	r3, r0
 800859c:	e7f7      	b.n	800858e <__any_on+0x26>
 800859e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085a2:	2900      	cmp	r1, #0
 80085a4:	d0f5      	beq.n	8008592 <__any_on+0x2a>
 80085a6:	2001      	movs	r0, #1
 80085a8:	e7f6      	b.n	8008598 <__any_on+0x30>

080085aa <_calloc_r>:
 80085aa:	b513      	push	{r0, r1, r4, lr}
 80085ac:	434a      	muls	r2, r1
 80085ae:	4611      	mov	r1, r2
 80085b0:	9201      	str	r2, [sp, #4]
 80085b2:	f000 f859 	bl	8008668 <_malloc_r>
 80085b6:	4604      	mov	r4, r0
 80085b8:	b118      	cbz	r0, 80085c2 <_calloc_r+0x18>
 80085ba:	9a01      	ldr	r2, [sp, #4]
 80085bc:	2100      	movs	r1, #0
 80085be:	f7fc fb19 	bl	8004bf4 <memset>
 80085c2:	4620      	mov	r0, r4
 80085c4:	b002      	add	sp, #8
 80085c6:	bd10      	pop	{r4, pc}

080085c8 <_free_r>:
 80085c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80085ca:	2900      	cmp	r1, #0
 80085cc:	d048      	beq.n	8008660 <_free_r+0x98>
 80085ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085d2:	9001      	str	r0, [sp, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f1a1 0404 	sub.w	r4, r1, #4
 80085da:	bfb8      	it	lt
 80085dc:	18e4      	addlt	r4, r4, r3
 80085de:	f001 f84f 	bl	8009680 <__malloc_lock>
 80085e2:	4a20      	ldr	r2, [pc, #128]	; (8008664 <_free_r+0x9c>)
 80085e4:	9801      	ldr	r0, [sp, #4]
 80085e6:	6813      	ldr	r3, [r2, #0]
 80085e8:	4615      	mov	r5, r2
 80085ea:	b933      	cbnz	r3, 80085fa <_free_r+0x32>
 80085ec:	6063      	str	r3, [r4, #4]
 80085ee:	6014      	str	r4, [r2, #0]
 80085f0:	b003      	add	sp, #12
 80085f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085f6:	f001 b849 	b.w	800968c <__malloc_unlock>
 80085fa:	42a3      	cmp	r3, r4
 80085fc:	d90b      	bls.n	8008616 <_free_r+0x4e>
 80085fe:	6821      	ldr	r1, [r4, #0]
 8008600:	1862      	adds	r2, r4, r1
 8008602:	4293      	cmp	r3, r2
 8008604:	bf04      	itt	eq
 8008606:	681a      	ldreq	r2, [r3, #0]
 8008608:	685b      	ldreq	r3, [r3, #4]
 800860a:	6063      	str	r3, [r4, #4]
 800860c:	bf04      	itt	eq
 800860e:	1852      	addeq	r2, r2, r1
 8008610:	6022      	streq	r2, [r4, #0]
 8008612:	602c      	str	r4, [r5, #0]
 8008614:	e7ec      	b.n	80085f0 <_free_r+0x28>
 8008616:	461a      	mov	r2, r3
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	b10b      	cbz	r3, 8008620 <_free_r+0x58>
 800861c:	42a3      	cmp	r3, r4
 800861e:	d9fa      	bls.n	8008616 <_free_r+0x4e>
 8008620:	6811      	ldr	r1, [r2, #0]
 8008622:	1855      	adds	r5, r2, r1
 8008624:	42a5      	cmp	r5, r4
 8008626:	d10b      	bne.n	8008640 <_free_r+0x78>
 8008628:	6824      	ldr	r4, [r4, #0]
 800862a:	4421      	add	r1, r4
 800862c:	1854      	adds	r4, r2, r1
 800862e:	42a3      	cmp	r3, r4
 8008630:	6011      	str	r1, [r2, #0]
 8008632:	d1dd      	bne.n	80085f0 <_free_r+0x28>
 8008634:	681c      	ldr	r4, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	6053      	str	r3, [r2, #4]
 800863a:	4421      	add	r1, r4
 800863c:	6011      	str	r1, [r2, #0]
 800863e:	e7d7      	b.n	80085f0 <_free_r+0x28>
 8008640:	d902      	bls.n	8008648 <_free_r+0x80>
 8008642:	230c      	movs	r3, #12
 8008644:	6003      	str	r3, [r0, #0]
 8008646:	e7d3      	b.n	80085f0 <_free_r+0x28>
 8008648:	6825      	ldr	r5, [r4, #0]
 800864a:	1961      	adds	r1, r4, r5
 800864c:	428b      	cmp	r3, r1
 800864e:	bf04      	itt	eq
 8008650:	6819      	ldreq	r1, [r3, #0]
 8008652:	685b      	ldreq	r3, [r3, #4]
 8008654:	6063      	str	r3, [r4, #4]
 8008656:	bf04      	itt	eq
 8008658:	1949      	addeq	r1, r1, r5
 800865a:	6021      	streq	r1, [r4, #0]
 800865c:	6054      	str	r4, [r2, #4]
 800865e:	e7c7      	b.n	80085f0 <_free_r+0x28>
 8008660:	b003      	add	sp, #12
 8008662:	bd30      	pop	{r4, r5, pc}
 8008664:	2000022c 	.word	0x2000022c

08008668 <_malloc_r>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	1ccd      	adds	r5, r1, #3
 800866c:	f025 0503 	bic.w	r5, r5, #3
 8008670:	3508      	adds	r5, #8
 8008672:	2d0c      	cmp	r5, #12
 8008674:	bf38      	it	cc
 8008676:	250c      	movcc	r5, #12
 8008678:	2d00      	cmp	r5, #0
 800867a:	4606      	mov	r6, r0
 800867c:	db01      	blt.n	8008682 <_malloc_r+0x1a>
 800867e:	42a9      	cmp	r1, r5
 8008680:	d903      	bls.n	800868a <_malloc_r+0x22>
 8008682:	230c      	movs	r3, #12
 8008684:	6033      	str	r3, [r6, #0]
 8008686:	2000      	movs	r0, #0
 8008688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800868a:	f000 fff9 	bl	8009680 <__malloc_lock>
 800868e:	4921      	ldr	r1, [pc, #132]	; (8008714 <_malloc_r+0xac>)
 8008690:	680a      	ldr	r2, [r1, #0]
 8008692:	4614      	mov	r4, r2
 8008694:	b99c      	cbnz	r4, 80086be <_malloc_r+0x56>
 8008696:	4f20      	ldr	r7, [pc, #128]	; (8008718 <_malloc_r+0xb0>)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	b923      	cbnz	r3, 80086a6 <_malloc_r+0x3e>
 800869c:	4621      	mov	r1, r4
 800869e:	4630      	mov	r0, r6
 80086a0:	f000 fcc8 	bl	8009034 <_sbrk_r>
 80086a4:	6038      	str	r0, [r7, #0]
 80086a6:	4629      	mov	r1, r5
 80086a8:	4630      	mov	r0, r6
 80086aa:	f000 fcc3 	bl	8009034 <_sbrk_r>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d123      	bne.n	80086fa <_malloc_r+0x92>
 80086b2:	230c      	movs	r3, #12
 80086b4:	6033      	str	r3, [r6, #0]
 80086b6:	4630      	mov	r0, r6
 80086b8:	f000 ffe8 	bl	800968c <__malloc_unlock>
 80086bc:	e7e3      	b.n	8008686 <_malloc_r+0x1e>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	1b5b      	subs	r3, r3, r5
 80086c2:	d417      	bmi.n	80086f4 <_malloc_r+0x8c>
 80086c4:	2b0b      	cmp	r3, #11
 80086c6:	d903      	bls.n	80086d0 <_malloc_r+0x68>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	441c      	add	r4, r3
 80086cc:	6025      	str	r5, [r4, #0]
 80086ce:	e004      	b.n	80086da <_malloc_r+0x72>
 80086d0:	6863      	ldr	r3, [r4, #4]
 80086d2:	42a2      	cmp	r2, r4
 80086d4:	bf0c      	ite	eq
 80086d6:	600b      	streq	r3, [r1, #0]
 80086d8:	6053      	strne	r3, [r2, #4]
 80086da:	4630      	mov	r0, r6
 80086dc:	f000 ffd6 	bl	800968c <__malloc_unlock>
 80086e0:	f104 000b 	add.w	r0, r4, #11
 80086e4:	1d23      	adds	r3, r4, #4
 80086e6:	f020 0007 	bic.w	r0, r0, #7
 80086ea:	1ac2      	subs	r2, r0, r3
 80086ec:	d0cc      	beq.n	8008688 <_malloc_r+0x20>
 80086ee:	1a1b      	subs	r3, r3, r0
 80086f0:	50a3      	str	r3, [r4, r2]
 80086f2:	e7c9      	b.n	8008688 <_malloc_r+0x20>
 80086f4:	4622      	mov	r2, r4
 80086f6:	6864      	ldr	r4, [r4, #4]
 80086f8:	e7cc      	b.n	8008694 <_malloc_r+0x2c>
 80086fa:	1cc4      	adds	r4, r0, #3
 80086fc:	f024 0403 	bic.w	r4, r4, #3
 8008700:	42a0      	cmp	r0, r4
 8008702:	d0e3      	beq.n	80086cc <_malloc_r+0x64>
 8008704:	1a21      	subs	r1, r4, r0
 8008706:	4630      	mov	r0, r6
 8008708:	f000 fc94 	bl	8009034 <_sbrk_r>
 800870c:	3001      	adds	r0, #1
 800870e:	d1dd      	bne.n	80086cc <_malloc_r+0x64>
 8008710:	e7cf      	b.n	80086b2 <_malloc_r+0x4a>
 8008712:	bf00      	nop
 8008714:	2000022c 	.word	0x2000022c
 8008718:	20000230 	.word	0x20000230

0800871c <__ssputs_r>:
 800871c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008720:	688e      	ldr	r6, [r1, #8]
 8008722:	429e      	cmp	r6, r3
 8008724:	4682      	mov	sl, r0
 8008726:	460c      	mov	r4, r1
 8008728:	4690      	mov	r8, r2
 800872a:	461f      	mov	r7, r3
 800872c:	d838      	bhi.n	80087a0 <__ssputs_r+0x84>
 800872e:	898a      	ldrh	r2, [r1, #12]
 8008730:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008734:	d032      	beq.n	800879c <__ssputs_r+0x80>
 8008736:	6825      	ldr	r5, [r4, #0]
 8008738:	6909      	ldr	r1, [r1, #16]
 800873a:	eba5 0901 	sub.w	r9, r5, r1
 800873e:	6965      	ldr	r5, [r4, #20]
 8008740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008748:	3301      	adds	r3, #1
 800874a:	444b      	add	r3, r9
 800874c:	106d      	asrs	r5, r5, #1
 800874e:	429d      	cmp	r5, r3
 8008750:	bf38      	it	cc
 8008752:	461d      	movcc	r5, r3
 8008754:	0553      	lsls	r3, r2, #21
 8008756:	d531      	bpl.n	80087bc <__ssputs_r+0xa0>
 8008758:	4629      	mov	r1, r5
 800875a:	f7ff ff85 	bl	8008668 <_malloc_r>
 800875e:	4606      	mov	r6, r0
 8008760:	b950      	cbnz	r0, 8008778 <__ssputs_r+0x5c>
 8008762:	230c      	movs	r3, #12
 8008764:	f8ca 3000 	str.w	r3, [sl]
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	f04f 30ff 	mov.w	r0, #4294967295
 8008774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008778:	6921      	ldr	r1, [r4, #16]
 800877a:	464a      	mov	r2, r9
 800877c:	f7ff fa4c 	bl	8007c18 <memcpy>
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800878a:	81a3      	strh	r3, [r4, #12]
 800878c:	6126      	str	r6, [r4, #16]
 800878e:	6165      	str	r5, [r4, #20]
 8008790:	444e      	add	r6, r9
 8008792:	eba5 0509 	sub.w	r5, r5, r9
 8008796:	6026      	str	r6, [r4, #0]
 8008798:	60a5      	str	r5, [r4, #8]
 800879a:	463e      	mov	r6, r7
 800879c:	42be      	cmp	r6, r7
 800879e:	d900      	bls.n	80087a2 <__ssputs_r+0x86>
 80087a0:	463e      	mov	r6, r7
 80087a2:	4632      	mov	r2, r6
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	4641      	mov	r1, r8
 80087a8:	f000 ff50 	bl	800964c <memmove>
 80087ac:	68a3      	ldr	r3, [r4, #8]
 80087ae:	6822      	ldr	r2, [r4, #0]
 80087b0:	1b9b      	subs	r3, r3, r6
 80087b2:	4432      	add	r2, r6
 80087b4:	60a3      	str	r3, [r4, #8]
 80087b6:	6022      	str	r2, [r4, #0]
 80087b8:	2000      	movs	r0, #0
 80087ba:	e7db      	b.n	8008774 <__ssputs_r+0x58>
 80087bc:	462a      	mov	r2, r5
 80087be:	f000 ff6b 	bl	8009698 <_realloc_r>
 80087c2:	4606      	mov	r6, r0
 80087c4:	2800      	cmp	r0, #0
 80087c6:	d1e1      	bne.n	800878c <__ssputs_r+0x70>
 80087c8:	6921      	ldr	r1, [r4, #16]
 80087ca:	4650      	mov	r0, sl
 80087cc:	f7ff fefc 	bl	80085c8 <_free_r>
 80087d0:	e7c7      	b.n	8008762 <__ssputs_r+0x46>
	...

080087d4 <_svfiprintf_r>:
 80087d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d8:	4698      	mov	r8, r3
 80087da:	898b      	ldrh	r3, [r1, #12]
 80087dc:	061b      	lsls	r3, r3, #24
 80087de:	b09d      	sub	sp, #116	; 0x74
 80087e0:	4607      	mov	r7, r0
 80087e2:	460d      	mov	r5, r1
 80087e4:	4614      	mov	r4, r2
 80087e6:	d50e      	bpl.n	8008806 <_svfiprintf_r+0x32>
 80087e8:	690b      	ldr	r3, [r1, #16]
 80087ea:	b963      	cbnz	r3, 8008806 <_svfiprintf_r+0x32>
 80087ec:	2140      	movs	r1, #64	; 0x40
 80087ee:	f7ff ff3b 	bl	8008668 <_malloc_r>
 80087f2:	6028      	str	r0, [r5, #0]
 80087f4:	6128      	str	r0, [r5, #16]
 80087f6:	b920      	cbnz	r0, 8008802 <_svfiprintf_r+0x2e>
 80087f8:	230c      	movs	r3, #12
 80087fa:	603b      	str	r3, [r7, #0]
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	e0d1      	b.n	80089a6 <_svfiprintf_r+0x1d2>
 8008802:	2340      	movs	r3, #64	; 0x40
 8008804:	616b      	str	r3, [r5, #20]
 8008806:	2300      	movs	r3, #0
 8008808:	9309      	str	r3, [sp, #36]	; 0x24
 800880a:	2320      	movs	r3, #32
 800880c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008810:	f8cd 800c 	str.w	r8, [sp, #12]
 8008814:	2330      	movs	r3, #48	; 0x30
 8008816:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089c0 <_svfiprintf_r+0x1ec>
 800881a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800881e:	f04f 0901 	mov.w	r9, #1
 8008822:	4623      	mov	r3, r4
 8008824:	469a      	mov	sl, r3
 8008826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800882a:	b10a      	cbz	r2, 8008830 <_svfiprintf_r+0x5c>
 800882c:	2a25      	cmp	r2, #37	; 0x25
 800882e:	d1f9      	bne.n	8008824 <_svfiprintf_r+0x50>
 8008830:	ebba 0b04 	subs.w	fp, sl, r4
 8008834:	d00b      	beq.n	800884e <_svfiprintf_r+0x7a>
 8008836:	465b      	mov	r3, fp
 8008838:	4622      	mov	r2, r4
 800883a:	4629      	mov	r1, r5
 800883c:	4638      	mov	r0, r7
 800883e:	f7ff ff6d 	bl	800871c <__ssputs_r>
 8008842:	3001      	adds	r0, #1
 8008844:	f000 80aa 	beq.w	800899c <_svfiprintf_r+0x1c8>
 8008848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800884a:	445a      	add	r2, fp
 800884c:	9209      	str	r2, [sp, #36]	; 0x24
 800884e:	f89a 3000 	ldrb.w	r3, [sl]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f000 80a2 	beq.w	800899c <_svfiprintf_r+0x1c8>
 8008858:	2300      	movs	r3, #0
 800885a:	f04f 32ff 	mov.w	r2, #4294967295
 800885e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008862:	f10a 0a01 	add.w	sl, sl, #1
 8008866:	9304      	str	r3, [sp, #16]
 8008868:	9307      	str	r3, [sp, #28]
 800886a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800886e:	931a      	str	r3, [sp, #104]	; 0x68
 8008870:	4654      	mov	r4, sl
 8008872:	2205      	movs	r2, #5
 8008874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008878:	4851      	ldr	r0, [pc, #324]	; (80089c0 <_svfiprintf_r+0x1ec>)
 800887a:	f7f7 fcc9 	bl	8000210 <memchr>
 800887e:	9a04      	ldr	r2, [sp, #16]
 8008880:	b9d8      	cbnz	r0, 80088ba <_svfiprintf_r+0xe6>
 8008882:	06d0      	lsls	r0, r2, #27
 8008884:	bf44      	itt	mi
 8008886:	2320      	movmi	r3, #32
 8008888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800888c:	0711      	lsls	r1, r2, #28
 800888e:	bf44      	itt	mi
 8008890:	232b      	movmi	r3, #43	; 0x2b
 8008892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008896:	f89a 3000 	ldrb.w	r3, [sl]
 800889a:	2b2a      	cmp	r3, #42	; 0x2a
 800889c:	d015      	beq.n	80088ca <_svfiprintf_r+0xf6>
 800889e:	9a07      	ldr	r2, [sp, #28]
 80088a0:	4654      	mov	r4, sl
 80088a2:	2000      	movs	r0, #0
 80088a4:	f04f 0c0a 	mov.w	ip, #10
 80088a8:	4621      	mov	r1, r4
 80088aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ae:	3b30      	subs	r3, #48	; 0x30
 80088b0:	2b09      	cmp	r3, #9
 80088b2:	d94e      	bls.n	8008952 <_svfiprintf_r+0x17e>
 80088b4:	b1b0      	cbz	r0, 80088e4 <_svfiprintf_r+0x110>
 80088b6:	9207      	str	r2, [sp, #28]
 80088b8:	e014      	b.n	80088e4 <_svfiprintf_r+0x110>
 80088ba:	eba0 0308 	sub.w	r3, r0, r8
 80088be:	fa09 f303 	lsl.w	r3, r9, r3
 80088c2:	4313      	orrs	r3, r2
 80088c4:	9304      	str	r3, [sp, #16]
 80088c6:	46a2      	mov	sl, r4
 80088c8:	e7d2      	b.n	8008870 <_svfiprintf_r+0x9c>
 80088ca:	9b03      	ldr	r3, [sp, #12]
 80088cc:	1d19      	adds	r1, r3, #4
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	9103      	str	r1, [sp, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bfbb      	ittet	lt
 80088d6:	425b      	neglt	r3, r3
 80088d8:	f042 0202 	orrlt.w	r2, r2, #2
 80088dc:	9307      	strge	r3, [sp, #28]
 80088de:	9307      	strlt	r3, [sp, #28]
 80088e0:	bfb8      	it	lt
 80088e2:	9204      	strlt	r2, [sp, #16]
 80088e4:	7823      	ldrb	r3, [r4, #0]
 80088e6:	2b2e      	cmp	r3, #46	; 0x2e
 80088e8:	d10c      	bne.n	8008904 <_svfiprintf_r+0x130>
 80088ea:	7863      	ldrb	r3, [r4, #1]
 80088ec:	2b2a      	cmp	r3, #42	; 0x2a
 80088ee:	d135      	bne.n	800895c <_svfiprintf_r+0x188>
 80088f0:	9b03      	ldr	r3, [sp, #12]
 80088f2:	1d1a      	adds	r2, r3, #4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	9203      	str	r2, [sp, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	bfb8      	it	lt
 80088fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008900:	3402      	adds	r4, #2
 8008902:	9305      	str	r3, [sp, #20]
 8008904:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089d0 <_svfiprintf_r+0x1fc>
 8008908:	7821      	ldrb	r1, [r4, #0]
 800890a:	2203      	movs	r2, #3
 800890c:	4650      	mov	r0, sl
 800890e:	f7f7 fc7f 	bl	8000210 <memchr>
 8008912:	b140      	cbz	r0, 8008926 <_svfiprintf_r+0x152>
 8008914:	2340      	movs	r3, #64	; 0x40
 8008916:	eba0 000a 	sub.w	r0, r0, sl
 800891a:	fa03 f000 	lsl.w	r0, r3, r0
 800891e:	9b04      	ldr	r3, [sp, #16]
 8008920:	4303      	orrs	r3, r0
 8008922:	3401      	adds	r4, #1
 8008924:	9304      	str	r3, [sp, #16]
 8008926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800892a:	4826      	ldr	r0, [pc, #152]	; (80089c4 <_svfiprintf_r+0x1f0>)
 800892c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008930:	2206      	movs	r2, #6
 8008932:	f7f7 fc6d 	bl	8000210 <memchr>
 8008936:	2800      	cmp	r0, #0
 8008938:	d038      	beq.n	80089ac <_svfiprintf_r+0x1d8>
 800893a:	4b23      	ldr	r3, [pc, #140]	; (80089c8 <_svfiprintf_r+0x1f4>)
 800893c:	bb1b      	cbnz	r3, 8008986 <_svfiprintf_r+0x1b2>
 800893e:	9b03      	ldr	r3, [sp, #12]
 8008940:	3307      	adds	r3, #7
 8008942:	f023 0307 	bic.w	r3, r3, #7
 8008946:	3308      	adds	r3, #8
 8008948:	9303      	str	r3, [sp, #12]
 800894a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800894c:	4433      	add	r3, r6
 800894e:	9309      	str	r3, [sp, #36]	; 0x24
 8008950:	e767      	b.n	8008822 <_svfiprintf_r+0x4e>
 8008952:	fb0c 3202 	mla	r2, ip, r2, r3
 8008956:	460c      	mov	r4, r1
 8008958:	2001      	movs	r0, #1
 800895a:	e7a5      	b.n	80088a8 <_svfiprintf_r+0xd4>
 800895c:	2300      	movs	r3, #0
 800895e:	3401      	adds	r4, #1
 8008960:	9305      	str	r3, [sp, #20]
 8008962:	4619      	mov	r1, r3
 8008964:	f04f 0c0a 	mov.w	ip, #10
 8008968:	4620      	mov	r0, r4
 800896a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800896e:	3a30      	subs	r2, #48	; 0x30
 8008970:	2a09      	cmp	r2, #9
 8008972:	d903      	bls.n	800897c <_svfiprintf_r+0x1a8>
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0c5      	beq.n	8008904 <_svfiprintf_r+0x130>
 8008978:	9105      	str	r1, [sp, #20]
 800897a:	e7c3      	b.n	8008904 <_svfiprintf_r+0x130>
 800897c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008980:	4604      	mov	r4, r0
 8008982:	2301      	movs	r3, #1
 8008984:	e7f0      	b.n	8008968 <_svfiprintf_r+0x194>
 8008986:	ab03      	add	r3, sp, #12
 8008988:	9300      	str	r3, [sp, #0]
 800898a:	462a      	mov	r2, r5
 800898c:	4b0f      	ldr	r3, [pc, #60]	; (80089cc <_svfiprintf_r+0x1f8>)
 800898e:	a904      	add	r1, sp, #16
 8008990:	4638      	mov	r0, r7
 8008992:	f7fc f9d7 	bl	8004d44 <_printf_float>
 8008996:	1c42      	adds	r2, r0, #1
 8008998:	4606      	mov	r6, r0
 800899a:	d1d6      	bne.n	800894a <_svfiprintf_r+0x176>
 800899c:	89ab      	ldrh	r3, [r5, #12]
 800899e:	065b      	lsls	r3, r3, #25
 80089a0:	f53f af2c 	bmi.w	80087fc <_svfiprintf_r+0x28>
 80089a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089a6:	b01d      	add	sp, #116	; 0x74
 80089a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ac:	ab03      	add	r3, sp, #12
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	462a      	mov	r2, r5
 80089b2:	4b06      	ldr	r3, [pc, #24]	; (80089cc <_svfiprintf_r+0x1f8>)
 80089b4:	a904      	add	r1, sp, #16
 80089b6:	4638      	mov	r0, r7
 80089b8:	f7fc fc68 	bl	800528c <_printf_i>
 80089bc:	e7eb      	b.n	8008996 <_svfiprintf_r+0x1c2>
 80089be:	bf00      	nop
 80089c0:	0800a38c 	.word	0x0800a38c
 80089c4:	0800a396 	.word	0x0800a396
 80089c8:	08004d45 	.word	0x08004d45
 80089cc:	0800871d 	.word	0x0800871d
 80089d0:	0800a392 	.word	0x0800a392

080089d4 <_sungetc_r>:
 80089d4:	b538      	push	{r3, r4, r5, lr}
 80089d6:	1c4b      	adds	r3, r1, #1
 80089d8:	4614      	mov	r4, r2
 80089da:	d103      	bne.n	80089e4 <_sungetc_r+0x10>
 80089dc:	f04f 35ff 	mov.w	r5, #4294967295
 80089e0:	4628      	mov	r0, r5
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
 80089e4:	8993      	ldrh	r3, [r2, #12]
 80089e6:	f023 0320 	bic.w	r3, r3, #32
 80089ea:	8193      	strh	r3, [r2, #12]
 80089ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089ee:	6852      	ldr	r2, [r2, #4]
 80089f0:	b2cd      	uxtb	r5, r1
 80089f2:	b18b      	cbz	r3, 8008a18 <_sungetc_r+0x44>
 80089f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089f6:	4293      	cmp	r3, r2
 80089f8:	dd08      	ble.n	8008a0c <_sungetc_r+0x38>
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	1e5a      	subs	r2, r3, #1
 80089fe:	6022      	str	r2, [r4, #0]
 8008a00:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008a04:	6863      	ldr	r3, [r4, #4]
 8008a06:	3301      	adds	r3, #1
 8008a08:	6063      	str	r3, [r4, #4]
 8008a0a:	e7e9      	b.n	80089e0 <_sungetc_r+0xc>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	f000 fbeb 	bl	80091e8 <__submore>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d0f1      	beq.n	80089fa <_sungetc_r+0x26>
 8008a16:	e7e1      	b.n	80089dc <_sungetc_r+0x8>
 8008a18:	6921      	ldr	r1, [r4, #16]
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	b151      	cbz	r1, 8008a34 <_sungetc_r+0x60>
 8008a1e:	4299      	cmp	r1, r3
 8008a20:	d208      	bcs.n	8008a34 <_sungetc_r+0x60>
 8008a22:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008a26:	42a9      	cmp	r1, r5
 8008a28:	d104      	bne.n	8008a34 <_sungetc_r+0x60>
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	3201      	adds	r2, #1
 8008a2e:	6023      	str	r3, [r4, #0]
 8008a30:	6062      	str	r2, [r4, #4]
 8008a32:	e7d5      	b.n	80089e0 <_sungetc_r+0xc>
 8008a34:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a3c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a3e:	2303      	movs	r3, #3
 8008a40:	63a3      	str	r3, [r4, #56]	; 0x38
 8008a42:	4623      	mov	r3, r4
 8008a44:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e7dc      	b.n	8008a08 <_sungetc_r+0x34>

08008a4e <__ssrefill_r>:
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	460c      	mov	r4, r1
 8008a52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008a54:	b169      	cbz	r1, 8008a72 <__ssrefill_r+0x24>
 8008a56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a5a:	4299      	cmp	r1, r3
 8008a5c:	d001      	beq.n	8008a62 <__ssrefill_r+0x14>
 8008a5e:	f7ff fdb3 	bl	80085c8 <_free_r>
 8008a62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a64:	6063      	str	r3, [r4, #4]
 8008a66:	2000      	movs	r0, #0
 8008a68:	6360      	str	r0, [r4, #52]	; 0x34
 8008a6a:	b113      	cbz	r3, 8008a72 <__ssrefill_r+0x24>
 8008a6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a6e:	6023      	str	r3, [r4, #0]
 8008a70:	bd10      	pop	{r4, pc}
 8008a72:	6923      	ldr	r3, [r4, #16]
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	2300      	movs	r3, #0
 8008a78:	6063      	str	r3, [r4, #4]
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	f043 0320 	orr.w	r3, r3, #32
 8008a80:	81a3      	strh	r3, [r4, #12]
 8008a82:	f04f 30ff 	mov.w	r0, #4294967295
 8008a86:	e7f3      	b.n	8008a70 <__ssrefill_r+0x22>

08008a88 <__ssvfiscanf_r>:
 8008a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a8c:	460c      	mov	r4, r1
 8008a8e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008a92:	2100      	movs	r1, #0
 8008a94:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008a98:	49b2      	ldr	r1, [pc, #712]	; (8008d64 <__ssvfiscanf_r+0x2dc>)
 8008a9a:	91a0      	str	r1, [sp, #640]	; 0x280
 8008a9c:	f10d 0804 	add.w	r8, sp, #4
 8008aa0:	49b1      	ldr	r1, [pc, #708]	; (8008d68 <__ssvfiscanf_r+0x2e0>)
 8008aa2:	4fb2      	ldr	r7, [pc, #712]	; (8008d6c <__ssvfiscanf_r+0x2e4>)
 8008aa4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8008d70 <__ssvfiscanf_r+0x2e8>
 8008aa8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008aac:	4606      	mov	r6, r0
 8008aae:	91a1      	str	r1, [sp, #644]	; 0x284
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	f892 a000 	ldrb.w	sl, [r2]
 8008ab6:	f1ba 0f00 	cmp.w	sl, #0
 8008aba:	f000 8151 	beq.w	8008d60 <__ssvfiscanf_r+0x2d8>
 8008abe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8008ac2:	f013 0308 	ands.w	r3, r3, #8
 8008ac6:	f102 0501 	add.w	r5, r2, #1
 8008aca:	d019      	beq.n	8008b00 <__ssvfiscanf_r+0x78>
 8008acc:	6863      	ldr	r3, [r4, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	dd0f      	ble.n	8008af2 <__ssvfiscanf_r+0x6a>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	781a      	ldrb	r2, [r3, #0]
 8008ad6:	5cba      	ldrb	r2, [r7, r2]
 8008ad8:	0712      	lsls	r2, r2, #28
 8008ada:	d401      	bmi.n	8008ae0 <__ssvfiscanf_r+0x58>
 8008adc:	462a      	mov	r2, r5
 8008ade:	e7e8      	b.n	8008ab2 <__ssvfiscanf_r+0x2a>
 8008ae0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ae2:	3201      	adds	r2, #1
 8008ae4:	9245      	str	r2, [sp, #276]	; 0x114
 8008ae6:	6862      	ldr	r2, [r4, #4]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	3a01      	subs	r2, #1
 8008aec:	6062      	str	r2, [r4, #4]
 8008aee:	6023      	str	r3, [r4, #0]
 8008af0:	e7ec      	b.n	8008acc <__ssvfiscanf_r+0x44>
 8008af2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008af4:	4621      	mov	r1, r4
 8008af6:	4630      	mov	r0, r6
 8008af8:	4798      	blx	r3
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d0e9      	beq.n	8008ad2 <__ssvfiscanf_r+0x4a>
 8008afe:	e7ed      	b.n	8008adc <__ssvfiscanf_r+0x54>
 8008b00:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8008b04:	f040 8083 	bne.w	8008c0e <__ssvfiscanf_r+0x186>
 8008b08:	9341      	str	r3, [sp, #260]	; 0x104
 8008b0a:	9343      	str	r3, [sp, #268]	; 0x10c
 8008b0c:	7853      	ldrb	r3, [r2, #1]
 8008b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b10:	bf02      	ittt	eq
 8008b12:	2310      	moveq	r3, #16
 8008b14:	1c95      	addeq	r5, r2, #2
 8008b16:	9341      	streq	r3, [sp, #260]	; 0x104
 8008b18:	220a      	movs	r2, #10
 8008b1a:	46ab      	mov	fp, r5
 8008b1c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8008b20:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008b24:	2b09      	cmp	r3, #9
 8008b26:	d91d      	bls.n	8008b64 <__ssvfiscanf_r+0xdc>
 8008b28:	4891      	ldr	r0, [pc, #580]	; (8008d70 <__ssvfiscanf_r+0x2e8>)
 8008b2a:	2203      	movs	r2, #3
 8008b2c:	f7f7 fb70 	bl	8000210 <memchr>
 8008b30:	b140      	cbz	r0, 8008b44 <__ssvfiscanf_r+0xbc>
 8008b32:	2301      	movs	r3, #1
 8008b34:	eba0 0009 	sub.w	r0, r0, r9
 8008b38:	fa03 f000 	lsl.w	r0, r3, r0
 8008b3c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008b3e:	4318      	orrs	r0, r3
 8008b40:	9041      	str	r0, [sp, #260]	; 0x104
 8008b42:	465d      	mov	r5, fp
 8008b44:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b48:	2b78      	cmp	r3, #120	; 0x78
 8008b4a:	d806      	bhi.n	8008b5a <__ssvfiscanf_r+0xd2>
 8008b4c:	2b57      	cmp	r3, #87	; 0x57
 8008b4e:	d810      	bhi.n	8008b72 <__ssvfiscanf_r+0xea>
 8008b50:	2b25      	cmp	r3, #37	; 0x25
 8008b52:	d05c      	beq.n	8008c0e <__ssvfiscanf_r+0x186>
 8008b54:	d856      	bhi.n	8008c04 <__ssvfiscanf_r+0x17c>
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d074      	beq.n	8008c44 <__ssvfiscanf_r+0x1bc>
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	9347      	str	r3, [sp, #284]	; 0x11c
 8008b5e:	230a      	movs	r3, #10
 8008b60:	9342      	str	r3, [sp, #264]	; 0x108
 8008b62:	e081      	b.n	8008c68 <__ssvfiscanf_r+0x1e0>
 8008b64:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008b66:	fb02 1303 	mla	r3, r2, r3, r1
 8008b6a:	3b30      	subs	r3, #48	; 0x30
 8008b6c:	9343      	str	r3, [sp, #268]	; 0x10c
 8008b6e:	465d      	mov	r5, fp
 8008b70:	e7d3      	b.n	8008b1a <__ssvfiscanf_r+0x92>
 8008b72:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008b76:	2a20      	cmp	r2, #32
 8008b78:	d8ef      	bhi.n	8008b5a <__ssvfiscanf_r+0xd2>
 8008b7a:	a101      	add	r1, pc, #4	; (adr r1, 8008b80 <__ssvfiscanf_r+0xf8>)
 8008b7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b80:	08008c53 	.word	0x08008c53
 8008b84:	08008b5b 	.word	0x08008b5b
 8008b88:	08008b5b 	.word	0x08008b5b
 8008b8c:	08008cb1 	.word	0x08008cb1
 8008b90:	08008b5b 	.word	0x08008b5b
 8008b94:	08008b5b 	.word	0x08008b5b
 8008b98:	08008b5b 	.word	0x08008b5b
 8008b9c:	08008b5b 	.word	0x08008b5b
 8008ba0:	08008b5b 	.word	0x08008b5b
 8008ba4:	08008b5b 	.word	0x08008b5b
 8008ba8:	08008b5b 	.word	0x08008b5b
 8008bac:	08008cc7 	.word	0x08008cc7
 8008bb0:	08008c9d 	.word	0x08008c9d
 8008bb4:	08008c0b 	.word	0x08008c0b
 8008bb8:	08008c0b 	.word	0x08008c0b
 8008bbc:	08008c0b 	.word	0x08008c0b
 8008bc0:	08008b5b 	.word	0x08008b5b
 8008bc4:	08008ca1 	.word	0x08008ca1
 8008bc8:	08008b5b 	.word	0x08008b5b
 8008bcc:	08008b5b 	.word	0x08008b5b
 8008bd0:	08008b5b 	.word	0x08008b5b
 8008bd4:	08008b5b 	.word	0x08008b5b
 8008bd8:	08008cd7 	.word	0x08008cd7
 8008bdc:	08008ca9 	.word	0x08008ca9
 8008be0:	08008c4b 	.word	0x08008c4b
 8008be4:	08008b5b 	.word	0x08008b5b
 8008be8:	08008b5b 	.word	0x08008b5b
 8008bec:	08008cd3 	.word	0x08008cd3
 8008bf0:	08008b5b 	.word	0x08008b5b
 8008bf4:	08008c9d 	.word	0x08008c9d
 8008bf8:	08008b5b 	.word	0x08008b5b
 8008bfc:	08008b5b 	.word	0x08008b5b
 8008c00:	08008c53 	.word	0x08008c53
 8008c04:	3b45      	subs	r3, #69	; 0x45
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d8a7      	bhi.n	8008b5a <__ssvfiscanf_r+0xd2>
 8008c0a:	2305      	movs	r3, #5
 8008c0c:	e02b      	b.n	8008c66 <__ssvfiscanf_r+0x1de>
 8008c0e:	6863      	ldr	r3, [r4, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	dd0d      	ble.n	8008c30 <__ssvfiscanf_r+0x1a8>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	781a      	ldrb	r2, [r3, #0]
 8008c18:	4552      	cmp	r2, sl
 8008c1a:	f040 80a1 	bne.w	8008d60 <__ssvfiscanf_r+0x2d8>
 8008c1e:	3301      	adds	r3, #1
 8008c20:	6862      	ldr	r2, [r4, #4]
 8008c22:	6023      	str	r3, [r4, #0]
 8008c24:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008c26:	3a01      	subs	r2, #1
 8008c28:	3301      	adds	r3, #1
 8008c2a:	6062      	str	r2, [r4, #4]
 8008c2c:	9345      	str	r3, [sp, #276]	; 0x114
 8008c2e:	e755      	b.n	8008adc <__ssvfiscanf_r+0x54>
 8008c30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008c32:	4621      	mov	r1, r4
 8008c34:	4630      	mov	r0, r6
 8008c36:	4798      	blx	r3
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	d0eb      	beq.n	8008c14 <__ssvfiscanf_r+0x18c>
 8008c3c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	f040 8084 	bne.w	8008d4c <__ssvfiscanf_r+0x2c4>
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	e086      	b.n	8008d58 <__ssvfiscanf_r+0x2d0>
 8008c4a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008c4c:	f042 0220 	orr.w	r2, r2, #32
 8008c50:	9241      	str	r2, [sp, #260]	; 0x104
 8008c52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c58:	9241      	str	r2, [sp, #260]	; 0x104
 8008c5a:	2210      	movs	r2, #16
 8008c5c:	2b6f      	cmp	r3, #111	; 0x6f
 8008c5e:	9242      	str	r2, [sp, #264]	; 0x108
 8008c60:	bf34      	ite	cc
 8008c62:	2303      	movcc	r3, #3
 8008c64:	2304      	movcs	r3, #4
 8008c66:	9347      	str	r3, [sp, #284]	; 0x11c
 8008c68:	6863      	ldr	r3, [r4, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	dd41      	ble.n	8008cf2 <__ssvfiscanf_r+0x26a>
 8008c6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008c70:	0659      	lsls	r1, r3, #25
 8008c72:	d404      	bmi.n	8008c7e <__ssvfiscanf_r+0x1f6>
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	781a      	ldrb	r2, [r3, #0]
 8008c78:	5cba      	ldrb	r2, [r7, r2]
 8008c7a:	0712      	lsls	r2, r2, #28
 8008c7c:	d440      	bmi.n	8008d00 <__ssvfiscanf_r+0x278>
 8008c7e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	dc4f      	bgt.n	8008d24 <__ssvfiscanf_r+0x29c>
 8008c84:	466b      	mov	r3, sp
 8008c86:	4622      	mov	r2, r4
 8008c88:	a941      	add	r1, sp, #260	; 0x104
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	f000 f874 	bl	8008d78 <_scanf_chars>
 8008c90:	2801      	cmp	r0, #1
 8008c92:	d065      	beq.n	8008d60 <__ssvfiscanf_r+0x2d8>
 8008c94:	2802      	cmp	r0, #2
 8008c96:	f47f af21 	bne.w	8008adc <__ssvfiscanf_r+0x54>
 8008c9a:	e7cf      	b.n	8008c3c <__ssvfiscanf_r+0x1b4>
 8008c9c:	220a      	movs	r2, #10
 8008c9e:	e7dd      	b.n	8008c5c <__ssvfiscanf_r+0x1d4>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	9342      	str	r3, [sp, #264]	; 0x108
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e7de      	b.n	8008c66 <__ssvfiscanf_r+0x1de>
 8008ca8:	2308      	movs	r3, #8
 8008caa:	9342      	str	r3, [sp, #264]	; 0x108
 8008cac:	2304      	movs	r3, #4
 8008cae:	e7da      	b.n	8008c66 <__ssvfiscanf_r+0x1de>
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	f000 f9ce 	bl	8009054 <__sccl>
 8008cb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cbe:	9341      	str	r3, [sp, #260]	; 0x104
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e7cf      	b.n	8008c66 <__ssvfiscanf_r+0x1de>
 8008cc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008cc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ccc:	9341      	str	r3, [sp, #260]	; 0x104
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e7c9      	b.n	8008c66 <__ssvfiscanf_r+0x1de>
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	e7c7      	b.n	8008c66 <__ssvfiscanf_r+0x1de>
 8008cd6:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008cd8:	06c3      	lsls	r3, r0, #27
 8008cda:	f53f aeff 	bmi.w	8008adc <__ssvfiscanf_r+0x54>
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008ce2:	1d19      	adds	r1, r3, #4
 8008ce4:	9100      	str	r1, [sp, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	07c0      	lsls	r0, r0, #31
 8008cea:	bf4c      	ite	mi
 8008cec:	801a      	strhmi	r2, [r3, #0]
 8008cee:	601a      	strpl	r2, [r3, #0]
 8008cf0:	e6f4      	b.n	8008adc <__ssvfiscanf_r+0x54>
 8008cf2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	4798      	blx	r3
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	d0b7      	beq.n	8008c6e <__ssvfiscanf_r+0x1e6>
 8008cfe:	e79d      	b.n	8008c3c <__ssvfiscanf_r+0x1b4>
 8008d00:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008d02:	3201      	adds	r2, #1
 8008d04:	9245      	str	r2, [sp, #276]	; 0x114
 8008d06:	6862      	ldr	r2, [r4, #4]
 8008d08:	3a01      	subs	r2, #1
 8008d0a:	2a00      	cmp	r2, #0
 8008d0c:	6062      	str	r2, [r4, #4]
 8008d0e:	dd02      	ble.n	8008d16 <__ssvfiscanf_r+0x28e>
 8008d10:	3301      	adds	r3, #1
 8008d12:	6023      	str	r3, [r4, #0]
 8008d14:	e7ae      	b.n	8008c74 <__ssvfiscanf_r+0x1ec>
 8008d16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d18:	4621      	mov	r1, r4
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	4798      	blx	r3
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d0a8      	beq.n	8008c74 <__ssvfiscanf_r+0x1ec>
 8008d22:	e78b      	b.n	8008c3c <__ssvfiscanf_r+0x1b4>
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	dc06      	bgt.n	8008d36 <__ssvfiscanf_r+0x2ae>
 8008d28:	466b      	mov	r3, sp
 8008d2a:	4622      	mov	r2, r4
 8008d2c:	a941      	add	r1, sp, #260	; 0x104
 8008d2e:	4630      	mov	r0, r6
 8008d30:	f000 f87a 	bl	8008e28 <_scanf_i>
 8008d34:	e7ac      	b.n	8008c90 <__ssvfiscanf_r+0x208>
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <__ssvfiscanf_r+0x2ec>)
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f43f aecf 	beq.w	8008adc <__ssvfiscanf_r+0x54>
 8008d3e:	466b      	mov	r3, sp
 8008d40:	4622      	mov	r2, r4
 8008d42:	a941      	add	r1, sp, #260	; 0x104
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7fc fbc7 	bl	80054d8 <_scanf_float>
 8008d4a:	e7a1      	b.n	8008c90 <__ssvfiscanf_r+0x208>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008d52:	bf18      	it	ne
 8008d54:	f04f 30ff 	movne.w	r0, #4294967295
 8008d58:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d60:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008d62:	e7f9      	b.n	8008d58 <__ssvfiscanf_r+0x2d0>
 8008d64:	080089d5 	.word	0x080089d5
 8008d68:	08008a4f 	.word	0x08008a4f
 8008d6c:	0800a019 	.word	0x0800a019
 8008d70:	0800a392 	.word	0x0800a392
 8008d74:	080054d9 	.word	0x080054d9

08008d78 <_scanf_chars>:
 8008d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d7c:	4615      	mov	r5, r2
 8008d7e:	688a      	ldr	r2, [r1, #8]
 8008d80:	4680      	mov	r8, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	b932      	cbnz	r2, 8008d94 <_scanf_chars+0x1c>
 8008d86:	698a      	ldr	r2, [r1, #24]
 8008d88:	2a00      	cmp	r2, #0
 8008d8a:	bf0c      	ite	eq
 8008d8c:	2201      	moveq	r2, #1
 8008d8e:	f04f 32ff 	movne.w	r2, #4294967295
 8008d92:	608a      	str	r2, [r1, #8]
 8008d94:	6822      	ldr	r2, [r4, #0]
 8008d96:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008e24 <_scanf_chars+0xac>
 8008d9a:	06d1      	lsls	r1, r2, #27
 8008d9c:	bf5f      	itttt	pl
 8008d9e:	681a      	ldrpl	r2, [r3, #0]
 8008da0:	1d11      	addpl	r1, r2, #4
 8008da2:	6019      	strpl	r1, [r3, #0]
 8008da4:	6816      	ldrpl	r6, [r2, #0]
 8008da6:	2700      	movs	r7, #0
 8008da8:	69a0      	ldr	r0, [r4, #24]
 8008daa:	b188      	cbz	r0, 8008dd0 <_scanf_chars+0x58>
 8008dac:	2801      	cmp	r0, #1
 8008dae:	d107      	bne.n	8008dc0 <_scanf_chars+0x48>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	781a      	ldrb	r2, [r3, #0]
 8008db4:	6963      	ldr	r3, [r4, #20]
 8008db6:	5c9b      	ldrb	r3, [r3, r2]
 8008db8:	b953      	cbnz	r3, 8008dd0 <_scanf_chars+0x58>
 8008dba:	bb27      	cbnz	r7, 8008e06 <_scanf_chars+0x8e>
 8008dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc0:	2802      	cmp	r0, #2
 8008dc2:	d120      	bne.n	8008e06 <_scanf_chars+0x8e>
 8008dc4:	682b      	ldr	r3, [r5, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008dcc:	071b      	lsls	r3, r3, #28
 8008dce:	d41a      	bmi.n	8008e06 <_scanf_chars+0x8e>
 8008dd0:	6823      	ldr	r3, [r4, #0]
 8008dd2:	06da      	lsls	r2, r3, #27
 8008dd4:	bf5e      	ittt	pl
 8008dd6:	682b      	ldrpl	r3, [r5, #0]
 8008dd8:	781b      	ldrbpl	r3, [r3, #0]
 8008dda:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008dde:	682a      	ldr	r2, [r5, #0]
 8008de0:	686b      	ldr	r3, [r5, #4]
 8008de2:	3201      	adds	r2, #1
 8008de4:	602a      	str	r2, [r5, #0]
 8008de6:	68a2      	ldr	r2, [r4, #8]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	3a01      	subs	r2, #1
 8008dec:	606b      	str	r3, [r5, #4]
 8008dee:	3701      	adds	r7, #1
 8008df0:	60a2      	str	r2, [r4, #8]
 8008df2:	b142      	cbz	r2, 8008e06 <_scanf_chars+0x8e>
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	dcd7      	bgt.n	8008da8 <_scanf_chars+0x30>
 8008df8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	4640      	mov	r0, r8
 8008e00:	4798      	blx	r3
 8008e02:	2800      	cmp	r0, #0
 8008e04:	d0d0      	beq.n	8008da8 <_scanf_chars+0x30>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	f013 0310 	ands.w	r3, r3, #16
 8008e0c:	d105      	bne.n	8008e1a <_scanf_chars+0xa2>
 8008e0e:	68e2      	ldr	r2, [r4, #12]
 8008e10:	3201      	adds	r2, #1
 8008e12:	60e2      	str	r2, [r4, #12]
 8008e14:	69a2      	ldr	r2, [r4, #24]
 8008e16:	b102      	cbz	r2, 8008e1a <_scanf_chars+0xa2>
 8008e18:	7033      	strb	r3, [r6, #0]
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	441f      	add	r7, r3
 8008e1e:	6127      	str	r7, [r4, #16]
 8008e20:	2000      	movs	r0, #0
 8008e22:	e7cb      	b.n	8008dbc <_scanf_chars+0x44>
 8008e24:	0800a019 	.word	0x0800a019

08008e28 <_scanf_i>:
 8008e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2c:	4698      	mov	r8, r3
 8008e2e:	4b74      	ldr	r3, [pc, #464]	; (8009000 <_scanf_i+0x1d8>)
 8008e30:	460c      	mov	r4, r1
 8008e32:	4682      	mov	sl, r0
 8008e34:	4616      	mov	r6, r2
 8008e36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008e3a:	b087      	sub	sp, #28
 8008e3c:	ab03      	add	r3, sp, #12
 8008e3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008e42:	4b70      	ldr	r3, [pc, #448]	; (8009004 <_scanf_i+0x1dc>)
 8008e44:	69a1      	ldr	r1, [r4, #24]
 8008e46:	4a70      	ldr	r2, [pc, #448]	; (8009008 <_scanf_i+0x1e0>)
 8008e48:	2903      	cmp	r1, #3
 8008e4a:	bf18      	it	ne
 8008e4c:	461a      	movne	r2, r3
 8008e4e:	68a3      	ldr	r3, [r4, #8]
 8008e50:	9201      	str	r2, [sp, #4]
 8008e52:	1e5a      	subs	r2, r3, #1
 8008e54:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e58:	bf88      	it	hi
 8008e5a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e5e:	4627      	mov	r7, r4
 8008e60:	bf82      	ittt	hi
 8008e62:	eb03 0905 	addhi.w	r9, r3, r5
 8008e66:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e6a:	60a3      	strhi	r3, [r4, #8]
 8008e6c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008e70:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008e74:	bf98      	it	ls
 8008e76:	f04f 0900 	movls.w	r9, #0
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	463d      	mov	r5, r7
 8008e7e:	f04f 0b00 	mov.w	fp, #0
 8008e82:	6831      	ldr	r1, [r6, #0]
 8008e84:	ab03      	add	r3, sp, #12
 8008e86:	7809      	ldrb	r1, [r1, #0]
 8008e88:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	f7f7 f9bf 	bl	8000210 <memchr>
 8008e92:	b328      	cbz	r0, 8008ee0 <_scanf_i+0xb8>
 8008e94:	f1bb 0f01 	cmp.w	fp, #1
 8008e98:	d159      	bne.n	8008f4e <_scanf_i+0x126>
 8008e9a:	6862      	ldr	r2, [r4, #4]
 8008e9c:	b92a      	cbnz	r2, 8008eaa <_scanf_i+0x82>
 8008e9e:	6822      	ldr	r2, [r4, #0]
 8008ea0:	2308      	movs	r3, #8
 8008ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ea6:	6063      	str	r3, [r4, #4]
 8008ea8:	6022      	str	r2, [r4, #0]
 8008eaa:	6822      	ldr	r2, [r4, #0]
 8008eac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008eb0:	6022      	str	r2, [r4, #0]
 8008eb2:	68a2      	ldr	r2, [r4, #8]
 8008eb4:	1e51      	subs	r1, r2, #1
 8008eb6:	60a1      	str	r1, [r4, #8]
 8008eb8:	b192      	cbz	r2, 8008ee0 <_scanf_i+0xb8>
 8008eba:	6832      	ldr	r2, [r6, #0]
 8008ebc:	1c51      	adds	r1, r2, #1
 8008ebe:	6031      	str	r1, [r6, #0]
 8008ec0:	7812      	ldrb	r2, [r2, #0]
 8008ec2:	f805 2b01 	strb.w	r2, [r5], #1
 8008ec6:	6872      	ldr	r2, [r6, #4]
 8008ec8:	3a01      	subs	r2, #1
 8008eca:	2a00      	cmp	r2, #0
 8008ecc:	6072      	str	r2, [r6, #4]
 8008ece:	dc07      	bgt.n	8008ee0 <_scanf_i+0xb8>
 8008ed0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	4650      	mov	r0, sl
 8008ed8:	4790      	blx	r2
 8008eda:	2800      	cmp	r0, #0
 8008edc:	f040 8085 	bne.w	8008fea <_scanf_i+0x1c2>
 8008ee0:	f10b 0b01 	add.w	fp, fp, #1
 8008ee4:	f1bb 0f03 	cmp.w	fp, #3
 8008ee8:	d1cb      	bne.n	8008e82 <_scanf_i+0x5a>
 8008eea:	6863      	ldr	r3, [r4, #4]
 8008eec:	b90b      	cbnz	r3, 8008ef2 <_scanf_i+0xca>
 8008eee:	230a      	movs	r3, #10
 8008ef0:	6063      	str	r3, [r4, #4]
 8008ef2:	6863      	ldr	r3, [r4, #4]
 8008ef4:	4945      	ldr	r1, [pc, #276]	; (800900c <_scanf_i+0x1e4>)
 8008ef6:	6960      	ldr	r0, [r4, #20]
 8008ef8:	1ac9      	subs	r1, r1, r3
 8008efa:	f000 f8ab 	bl	8009054 <__sccl>
 8008efe:	f04f 0b00 	mov.w	fp, #0
 8008f02:	68a3      	ldr	r3, [r4, #8]
 8008f04:	6822      	ldr	r2, [r4, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d03d      	beq.n	8008f86 <_scanf_i+0x15e>
 8008f0a:	6831      	ldr	r1, [r6, #0]
 8008f0c:	6960      	ldr	r0, [r4, #20]
 8008f0e:	f891 c000 	ldrb.w	ip, [r1]
 8008f12:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008f16:	2800      	cmp	r0, #0
 8008f18:	d035      	beq.n	8008f86 <_scanf_i+0x15e>
 8008f1a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008f1e:	d124      	bne.n	8008f6a <_scanf_i+0x142>
 8008f20:	0510      	lsls	r0, r2, #20
 8008f22:	d522      	bpl.n	8008f6a <_scanf_i+0x142>
 8008f24:	f10b 0b01 	add.w	fp, fp, #1
 8008f28:	f1b9 0f00 	cmp.w	r9, #0
 8008f2c:	d003      	beq.n	8008f36 <_scanf_i+0x10e>
 8008f2e:	3301      	adds	r3, #1
 8008f30:	f109 39ff 	add.w	r9, r9, #4294967295
 8008f34:	60a3      	str	r3, [r4, #8]
 8008f36:	6873      	ldr	r3, [r6, #4]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	6073      	str	r3, [r6, #4]
 8008f3e:	dd1b      	ble.n	8008f78 <_scanf_i+0x150>
 8008f40:	6833      	ldr	r3, [r6, #0]
 8008f42:	3301      	adds	r3, #1
 8008f44:	6033      	str	r3, [r6, #0]
 8008f46:	68a3      	ldr	r3, [r4, #8]
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	60a3      	str	r3, [r4, #8]
 8008f4c:	e7d9      	b.n	8008f02 <_scanf_i+0xda>
 8008f4e:	f1bb 0f02 	cmp.w	fp, #2
 8008f52:	d1ae      	bne.n	8008eb2 <_scanf_i+0x8a>
 8008f54:	6822      	ldr	r2, [r4, #0]
 8008f56:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008f5a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008f5e:	d1bf      	bne.n	8008ee0 <_scanf_i+0xb8>
 8008f60:	2310      	movs	r3, #16
 8008f62:	6063      	str	r3, [r4, #4]
 8008f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f68:	e7a2      	b.n	8008eb0 <_scanf_i+0x88>
 8008f6a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008f6e:	6022      	str	r2, [r4, #0]
 8008f70:	780b      	ldrb	r3, [r1, #0]
 8008f72:	f805 3b01 	strb.w	r3, [r5], #1
 8008f76:	e7de      	b.n	8008f36 <_scanf_i+0x10e>
 8008f78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4650      	mov	r0, sl
 8008f80:	4798      	blx	r3
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d0df      	beq.n	8008f46 <_scanf_i+0x11e>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	05d9      	lsls	r1, r3, #23
 8008f8a:	d50d      	bpl.n	8008fa8 <_scanf_i+0x180>
 8008f8c:	42bd      	cmp	r5, r7
 8008f8e:	d909      	bls.n	8008fa4 <_scanf_i+0x17c>
 8008f90:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008f94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f98:	4632      	mov	r2, r6
 8008f9a:	4650      	mov	r0, sl
 8008f9c:	4798      	blx	r3
 8008f9e:	f105 39ff 	add.w	r9, r5, #4294967295
 8008fa2:	464d      	mov	r5, r9
 8008fa4:	42bd      	cmp	r5, r7
 8008fa6:	d028      	beq.n	8008ffa <_scanf_i+0x1d2>
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	f012 0210 	ands.w	r2, r2, #16
 8008fae:	d113      	bne.n	8008fd8 <_scanf_i+0x1b0>
 8008fb0:	702a      	strb	r2, [r5, #0]
 8008fb2:	6863      	ldr	r3, [r4, #4]
 8008fb4:	9e01      	ldr	r6, [sp, #4]
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	4650      	mov	r0, sl
 8008fba:	47b0      	blx	r6
 8008fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8008fc0:	6821      	ldr	r1, [r4, #0]
 8008fc2:	1d1a      	adds	r2, r3, #4
 8008fc4:	f8c8 2000 	str.w	r2, [r8]
 8008fc8:	f011 0f20 	tst.w	r1, #32
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	d00f      	beq.n	8008ff0 <_scanf_i+0x1c8>
 8008fd0:	6018      	str	r0, [r3, #0]
 8008fd2:	68e3      	ldr	r3, [r4, #12]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	60e3      	str	r3, [r4, #12]
 8008fd8:	1bed      	subs	r5, r5, r7
 8008fda:	44ab      	add	fp, r5
 8008fdc:	6925      	ldr	r5, [r4, #16]
 8008fde:	445d      	add	r5, fp
 8008fe0:	6125      	str	r5, [r4, #16]
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	b007      	add	sp, #28
 8008fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fea:	f04f 0b00 	mov.w	fp, #0
 8008fee:	e7ca      	b.n	8008f86 <_scanf_i+0x15e>
 8008ff0:	07ca      	lsls	r2, r1, #31
 8008ff2:	bf4c      	ite	mi
 8008ff4:	8018      	strhmi	r0, [r3, #0]
 8008ff6:	6018      	strpl	r0, [r3, #0]
 8008ff8:	e7eb      	b.n	8008fd2 <_scanf_i+0x1aa>
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	e7f2      	b.n	8008fe4 <_scanf_i+0x1bc>
 8008ffe:	bf00      	nop
 8009000:	08009f64 	.word	0x08009f64
 8009004:	080091e5 	.word	0x080091e5
 8009008:	080067a1 	.word	0x080067a1
 800900c:	0800a3b6 	.word	0x0800a3b6

08009010 <_read_r>:
 8009010:	b538      	push	{r3, r4, r5, lr}
 8009012:	4d07      	ldr	r5, [pc, #28]	; (8009030 <_read_r+0x20>)
 8009014:	4604      	mov	r4, r0
 8009016:	4608      	mov	r0, r1
 8009018:	4611      	mov	r1, r2
 800901a:	2200      	movs	r2, #0
 800901c:	602a      	str	r2, [r5, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	f7f9 f904 	bl	800222c <_read>
 8009024:	1c43      	adds	r3, r0, #1
 8009026:	d102      	bne.n	800902e <_read_r+0x1e>
 8009028:	682b      	ldr	r3, [r5, #0]
 800902a:	b103      	cbz	r3, 800902e <_read_r+0x1e>
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	bd38      	pop	{r3, r4, r5, pc}
 8009030:	20007f08 	.word	0x20007f08

08009034 <_sbrk_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	4d06      	ldr	r5, [pc, #24]	; (8009050 <_sbrk_r+0x1c>)
 8009038:	2300      	movs	r3, #0
 800903a:	4604      	mov	r4, r0
 800903c:	4608      	mov	r0, r1
 800903e:	602b      	str	r3, [r5, #0]
 8009040:	f7f9 f962 	bl	8002308 <_sbrk>
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	d102      	bne.n	800904e <_sbrk_r+0x1a>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	b103      	cbz	r3, 800904e <_sbrk_r+0x1a>
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	20007f08 	.word	0x20007f08

08009054 <__sccl>:
 8009054:	b570      	push	{r4, r5, r6, lr}
 8009056:	780b      	ldrb	r3, [r1, #0]
 8009058:	4604      	mov	r4, r0
 800905a:	2b5e      	cmp	r3, #94	; 0x5e
 800905c:	bf0b      	itete	eq
 800905e:	784b      	ldrbeq	r3, [r1, #1]
 8009060:	1c48      	addne	r0, r1, #1
 8009062:	1c88      	addeq	r0, r1, #2
 8009064:	2200      	movne	r2, #0
 8009066:	bf08      	it	eq
 8009068:	2201      	moveq	r2, #1
 800906a:	1e61      	subs	r1, r4, #1
 800906c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009070:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009074:	42a9      	cmp	r1, r5
 8009076:	d1fb      	bne.n	8009070 <__sccl+0x1c>
 8009078:	b90b      	cbnz	r3, 800907e <__sccl+0x2a>
 800907a:	3801      	subs	r0, #1
 800907c:	bd70      	pop	{r4, r5, r6, pc}
 800907e:	f082 0101 	eor.w	r1, r2, #1
 8009082:	54e1      	strb	r1, [r4, r3]
 8009084:	1c42      	adds	r2, r0, #1
 8009086:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800908a:	2d2d      	cmp	r5, #45	; 0x2d
 800908c:	f102 36ff 	add.w	r6, r2, #4294967295
 8009090:	4610      	mov	r0, r2
 8009092:	d006      	beq.n	80090a2 <__sccl+0x4e>
 8009094:	2d5d      	cmp	r5, #93	; 0x5d
 8009096:	d0f1      	beq.n	800907c <__sccl+0x28>
 8009098:	b90d      	cbnz	r5, 800909e <__sccl+0x4a>
 800909a:	4630      	mov	r0, r6
 800909c:	e7ee      	b.n	800907c <__sccl+0x28>
 800909e:	462b      	mov	r3, r5
 80090a0:	e7ef      	b.n	8009082 <__sccl+0x2e>
 80090a2:	7816      	ldrb	r6, [r2, #0]
 80090a4:	2e5d      	cmp	r6, #93	; 0x5d
 80090a6:	d0fa      	beq.n	800909e <__sccl+0x4a>
 80090a8:	42b3      	cmp	r3, r6
 80090aa:	dcf8      	bgt.n	800909e <__sccl+0x4a>
 80090ac:	4618      	mov	r0, r3
 80090ae:	3001      	adds	r0, #1
 80090b0:	4286      	cmp	r6, r0
 80090b2:	5421      	strb	r1, [r4, r0]
 80090b4:	dcfb      	bgt.n	80090ae <__sccl+0x5a>
 80090b6:	43d8      	mvns	r0, r3
 80090b8:	4430      	add	r0, r6
 80090ba:	1c5d      	adds	r5, r3, #1
 80090bc:	42b3      	cmp	r3, r6
 80090be:	bfa8      	it	ge
 80090c0:	2000      	movge	r0, #0
 80090c2:	182b      	adds	r3, r5, r0
 80090c4:	3202      	adds	r2, #2
 80090c6:	e7de      	b.n	8009086 <__sccl+0x32>

080090c8 <strncmp>:
 80090c8:	b510      	push	{r4, lr}
 80090ca:	b16a      	cbz	r2, 80090e8 <strncmp+0x20>
 80090cc:	3901      	subs	r1, #1
 80090ce:	1884      	adds	r4, r0, r2
 80090d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80090d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80090d8:	4293      	cmp	r3, r2
 80090da:	d103      	bne.n	80090e4 <strncmp+0x1c>
 80090dc:	42a0      	cmp	r0, r4
 80090de:	d001      	beq.n	80090e4 <strncmp+0x1c>
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1f5      	bne.n	80090d0 <strncmp+0x8>
 80090e4:	1a98      	subs	r0, r3, r2
 80090e6:	bd10      	pop	{r4, pc}
 80090e8:	4610      	mov	r0, r2
 80090ea:	e7fc      	b.n	80090e6 <strncmp+0x1e>

080090ec <_strtoul_l.isra.0>:
 80090ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090f0:	4e3b      	ldr	r6, [pc, #236]	; (80091e0 <_strtoul_l.isra.0+0xf4>)
 80090f2:	4686      	mov	lr, r0
 80090f4:	468c      	mov	ip, r1
 80090f6:	4660      	mov	r0, ip
 80090f8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80090fc:	5da5      	ldrb	r5, [r4, r6]
 80090fe:	f015 0508 	ands.w	r5, r5, #8
 8009102:	d1f8      	bne.n	80090f6 <_strtoul_l.isra.0+0xa>
 8009104:	2c2d      	cmp	r4, #45	; 0x2d
 8009106:	d134      	bne.n	8009172 <_strtoul_l.isra.0+0x86>
 8009108:	f89c 4000 	ldrb.w	r4, [ip]
 800910c:	f04f 0801 	mov.w	r8, #1
 8009110:	f100 0c02 	add.w	ip, r0, #2
 8009114:	2b00      	cmp	r3, #0
 8009116:	d05e      	beq.n	80091d6 <_strtoul_l.isra.0+0xea>
 8009118:	2b10      	cmp	r3, #16
 800911a:	d10c      	bne.n	8009136 <_strtoul_l.isra.0+0x4a>
 800911c:	2c30      	cmp	r4, #48	; 0x30
 800911e:	d10a      	bne.n	8009136 <_strtoul_l.isra.0+0x4a>
 8009120:	f89c 0000 	ldrb.w	r0, [ip]
 8009124:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009128:	2858      	cmp	r0, #88	; 0x58
 800912a:	d14f      	bne.n	80091cc <_strtoul_l.isra.0+0xe0>
 800912c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009130:	2310      	movs	r3, #16
 8009132:	f10c 0c02 	add.w	ip, ip, #2
 8009136:	f04f 37ff 	mov.w	r7, #4294967295
 800913a:	2500      	movs	r5, #0
 800913c:	fbb7 f7f3 	udiv	r7, r7, r3
 8009140:	fb03 f907 	mul.w	r9, r3, r7
 8009144:	ea6f 0909 	mvn.w	r9, r9
 8009148:	4628      	mov	r0, r5
 800914a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800914e:	2e09      	cmp	r6, #9
 8009150:	d818      	bhi.n	8009184 <_strtoul_l.isra.0+0x98>
 8009152:	4634      	mov	r4, r6
 8009154:	42a3      	cmp	r3, r4
 8009156:	dd24      	ble.n	80091a2 <_strtoul_l.isra.0+0xb6>
 8009158:	2d00      	cmp	r5, #0
 800915a:	db1f      	blt.n	800919c <_strtoul_l.isra.0+0xb0>
 800915c:	4287      	cmp	r7, r0
 800915e:	d31d      	bcc.n	800919c <_strtoul_l.isra.0+0xb0>
 8009160:	d101      	bne.n	8009166 <_strtoul_l.isra.0+0x7a>
 8009162:	45a1      	cmp	r9, r4
 8009164:	db1a      	blt.n	800919c <_strtoul_l.isra.0+0xb0>
 8009166:	fb00 4003 	mla	r0, r0, r3, r4
 800916a:	2501      	movs	r5, #1
 800916c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009170:	e7eb      	b.n	800914a <_strtoul_l.isra.0+0x5e>
 8009172:	2c2b      	cmp	r4, #43	; 0x2b
 8009174:	bf08      	it	eq
 8009176:	f89c 4000 	ldrbeq.w	r4, [ip]
 800917a:	46a8      	mov	r8, r5
 800917c:	bf08      	it	eq
 800917e:	f100 0c02 	addeq.w	ip, r0, #2
 8009182:	e7c7      	b.n	8009114 <_strtoul_l.isra.0+0x28>
 8009184:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009188:	2e19      	cmp	r6, #25
 800918a:	d801      	bhi.n	8009190 <_strtoul_l.isra.0+0xa4>
 800918c:	3c37      	subs	r4, #55	; 0x37
 800918e:	e7e1      	b.n	8009154 <_strtoul_l.isra.0+0x68>
 8009190:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009194:	2e19      	cmp	r6, #25
 8009196:	d804      	bhi.n	80091a2 <_strtoul_l.isra.0+0xb6>
 8009198:	3c57      	subs	r4, #87	; 0x57
 800919a:	e7db      	b.n	8009154 <_strtoul_l.isra.0+0x68>
 800919c:	f04f 35ff 	mov.w	r5, #4294967295
 80091a0:	e7e4      	b.n	800916c <_strtoul_l.isra.0+0x80>
 80091a2:	2d00      	cmp	r5, #0
 80091a4:	da07      	bge.n	80091b6 <_strtoul_l.isra.0+0xca>
 80091a6:	2322      	movs	r3, #34	; 0x22
 80091a8:	f8ce 3000 	str.w	r3, [lr]
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	b942      	cbnz	r2, 80091c4 <_strtoul_l.isra.0+0xd8>
 80091b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091b6:	f1b8 0f00 	cmp.w	r8, #0
 80091ba:	d000      	beq.n	80091be <_strtoul_l.isra.0+0xd2>
 80091bc:	4240      	negs	r0, r0
 80091be:	2a00      	cmp	r2, #0
 80091c0:	d0f7      	beq.n	80091b2 <_strtoul_l.isra.0+0xc6>
 80091c2:	b10d      	cbz	r5, 80091c8 <_strtoul_l.isra.0+0xdc>
 80091c4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80091c8:	6011      	str	r1, [r2, #0]
 80091ca:	e7f2      	b.n	80091b2 <_strtoul_l.isra.0+0xc6>
 80091cc:	2430      	movs	r4, #48	; 0x30
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1b1      	bne.n	8009136 <_strtoul_l.isra.0+0x4a>
 80091d2:	2308      	movs	r3, #8
 80091d4:	e7af      	b.n	8009136 <_strtoul_l.isra.0+0x4a>
 80091d6:	2c30      	cmp	r4, #48	; 0x30
 80091d8:	d0a2      	beq.n	8009120 <_strtoul_l.isra.0+0x34>
 80091da:	230a      	movs	r3, #10
 80091dc:	e7ab      	b.n	8009136 <_strtoul_l.isra.0+0x4a>
 80091de:	bf00      	nop
 80091e0:	0800a019 	.word	0x0800a019

080091e4 <_strtoul_r>:
 80091e4:	f7ff bf82 	b.w	80090ec <_strtoul_l.isra.0>

080091e8 <__submore>:
 80091e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ec:	460c      	mov	r4, r1
 80091ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80091f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091f4:	4299      	cmp	r1, r3
 80091f6:	d11d      	bne.n	8009234 <__submore+0x4c>
 80091f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091fc:	f7ff fa34 	bl	8008668 <_malloc_r>
 8009200:	b918      	cbnz	r0, 800920a <__submore+0x22>
 8009202:	f04f 30ff 	mov.w	r0, #4294967295
 8009206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800920a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800920e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009210:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009214:	6360      	str	r0, [r4, #52]	; 0x34
 8009216:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800921a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800921e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009222:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009226:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800922a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800922e:	6020      	str	r0, [r4, #0]
 8009230:	2000      	movs	r0, #0
 8009232:	e7e8      	b.n	8009206 <__submore+0x1e>
 8009234:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009236:	0077      	lsls	r7, r6, #1
 8009238:	463a      	mov	r2, r7
 800923a:	f000 fa2d 	bl	8009698 <_realloc_r>
 800923e:	4605      	mov	r5, r0
 8009240:	2800      	cmp	r0, #0
 8009242:	d0de      	beq.n	8009202 <__submore+0x1a>
 8009244:	eb00 0806 	add.w	r8, r0, r6
 8009248:	4601      	mov	r1, r0
 800924a:	4632      	mov	r2, r6
 800924c:	4640      	mov	r0, r8
 800924e:	f7fe fce3 	bl	8007c18 <memcpy>
 8009252:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009256:	f8c4 8000 	str.w	r8, [r4]
 800925a:	e7e9      	b.n	8009230 <__submore+0x48>

0800925c <__ascii_wctomb>:
 800925c:	b149      	cbz	r1, 8009272 <__ascii_wctomb+0x16>
 800925e:	2aff      	cmp	r2, #255	; 0xff
 8009260:	bf85      	ittet	hi
 8009262:	238a      	movhi	r3, #138	; 0x8a
 8009264:	6003      	strhi	r3, [r0, #0]
 8009266:	700a      	strbls	r2, [r1, #0]
 8009268:	f04f 30ff 	movhi.w	r0, #4294967295
 800926c:	bf98      	it	ls
 800926e:	2001      	movls	r0, #1
 8009270:	4770      	bx	lr
 8009272:	4608      	mov	r0, r1
 8009274:	4770      	bx	lr
	...

08009278 <__assert_func>:
 8009278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800927a:	4614      	mov	r4, r2
 800927c:	461a      	mov	r2, r3
 800927e:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <__assert_func+0x2c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	4605      	mov	r5, r0
 8009284:	68d8      	ldr	r0, [r3, #12]
 8009286:	b14c      	cbz	r4, 800929c <__assert_func+0x24>
 8009288:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <__assert_func+0x30>)
 800928a:	9100      	str	r1, [sp, #0]
 800928c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009290:	4906      	ldr	r1, [pc, #24]	; (80092ac <__assert_func+0x34>)
 8009292:	462b      	mov	r3, r5
 8009294:	f000 f9a6 	bl	80095e4 <fiprintf>
 8009298:	f000 fc3e 	bl	8009b18 <abort>
 800929c:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <__assert_func+0x38>)
 800929e:	461c      	mov	r4, r3
 80092a0:	e7f3      	b.n	800928a <__assert_func+0x12>
 80092a2:	bf00      	nop
 80092a4:	20000030 	.word	0x20000030
 80092a8:	0800a3b8 	.word	0x0800a3b8
 80092ac:	0800a3c5 	.word	0x0800a3c5
 80092b0:	0800a3f3 	.word	0x0800a3f3

080092b4 <__sflush_r>:
 80092b4:	898a      	ldrh	r2, [r1, #12]
 80092b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ba:	4605      	mov	r5, r0
 80092bc:	0710      	lsls	r0, r2, #28
 80092be:	460c      	mov	r4, r1
 80092c0:	d458      	bmi.n	8009374 <__sflush_r+0xc0>
 80092c2:	684b      	ldr	r3, [r1, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	dc05      	bgt.n	80092d4 <__sflush_r+0x20>
 80092c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	dc02      	bgt.n	80092d4 <__sflush_r+0x20>
 80092ce:	2000      	movs	r0, #0
 80092d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092d6:	2e00      	cmp	r6, #0
 80092d8:	d0f9      	beq.n	80092ce <__sflush_r+0x1a>
 80092da:	2300      	movs	r3, #0
 80092dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092e0:	682f      	ldr	r7, [r5, #0]
 80092e2:	602b      	str	r3, [r5, #0]
 80092e4:	d032      	beq.n	800934c <__sflush_r+0x98>
 80092e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	075a      	lsls	r2, r3, #29
 80092ec:	d505      	bpl.n	80092fa <__sflush_r+0x46>
 80092ee:	6863      	ldr	r3, [r4, #4]
 80092f0:	1ac0      	subs	r0, r0, r3
 80092f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092f4:	b10b      	cbz	r3, 80092fa <__sflush_r+0x46>
 80092f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092f8:	1ac0      	subs	r0, r0, r3
 80092fa:	2300      	movs	r3, #0
 80092fc:	4602      	mov	r2, r0
 80092fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009300:	6a21      	ldr	r1, [r4, #32]
 8009302:	4628      	mov	r0, r5
 8009304:	47b0      	blx	r6
 8009306:	1c43      	adds	r3, r0, #1
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	d106      	bne.n	800931a <__sflush_r+0x66>
 800930c:	6829      	ldr	r1, [r5, #0]
 800930e:	291d      	cmp	r1, #29
 8009310:	d82c      	bhi.n	800936c <__sflush_r+0xb8>
 8009312:	4a2a      	ldr	r2, [pc, #168]	; (80093bc <__sflush_r+0x108>)
 8009314:	40ca      	lsrs	r2, r1
 8009316:	07d6      	lsls	r6, r2, #31
 8009318:	d528      	bpl.n	800936c <__sflush_r+0xb8>
 800931a:	2200      	movs	r2, #0
 800931c:	6062      	str	r2, [r4, #4]
 800931e:	04d9      	lsls	r1, r3, #19
 8009320:	6922      	ldr	r2, [r4, #16]
 8009322:	6022      	str	r2, [r4, #0]
 8009324:	d504      	bpl.n	8009330 <__sflush_r+0x7c>
 8009326:	1c42      	adds	r2, r0, #1
 8009328:	d101      	bne.n	800932e <__sflush_r+0x7a>
 800932a:	682b      	ldr	r3, [r5, #0]
 800932c:	b903      	cbnz	r3, 8009330 <__sflush_r+0x7c>
 800932e:	6560      	str	r0, [r4, #84]	; 0x54
 8009330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009332:	602f      	str	r7, [r5, #0]
 8009334:	2900      	cmp	r1, #0
 8009336:	d0ca      	beq.n	80092ce <__sflush_r+0x1a>
 8009338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800933c:	4299      	cmp	r1, r3
 800933e:	d002      	beq.n	8009346 <__sflush_r+0x92>
 8009340:	4628      	mov	r0, r5
 8009342:	f7ff f941 	bl	80085c8 <_free_r>
 8009346:	2000      	movs	r0, #0
 8009348:	6360      	str	r0, [r4, #52]	; 0x34
 800934a:	e7c1      	b.n	80092d0 <__sflush_r+0x1c>
 800934c:	6a21      	ldr	r1, [r4, #32]
 800934e:	2301      	movs	r3, #1
 8009350:	4628      	mov	r0, r5
 8009352:	47b0      	blx	r6
 8009354:	1c41      	adds	r1, r0, #1
 8009356:	d1c7      	bne.n	80092e8 <__sflush_r+0x34>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0c4      	beq.n	80092e8 <__sflush_r+0x34>
 800935e:	2b1d      	cmp	r3, #29
 8009360:	d001      	beq.n	8009366 <__sflush_r+0xb2>
 8009362:	2b16      	cmp	r3, #22
 8009364:	d101      	bne.n	800936a <__sflush_r+0xb6>
 8009366:	602f      	str	r7, [r5, #0]
 8009368:	e7b1      	b.n	80092ce <__sflush_r+0x1a>
 800936a:	89a3      	ldrh	r3, [r4, #12]
 800936c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009370:	81a3      	strh	r3, [r4, #12]
 8009372:	e7ad      	b.n	80092d0 <__sflush_r+0x1c>
 8009374:	690f      	ldr	r7, [r1, #16]
 8009376:	2f00      	cmp	r7, #0
 8009378:	d0a9      	beq.n	80092ce <__sflush_r+0x1a>
 800937a:	0793      	lsls	r3, r2, #30
 800937c:	680e      	ldr	r6, [r1, #0]
 800937e:	bf08      	it	eq
 8009380:	694b      	ldreq	r3, [r1, #20]
 8009382:	600f      	str	r7, [r1, #0]
 8009384:	bf18      	it	ne
 8009386:	2300      	movne	r3, #0
 8009388:	eba6 0807 	sub.w	r8, r6, r7
 800938c:	608b      	str	r3, [r1, #8]
 800938e:	f1b8 0f00 	cmp.w	r8, #0
 8009392:	dd9c      	ble.n	80092ce <__sflush_r+0x1a>
 8009394:	6a21      	ldr	r1, [r4, #32]
 8009396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009398:	4643      	mov	r3, r8
 800939a:	463a      	mov	r2, r7
 800939c:	4628      	mov	r0, r5
 800939e:	47b0      	blx	r6
 80093a0:	2800      	cmp	r0, #0
 80093a2:	dc06      	bgt.n	80093b2 <__sflush_r+0xfe>
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093aa:	81a3      	strh	r3, [r4, #12]
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	e78e      	b.n	80092d0 <__sflush_r+0x1c>
 80093b2:	4407      	add	r7, r0
 80093b4:	eba8 0800 	sub.w	r8, r8, r0
 80093b8:	e7e9      	b.n	800938e <__sflush_r+0xda>
 80093ba:	bf00      	nop
 80093bc:	20400001 	.word	0x20400001

080093c0 <_fflush_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	690b      	ldr	r3, [r1, #16]
 80093c4:	4605      	mov	r5, r0
 80093c6:	460c      	mov	r4, r1
 80093c8:	b913      	cbnz	r3, 80093d0 <_fflush_r+0x10>
 80093ca:	2500      	movs	r5, #0
 80093cc:	4628      	mov	r0, r5
 80093ce:	bd38      	pop	{r3, r4, r5, pc}
 80093d0:	b118      	cbz	r0, 80093da <_fflush_r+0x1a>
 80093d2:	6983      	ldr	r3, [r0, #24]
 80093d4:	b90b      	cbnz	r3, 80093da <_fflush_r+0x1a>
 80093d6:	f000 f887 	bl	80094e8 <__sinit>
 80093da:	4b14      	ldr	r3, [pc, #80]	; (800942c <_fflush_r+0x6c>)
 80093dc:	429c      	cmp	r4, r3
 80093de:	d11b      	bne.n	8009418 <_fflush_r+0x58>
 80093e0:	686c      	ldr	r4, [r5, #4]
 80093e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d0ef      	beq.n	80093ca <_fflush_r+0xa>
 80093ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093ec:	07d0      	lsls	r0, r2, #31
 80093ee:	d404      	bmi.n	80093fa <_fflush_r+0x3a>
 80093f0:	0599      	lsls	r1, r3, #22
 80093f2:	d402      	bmi.n	80093fa <_fflush_r+0x3a>
 80093f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093f6:	f000 f927 	bl	8009648 <__retarget_lock_acquire_recursive>
 80093fa:	4628      	mov	r0, r5
 80093fc:	4621      	mov	r1, r4
 80093fe:	f7ff ff59 	bl	80092b4 <__sflush_r>
 8009402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009404:	07da      	lsls	r2, r3, #31
 8009406:	4605      	mov	r5, r0
 8009408:	d4e0      	bmi.n	80093cc <_fflush_r+0xc>
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	059b      	lsls	r3, r3, #22
 800940e:	d4dd      	bmi.n	80093cc <_fflush_r+0xc>
 8009410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009412:	f000 f91a 	bl	800964a <__retarget_lock_release_recursive>
 8009416:	e7d9      	b.n	80093cc <_fflush_r+0xc>
 8009418:	4b05      	ldr	r3, [pc, #20]	; (8009430 <_fflush_r+0x70>)
 800941a:	429c      	cmp	r4, r3
 800941c:	d101      	bne.n	8009422 <_fflush_r+0x62>
 800941e:	68ac      	ldr	r4, [r5, #8]
 8009420:	e7df      	b.n	80093e2 <_fflush_r+0x22>
 8009422:	4b04      	ldr	r3, [pc, #16]	; (8009434 <_fflush_r+0x74>)
 8009424:	429c      	cmp	r4, r3
 8009426:	bf08      	it	eq
 8009428:	68ec      	ldreq	r4, [r5, #12]
 800942a:	e7da      	b.n	80093e2 <_fflush_r+0x22>
 800942c:	0800a414 	.word	0x0800a414
 8009430:	0800a434 	.word	0x0800a434
 8009434:	0800a3f4 	.word	0x0800a3f4

08009438 <std>:
 8009438:	2300      	movs	r3, #0
 800943a:	b510      	push	{r4, lr}
 800943c:	4604      	mov	r4, r0
 800943e:	e9c0 3300 	strd	r3, r3, [r0]
 8009442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009446:	6083      	str	r3, [r0, #8]
 8009448:	8181      	strh	r1, [r0, #12]
 800944a:	6643      	str	r3, [r0, #100]	; 0x64
 800944c:	81c2      	strh	r2, [r0, #14]
 800944e:	6183      	str	r3, [r0, #24]
 8009450:	4619      	mov	r1, r3
 8009452:	2208      	movs	r2, #8
 8009454:	305c      	adds	r0, #92	; 0x5c
 8009456:	f7fb fbcd 	bl	8004bf4 <memset>
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <std+0x38>)
 800945c:	6263      	str	r3, [r4, #36]	; 0x24
 800945e:	4b05      	ldr	r3, [pc, #20]	; (8009474 <std+0x3c>)
 8009460:	62a3      	str	r3, [r4, #40]	; 0x28
 8009462:	4b05      	ldr	r3, [pc, #20]	; (8009478 <std+0x40>)
 8009464:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009466:	4b05      	ldr	r3, [pc, #20]	; (800947c <std+0x44>)
 8009468:	6224      	str	r4, [r4, #32]
 800946a:	6323      	str	r3, [r4, #48]	; 0x30
 800946c:	bd10      	pop	{r4, pc}
 800946e:	bf00      	nop
 8009470:	0800599d 	.word	0x0800599d
 8009474:	080059c3 	.word	0x080059c3
 8009478:	080059fb 	.word	0x080059fb
 800947c:	08005a1f 	.word	0x08005a1f

08009480 <_cleanup_r>:
 8009480:	4901      	ldr	r1, [pc, #4]	; (8009488 <_cleanup_r+0x8>)
 8009482:	f000 b8c1 	b.w	8009608 <_fwalk_reent>
 8009486:	bf00      	nop
 8009488:	080093c1 	.word	0x080093c1

0800948c <__sfmoreglue>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	1e4a      	subs	r2, r1, #1
 8009490:	2568      	movs	r5, #104	; 0x68
 8009492:	4355      	muls	r5, r2
 8009494:	460e      	mov	r6, r1
 8009496:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800949a:	f7ff f8e5 	bl	8008668 <_malloc_r>
 800949e:	4604      	mov	r4, r0
 80094a0:	b140      	cbz	r0, 80094b4 <__sfmoreglue+0x28>
 80094a2:	2100      	movs	r1, #0
 80094a4:	e9c0 1600 	strd	r1, r6, [r0]
 80094a8:	300c      	adds	r0, #12
 80094aa:	60a0      	str	r0, [r4, #8]
 80094ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094b0:	f7fb fba0 	bl	8004bf4 <memset>
 80094b4:	4620      	mov	r0, r4
 80094b6:	bd70      	pop	{r4, r5, r6, pc}

080094b8 <__sfp_lock_acquire>:
 80094b8:	4801      	ldr	r0, [pc, #4]	; (80094c0 <__sfp_lock_acquire+0x8>)
 80094ba:	f000 b8c5 	b.w	8009648 <__retarget_lock_acquire_recursive>
 80094be:	bf00      	nop
 80094c0:	20007f14 	.word	0x20007f14

080094c4 <__sfp_lock_release>:
 80094c4:	4801      	ldr	r0, [pc, #4]	; (80094cc <__sfp_lock_release+0x8>)
 80094c6:	f000 b8c0 	b.w	800964a <__retarget_lock_release_recursive>
 80094ca:	bf00      	nop
 80094cc:	20007f14 	.word	0x20007f14

080094d0 <__sinit_lock_acquire>:
 80094d0:	4801      	ldr	r0, [pc, #4]	; (80094d8 <__sinit_lock_acquire+0x8>)
 80094d2:	f000 b8b9 	b.w	8009648 <__retarget_lock_acquire_recursive>
 80094d6:	bf00      	nop
 80094d8:	20007f0f 	.word	0x20007f0f

080094dc <__sinit_lock_release>:
 80094dc:	4801      	ldr	r0, [pc, #4]	; (80094e4 <__sinit_lock_release+0x8>)
 80094de:	f000 b8b4 	b.w	800964a <__retarget_lock_release_recursive>
 80094e2:	bf00      	nop
 80094e4:	20007f0f 	.word	0x20007f0f

080094e8 <__sinit>:
 80094e8:	b510      	push	{r4, lr}
 80094ea:	4604      	mov	r4, r0
 80094ec:	f7ff fff0 	bl	80094d0 <__sinit_lock_acquire>
 80094f0:	69a3      	ldr	r3, [r4, #24]
 80094f2:	b11b      	cbz	r3, 80094fc <__sinit+0x14>
 80094f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094f8:	f7ff bff0 	b.w	80094dc <__sinit_lock_release>
 80094fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009500:	6523      	str	r3, [r4, #80]	; 0x50
 8009502:	4b13      	ldr	r3, [pc, #76]	; (8009550 <__sinit+0x68>)
 8009504:	4a13      	ldr	r2, [pc, #76]	; (8009554 <__sinit+0x6c>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	62a2      	str	r2, [r4, #40]	; 0x28
 800950a:	42a3      	cmp	r3, r4
 800950c:	bf04      	itt	eq
 800950e:	2301      	moveq	r3, #1
 8009510:	61a3      	streq	r3, [r4, #24]
 8009512:	4620      	mov	r0, r4
 8009514:	f000 f820 	bl	8009558 <__sfp>
 8009518:	6060      	str	r0, [r4, #4]
 800951a:	4620      	mov	r0, r4
 800951c:	f000 f81c 	bl	8009558 <__sfp>
 8009520:	60a0      	str	r0, [r4, #8]
 8009522:	4620      	mov	r0, r4
 8009524:	f000 f818 	bl	8009558 <__sfp>
 8009528:	2200      	movs	r2, #0
 800952a:	60e0      	str	r0, [r4, #12]
 800952c:	2104      	movs	r1, #4
 800952e:	6860      	ldr	r0, [r4, #4]
 8009530:	f7ff ff82 	bl	8009438 <std>
 8009534:	68a0      	ldr	r0, [r4, #8]
 8009536:	2201      	movs	r2, #1
 8009538:	2109      	movs	r1, #9
 800953a:	f7ff ff7d 	bl	8009438 <std>
 800953e:	68e0      	ldr	r0, [r4, #12]
 8009540:	2202      	movs	r2, #2
 8009542:	2112      	movs	r1, #18
 8009544:	f7ff ff78 	bl	8009438 <std>
 8009548:	2301      	movs	r3, #1
 800954a:	61a3      	str	r3, [r4, #24]
 800954c:	e7d2      	b.n	80094f4 <__sinit+0xc>
 800954e:	bf00      	nop
 8009550:	08009f88 	.word	0x08009f88
 8009554:	08009481 	.word	0x08009481

08009558 <__sfp>:
 8009558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955a:	4607      	mov	r7, r0
 800955c:	f7ff ffac 	bl	80094b8 <__sfp_lock_acquire>
 8009560:	4b1e      	ldr	r3, [pc, #120]	; (80095dc <__sfp+0x84>)
 8009562:	681e      	ldr	r6, [r3, #0]
 8009564:	69b3      	ldr	r3, [r6, #24]
 8009566:	b913      	cbnz	r3, 800956e <__sfp+0x16>
 8009568:	4630      	mov	r0, r6
 800956a:	f7ff ffbd 	bl	80094e8 <__sinit>
 800956e:	3648      	adds	r6, #72	; 0x48
 8009570:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009574:	3b01      	subs	r3, #1
 8009576:	d503      	bpl.n	8009580 <__sfp+0x28>
 8009578:	6833      	ldr	r3, [r6, #0]
 800957a:	b30b      	cbz	r3, 80095c0 <__sfp+0x68>
 800957c:	6836      	ldr	r6, [r6, #0]
 800957e:	e7f7      	b.n	8009570 <__sfp+0x18>
 8009580:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009584:	b9d5      	cbnz	r5, 80095bc <__sfp+0x64>
 8009586:	4b16      	ldr	r3, [pc, #88]	; (80095e0 <__sfp+0x88>)
 8009588:	60e3      	str	r3, [r4, #12]
 800958a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800958e:	6665      	str	r5, [r4, #100]	; 0x64
 8009590:	f000 f859 	bl	8009646 <__retarget_lock_init_recursive>
 8009594:	f7ff ff96 	bl	80094c4 <__sfp_lock_release>
 8009598:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800959c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80095a0:	6025      	str	r5, [r4, #0]
 80095a2:	61a5      	str	r5, [r4, #24]
 80095a4:	2208      	movs	r2, #8
 80095a6:	4629      	mov	r1, r5
 80095a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095ac:	f7fb fb22 	bl	8004bf4 <memset>
 80095b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095b8:	4620      	mov	r0, r4
 80095ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095bc:	3468      	adds	r4, #104	; 0x68
 80095be:	e7d9      	b.n	8009574 <__sfp+0x1c>
 80095c0:	2104      	movs	r1, #4
 80095c2:	4638      	mov	r0, r7
 80095c4:	f7ff ff62 	bl	800948c <__sfmoreglue>
 80095c8:	4604      	mov	r4, r0
 80095ca:	6030      	str	r0, [r6, #0]
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d1d5      	bne.n	800957c <__sfp+0x24>
 80095d0:	f7ff ff78 	bl	80094c4 <__sfp_lock_release>
 80095d4:	230c      	movs	r3, #12
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	e7ee      	b.n	80095b8 <__sfp+0x60>
 80095da:	bf00      	nop
 80095dc:	08009f88 	.word	0x08009f88
 80095e0:	ffff0001 	.word	0xffff0001

080095e4 <fiprintf>:
 80095e4:	b40e      	push	{r1, r2, r3}
 80095e6:	b503      	push	{r0, r1, lr}
 80095e8:	4601      	mov	r1, r0
 80095ea:	ab03      	add	r3, sp, #12
 80095ec:	4805      	ldr	r0, [pc, #20]	; (8009604 <fiprintf+0x20>)
 80095ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80095f2:	6800      	ldr	r0, [r0, #0]
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	f000 f89f 	bl	8009738 <_vfiprintf_r>
 80095fa:	b002      	add	sp, #8
 80095fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009600:	b003      	add	sp, #12
 8009602:	4770      	bx	lr
 8009604:	20000030 	.word	0x20000030

08009608 <_fwalk_reent>:
 8009608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800960c:	4606      	mov	r6, r0
 800960e:	4688      	mov	r8, r1
 8009610:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009614:	2700      	movs	r7, #0
 8009616:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800961a:	f1b9 0901 	subs.w	r9, r9, #1
 800961e:	d505      	bpl.n	800962c <_fwalk_reent+0x24>
 8009620:	6824      	ldr	r4, [r4, #0]
 8009622:	2c00      	cmp	r4, #0
 8009624:	d1f7      	bne.n	8009616 <_fwalk_reent+0xe>
 8009626:	4638      	mov	r0, r7
 8009628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800962c:	89ab      	ldrh	r3, [r5, #12]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d907      	bls.n	8009642 <_fwalk_reent+0x3a>
 8009632:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009636:	3301      	adds	r3, #1
 8009638:	d003      	beq.n	8009642 <_fwalk_reent+0x3a>
 800963a:	4629      	mov	r1, r5
 800963c:	4630      	mov	r0, r6
 800963e:	47c0      	blx	r8
 8009640:	4307      	orrs	r7, r0
 8009642:	3568      	adds	r5, #104	; 0x68
 8009644:	e7e9      	b.n	800961a <_fwalk_reent+0x12>

08009646 <__retarget_lock_init_recursive>:
 8009646:	4770      	bx	lr

08009648 <__retarget_lock_acquire_recursive>:
 8009648:	4770      	bx	lr

0800964a <__retarget_lock_release_recursive>:
 800964a:	4770      	bx	lr

0800964c <memmove>:
 800964c:	4288      	cmp	r0, r1
 800964e:	b510      	push	{r4, lr}
 8009650:	eb01 0402 	add.w	r4, r1, r2
 8009654:	d902      	bls.n	800965c <memmove+0x10>
 8009656:	4284      	cmp	r4, r0
 8009658:	4623      	mov	r3, r4
 800965a:	d807      	bhi.n	800966c <memmove+0x20>
 800965c:	1e43      	subs	r3, r0, #1
 800965e:	42a1      	cmp	r1, r4
 8009660:	d008      	beq.n	8009674 <memmove+0x28>
 8009662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009666:	f803 2f01 	strb.w	r2, [r3, #1]!
 800966a:	e7f8      	b.n	800965e <memmove+0x12>
 800966c:	4402      	add	r2, r0
 800966e:	4601      	mov	r1, r0
 8009670:	428a      	cmp	r2, r1
 8009672:	d100      	bne.n	8009676 <memmove+0x2a>
 8009674:	bd10      	pop	{r4, pc}
 8009676:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800967a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800967e:	e7f7      	b.n	8009670 <memmove+0x24>

08009680 <__malloc_lock>:
 8009680:	4801      	ldr	r0, [pc, #4]	; (8009688 <__malloc_lock+0x8>)
 8009682:	f7ff bfe1 	b.w	8009648 <__retarget_lock_acquire_recursive>
 8009686:	bf00      	nop
 8009688:	20007f10 	.word	0x20007f10

0800968c <__malloc_unlock>:
 800968c:	4801      	ldr	r0, [pc, #4]	; (8009694 <__malloc_unlock+0x8>)
 800968e:	f7ff bfdc 	b.w	800964a <__retarget_lock_release_recursive>
 8009692:	bf00      	nop
 8009694:	20007f10 	.word	0x20007f10

08009698 <_realloc_r>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	4607      	mov	r7, r0
 800969c:	4614      	mov	r4, r2
 800969e:	460e      	mov	r6, r1
 80096a0:	b921      	cbnz	r1, 80096ac <_realloc_r+0x14>
 80096a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096a6:	4611      	mov	r1, r2
 80096a8:	f7fe bfde 	b.w	8008668 <_malloc_r>
 80096ac:	b922      	cbnz	r2, 80096b8 <_realloc_r+0x20>
 80096ae:	f7fe ff8b 	bl	80085c8 <_free_r>
 80096b2:	4625      	mov	r5, r4
 80096b4:	4628      	mov	r0, r5
 80096b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b8:	f000 fa9a 	bl	8009bf0 <_malloc_usable_size_r>
 80096bc:	42a0      	cmp	r0, r4
 80096be:	d20f      	bcs.n	80096e0 <_realloc_r+0x48>
 80096c0:	4621      	mov	r1, r4
 80096c2:	4638      	mov	r0, r7
 80096c4:	f7fe ffd0 	bl	8008668 <_malloc_r>
 80096c8:	4605      	mov	r5, r0
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d0f2      	beq.n	80096b4 <_realloc_r+0x1c>
 80096ce:	4631      	mov	r1, r6
 80096d0:	4622      	mov	r2, r4
 80096d2:	f7fe faa1 	bl	8007c18 <memcpy>
 80096d6:	4631      	mov	r1, r6
 80096d8:	4638      	mov	r0, r7
 80096da:	f7fe ff75 	bl	80085c8 <_free_r>
 80096de:	e7e9      	b.n	80096b4 <_realloc_r+0x1c>
 80096e0:	4635      	mov	r5, r6
 80096e2:	e7e7      	b.n	80096b4 <_realloc_r+0x1c>

080096e4 <__sfputc_r>:
 80096e4:	6893      	ldr	r3, [r2, #8]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	b410      	push	{r4}
 80096ec:	6093      	str	r3, [r2, #8]
 80096ee:	da08      	bge.n	8009702 <__sfputc_r+0x1e>
 80096f0:	6994      	ldr	r4, [r2, #24]
 80096f2:	42a3      	cmp	r3, r4
 80096f4:	db01      	blt.n	80096fa <__sfputc_r+0x16>
 80096f6:	290a      	cmp	r1, #10
 80096f8:	d103      	bne.n	8009702 <__sfputc_r+0x1e>
 80096fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096fe:	f000 b94b 	b.w	8009998 <__swbuf_r>
 8009702:	6813      	ldr	r3, [r2, #0]
 8009704:	1c58      	adds	r0, r3, #1
 8009706:	6010      	str	r0, [r2, #0]
 8009708:	7019      	strb	r1, [r3, #0]
 800970a:	4608      	mov	r0, r1
 800970c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009710:	4770      	bx	lr

08009712 <__sfputs_r>:
 8009712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009714:	4606      	mov	r6, r0
 8009716:	460f      	mov	r7, r1
 8009718:	4614      	mov	r4, r2
 800971a:	18d5      	adds	r5, r2, r3
 800971c:	42ac      	cmp	r4, r5
 800971e:	d101      	bne.n	8009724 <__sfputs_r+0x12>
 8009720:	2000      	movs	r0, #0
 8009722:	e007      	b.n	8009734 <__sfputs_r+0x22>
 8009724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009728:	463a      	mov	r2, r7
 800972a:	4630      	mov	r0, r6
 800972c:	f7ff ffda 	bl	80096e4 <__sfputc_r>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d1f3      	bne.n	800971c <__sfputs_r+0xa>
 8009734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009738 <_vfiprintf_r>:
 8009738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	460d      	mov	r5, r1
 800973e:	b09d      	sub	sp, #116	; 0x74
 8009740:	4614      	mov	r4, r2
 8009742:	4698      	mov	r8, r3
 8009744:	4606      	mov	r6, r0
 8009746:	b118      	cbz	r0, 8009750 <_vfiprintf_r+0x18>
 8009748:	6983      	ldr	r3, [r0, #24]
 800974a:	b90b      	cbnz	r3, 8009750 <_vfiprintf_r+0x18>
 800974c:	f7ff fecc 	bl	80094e8 <__sinit>
 8009750:	4b89      	ldr	r3, [pc, #548]	; (8009978 <_vfiprintf_r+0x240>)
 8009752:	429d      	cmp	r5, r3
 8009754:	d11b      	bne.n	800978e <_vfiprintf_r+0x56>
 8009756:	6875      	ldr	r5, [r6, #4]
 8009758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800975a:	07d9      	lsls	r1, r3, #31
 800975c:	d405      	bmi.n	800976a <_vfiprintf_r+0x32>
 800975e:	89ab      	ldrh	r3, [r5, #12]
 8009760:	059a      	lsls	r2, r3, #22
 8009762:	d402      	bmi.n	800976a <_vfiprintf_r+0x32>
 8009764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009766:	f7ff ff6f 	bl	8009648 <__retarget_lock_acquire_recursive>
 800976a:	89ab      	ldrh	r3, [r5, #12]
 800976c:	071b      	lsls	r3, r3, #28
 800976e:	d501      	bpl.n	8009774 <_vfiprintf_r+0x3c>
 8009770:	692b      	ldr	r3, [r5, #16]
 8009772:	b9eb      	cbnz	r3, 80097b0 <_vfiprintf_r+0x78>
 8009774:	4629      	mov	r1, r5
 8009776:	4630      	mov	r0, r6
 8009778:	f000 f960 	bl	8009a3c <__swsetup_r>
 800977c:	b1c0      	cbz	r0, 80097b0 <_vfiprintf_r+0x78>
 800977e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009780:	07dc      	lsls	r4, r3, #31
 8009782:	d50e      	bpl.n	80097a2 <_vfiprintf_r+0x6a>
 8009784:	f04f 30ff 	mov.w	r0, #4294967295
 8009788:	b01d      	add	sp, #116	; 0x74
 800978a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978e:	4b7b      	ldr	r3, [pc, #492]	; (800997c <_vfiprintf_r+0x244>)
 8009790:	429d      	cmp	r5, r3
 8009792:	d101      	bne.n	8009798 <_vfiprintf_r+0x60>
 8009794:	68b5      	ldr	r5, [r6, #8]
 8009796:	e7df      	b.n	8009758 <_vfiprintf_r+0x20>
 8009798:	4b79      	ldr	r3, [pc, #484]	; (8009980 <_vfiprintf_r+0x248>)
 800979a:	429d      	cmp	r5, r3
 800979c:	bf08      	it	eq
 800979e:	68f5      	ldreq	r5, [r6, #12]
 80097a0:	e7da      	b.n	8009758 <_vfiprintf_r+0x20>
 80097a2:	89ab      	ldrh	r3, [r5, #12]
 80097a4:	0598      	lsls	r0, r3, #22
 80097a6:	d4ed      	bmi.n	8009784 <_vfiprintf_r+0x4c>
 80097a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097aa:	f7ff ff4e 	bl	800964a <__retarget_lock_release_recursive>
 80097ae:	e7e9      	b.n	8009784 <_vfiprintf_r+0x4c>
 80097b0:	2300      	movs	r3, #0
 80097b2:	9309      	str	r3, [sp, #36]	; 0x24
 80097b4:	2320      	movs	r3, #32
 80097b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80097be:	2330      	movs	r3, #48	; 0x30
 80097c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009984 <_vfiprintf_r+0x24c>
 80097c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097c8:	f04f 0901 	mov.w	r9, #1
 80097cc:	4623      	mov	r3, r4
 80097ce:	469a      	mov	sl, r3
 80097d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097d4:	b10a      	cbz	r2, 80097da <_vfiprintf_r+0xa2>
 80097d6:	2a25      	cmp	r2, #37	; 0x25
 80097d8:	d1f9      	bne.n	80097ce <_vfiprintf_r+0x96>
 80097da:	ebba 0b04 	subs.w	fp, sl, r4
 80097de:	d00b      	beq.n	80097f8 <_vfiprintf_r+0xc0>
 80097e0:	465b      	mov	r3, fp
 80097e2:	4622      	mov	r2, r4
 80097e4:	4629      	mov	r1, r5
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7ff ff93 	bl	8009712 <__sfputs_r>
 80097ec:	3001      	adds	r0, #1
 80097ee:	f000 80aa 	beq.w	8009946 <_vfiprintf_r+0x20e>
 80097f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f4:	445a      	add	r2, fp
 80097f6:	9209      	str	r2, [sp, #36]	; 0x24
 80097f8:	f89a 3000 	ldrb.w	r3, [sl]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 80a2 	beq.w	8009946 <_vfiprintf_r+0x20e>
 8009802:	2300      	movs	r3, #0
 8009804:	f04f 32ff 	mov.w	r2, #4294967295
 8009808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800980c:	f10a 0a01 	add.w	sl, sl, #1
 8009810:	9304      	str	r3, [sp, #16]
 8009812:	9307      	str	r3, [sp, #28]
 8009814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009818:	931a      	str	r3, [sp, #104]	; 0x68
 800981a:	4654      	mov	r4, sl
 800981c:	2205      	movs	r2, #5
 800981e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009822:	4858      	ldr	r0, [pc, #352]	; (8009984 <_vfiprintf_r+0x24c>)
 8009824:	f7f6 fcf4 	bl	8000210 <memchr>
 8009828:	9a04      	ldr	r2, [sp, #16]
 800982a:	b9d8      	cbnz	r0, 8009864 <_vfiprintf_r+0x12c>
 800982c:	06d1      	lsls	r1, r2, #27
 800982e:	bf44      	itt	mi
 8009830:	2320      	movmi	r3, #32
 8009832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009836:	0713      	lsls	r3, r2, #28
 8009838:	bf44      	itt	mi
 800983a:	232b      	movmi	r3, #43	; 0x2b
 800983c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009840:	f89a 3000 	ldrb.w	r3, [sl]
 8009844:	2b2a      	cmp	r3, #42	; 0x2a
 8009846:	d015      	beq.n	8009874 <_vfiprintf_r+0x13c>
 8009848:	9a07      	ldr	r2, [sp, #28]
 800984a:	4654      	mov	r4, sl
 800984c:	2000      	movs	r0, #0
 800984e:	f04f 0c0a 	mov.w	ip, #10
 8009852:	4621      	mov	r1, r4
 8009854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009858:	3b30      	subs	r3, #48	; 0x30
 800985a:	2b09      	cmp	r3, #9
 800985c:	d94e      	bls.n	80098fc <_vfiprintf_r+0x1c4>
 800985e:	b1b0      	cbz	r0, 800988e <_vfiprintf_r+0x156>
 8009860:	9207      	str	r2, [sp, #28]
 8009862:	e014      	b.n	800988e <_vfiprintf_r+0x156>
 8009864:	eba0 0308 	sub.w	r3, r0, r8
 8009868:	fa09 f303 	lsl.w	r3, r9, r3
 800986c:	4313      	orrs	r3, r2
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	46a2      	mov	sl, r4
 8009872:	e7d2      	b.n	800981a <_vfiprintf_r+0xe2>
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	1d19      	adds	r1, r3, #4
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	9103      	str	r1, [sp, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	bfbb      	ittet	lt
 8009880:	425b      	neglt	r3, r3
 8009882:	f042 0202 	orrlt.w	r2, r2, #2
 8009886:	9307      	strge	r3, [sp, #28]
 8009888:	9307      	strlt	r3, [sp, #28]
 800988a:	bfb8      	it	lt
 800988c:	9204      	strlt	r2, [sp, #16]
 800988e:	7823      	ldrb	r3, [r4, #0]
 8009890:	2b2e      	cmp	r3, #46	; 0x2e
 8009892:	d10c      	bne.n	80098ae <_vfiprintf_r+0x176>
 8009894:	7863      	ldrb	r3, [r4, #1]
 8009896:	2b2a      	cmp	r3, #42	; 0x2a
 8009898:	d135      	bne.n	8009906 <_vfiprintf_r+0x1ce>
 800989a:	9b03      	ldr	r3, [sp, #12]
 800989c:	1d1a      	adds	r2, r3, #4
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	9203      	str	r2, [sp, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	bfb8      	it	lt
 80098a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80098aa:	3402      	adds	r4, #2
 80098ac:	9305      	str	r3, [sp, #20]
 80098ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009994 <_vfiprintf_r+0x25c>
 80098b2:	7821      	ldrb	r1, [r4, #0]
 80098b4:	2203      	movs	r2, #3
 80098b6:	4650      	mov	r0, sl
 80098b8:	f7f6 fcaa 	bl	8000210 <memchr>
 80098bc:	b140      	cbz	r0, 80098d0 <_vfiprintf_r+0x198>
 80098be:	2340      	movs	r3, #64	; 0x40
 80098c0:	eba0 000a 	sub.w	r0, r0, sl
 80098c4:	fa03 f000 	lsl.w	r0, r3, r0
 80098c8:	9b04      	ldr	r3, [sp, #16]
 80098ca:	4303      	orrs	r3, r0
 80098cc:	3401      	adds	r4, #1
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d4:	482c      	ldr	r0, [pc, #176]	; (8009988 <_vfiprintf_r+0x250>)
 80098d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098da:	2206      	movs	r2, #6
 80098dc:	f7f6 fc98 	bl	8000210 <memchr>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d03f      	beq.n	8009964 <_vfiprintf_r+0x22c>
 80098e4:	4b29      	ldr	r3, [pc, #164]	; (800998c <_vfiprintf_r+0x254>)
 80098e6:	bb1b      	cbnz	r3, 8009930 <_vfiprintf_r+0x1f8>
 80098e8:	9b03      	ldr	r3, [sp, #12]
 80098ea:	3307      	adds	r3, #7
 80098ec:	f023 0307 	bic.w	r3, r3, #7
 80098f0:	3308      	adds	r3, #8
 80098f2:	9303      	str	r3, [sp, #12]
 80098f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f6:	443b      	add	r3, r7
 80098f8:	9309      	str	r3, [sp, #36]	; 0x24
 80098fa:	e767      	b.n	80097cc <_vfiprintf_r+0x94>
 80098fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009900:	460c      	mov	r4, r1
 8009902:	2001      	movs	r0, #1
 8009904:	e7a5      	b.n	8009852 <_vfiprintf_r+0x11a>
 8009906:	2300      	movs	r3, #0
 8009908:	3401      	adds	r4, #1
 800990a:	9305      	str	r3, [sp, #20]
 800990c:	4619      	mov	r1, r3
 800990e:	f04f 0c0a 	mov.w	ip, #10
 8009912:	4620      	mov	r0, r4
 8009914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009918:	3a30      	subs	r2, #48	; 0x30
 800991a:	2a09      	cmp	r2, #9
 800991c:	d903      	bls.n	8009926 <_vfiprintf_r+0x1ee>
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0c5      	beq.n	80098ae <_vfiprintf_r+0x176>
 8009922:	9105      	str	r1, [sp, #20]
 8009924:	e7c3      	b.n	80098ae <_vfiprintf_r+0x176>
 8009926:	fb0c 2101 	mla	r1, ip, r1, r2
 800992a:	4604      	mov	r4, r0
 800992c:	2301      	movs	r3, #1
 800992e:	e7f0      	b.n	8009912 <_vfiprintf_r+0x1da>
 8009930:	ab03      	add	r3, sp, #12
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	462a      	mov	r2, r5
 8009936:	4b16      	ldr	r3, [pc, #88]	; (8009990 <_vfiprintf_r+0x258>)
 8009938:	a904      	add	r1, sp, #16
 800993a:	4630      	mov	r0, r6
 800993c:	f7fb fa02 	bl	8004d44 <_printf_float>
 8009940:	4607      	mov	r7, r0
 8009942:	1c78      	adds	r0, r7, #1
 8009944:	d1d6      	bne.n	80098f4 <_vfiprintf_r+0x1bc>
 8009946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009948:	07d9      	lsls	r1, r3, #31
 800994a:	d405      	bmi.n	8009958 <_vfiprintf_r+0x220>
 800994c:	89ab      	ldrh	r3, [r5, #12]
 800994e:	059a      	lsls	r2, r3, #22
 8009950:	d402      	bmi.n	8009958 <_vfiprintf_r+0x220>
 8009952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009954:	f7ff fe79 	bl	800964a <__retarget_lock_release_recursive>
 8009958:	89ab      	ldrh	r3, [r5, #12]
 800995a:	065b      	lsls	r3, r3, #25
 800995c:	f53f af12 	bmi.w	8009784 <_vfiprintf_r+0x4c>
 8009960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009962:	e711      	b.n	8009788 <_vfiprintf_r+0x50>
 8009964:	ab03      	add	r3, sp, #12
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	462a      	mov	r2, r5
 800996a:	4b09      	ldr	r3, [pc, #36]	; (8009990 <_vfiprintf_r+0x258>)
 800996c:	a904      	add	r1, sp, #16
 800996e:	4630      	mov	r0, r6
 8009970:	f7fb fc8c 	bl	800528c <_printf_i>
 8009974:	e7e4      	b.n	8009940 <_vfiprintf_r+0x208>
 8009976:	bf00      	nop
 8009978:	0800a414 	.word	0x0800a414
 800997c:	0800a434 	.word	0x0800a434
 8009980:	0800a3f4 	.word	0x0800a3f4
 8009984:	0800a38c 	.word	0x0800a38c
 8009988:	0800a396 	.word	0x0800a396
 800998c:	08004d45 	.word	0x08004d45
 8009990:	08009713 	.word	0x08009713
 8009994:	0800a392 	.word	0x0800a392

08009998 <__swbuf_r>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	460e      	mov	r6, r1
 800999c:	4614      	mov	r4, r2
 800999e:	4605      	mov	r5, r0
 80099a0:	b118      	cbz	r0, 80099aa <__swbuf_r+0x12>
 80099a2:	6983      	ldr	r3, [r0, #24]
 80099a4:	b90b      	cbnz	r3, 80099aa <__swbuf_r+0x12>
 80099a6:	f7ff fd9f 	bl	80094e8 <__sinit>
 80099aa:	4b21      	ldr	r3, [pc, #132]	; (8009a30 <__swbuf_r+0x98>)
 80099ac:	429c      	cmp	r4, r3
 80099ae:	d12b      	bne.n	8009a08 <__swbuf_r+0x70>
 80099b0:	686c      	ldr	r4, [r5, #4]
 80099b2:	69a3      	ldr	r3, [r4, #24]
 80099b4:	60a3      	str	r3, [r4, #8]
 80099b6:	89a3      	ldrh	r3, [r4, #12]
 80099b8:	071a      	lsls	r2, r3, #28
 80099ba:	d52f      	bpl.n	8009a1c <__swbuf_r+0x84>
 80099bc:	6923      	ldr	r3, [r4, #16]
 80099be:	b36b      	cbz	r3, 8009a1c <__swbuf_r+0x84>
 80099c0:	6923      	ldr	r3, [r4, #16]
 80099c2:	6820      	ldr	r0, [r4, #0]
 80099c4:	1ac0      	subs	r0, r0, r3
 80099c6:	6963      	ldr	r3, [r4, #20]
 80099c8:	b2f6      	uxtb	r6, r6
 80099ca:	4283      	cmp	r3, r0
 80099cc:	4637      	mov	r7, r6
 80099ce:	dc04      	bgt.n	80099da <__swbuf_r+0x42>
 80099d0:	4621      	mov	r1, r4
 80099d2:	4628      	mov	r0, r5
 80099d4:	f7ff fcf4 	bl	80093c0 <_fflush_r>
 80099d8:	bb30      	cbnz	r0, 8009a28 <__swbuf_r+0x90>
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	3b01      	subs	r3, #1
 80099de:	60a3      	str	r3, [r4, #8]
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	1c5a      	adds	r2, r3, #1
 80099e4:	6022      	str	r2, [r4, #0]
 80099e6:	701e      	strb	r6, [r3, #0]
 80099e8:	6963      	ldr	r3, [r4, #20]
 80099ea:	3001      	adds	r0, #1
 80099ec:	4283      	cmp	r3, r0
 80099ee:	d004      	beq.n	80099fa <__swbuf_r+0x62>
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	07db      	lsls	r3, r3, #31
 80099f4:	d506      	bpl.n	8009a04 <__swbuf_r+0x6c>
 80099f6:	2e0a      	cmp	r6, #10
 80099f8:	d104      	bne.n	8009a04 <__swbuf_r+0x6c>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4628      	mov	r0, r5
 80099fe:	f7ff fcdf 	bl	80093c0 <_fflush_r>
 8009a02:	b988      	cbnz	r0, 8009a28 <__swbuf_r+0x90>
 8009a04:	4638      	mov	r0, r7
 8009a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a08:	4b0a      	ldr	r3, [pc, #40]	; (8009a34 <__swbuf_r+0x9c>)
 8009a0a:	429c      	cmp	r4, r3
 8009a0c:	d101      	bne.n	8009a12 <__swbuf_r+0x7a>
 8009a0e:	68ac      	ldr	r4, [r5, #8]
 8009a10:	e7cf      	b.n	80099b2 <__swbuf_r+0x1a>
 8009a12:	4b09      	ldr	r3, [pc, #36]	; (8009a38 <__swbuf_r+0xa0>)
 8009a14:	429c      	cmp	r4, r3
 8009a16:	bf08      	it	eq
 8009a18:	68ec      	ldreq	r4, [r5, #12]
 8009a1a:	e7ca      	b.n	80099b2 <__swbuf_r+0x1a>
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 f80c 	bl	8009a3c <__swsetup_r>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d0cb      	beq.n	80099c0 <__swbuf_r+0x28>
 8009a28:	f04f 37ff 	mov.w	r7, #4294967295
 8009a2c:	e7ea      	b.n	8009a04 <__swbuf_r+0x6c>
 8009a2e:	bf00      	nop
 8009a30:	0800a414 	.word	0x0800a414
 8009a34:	0800a434 	.word	0x0800a434
 8009a38:	0800a3f4 	.word	0x0800a3f4

08009a3c <__swsetup_r>:
 8009a3c:	4b32      	ldr	r3, [pc, #200]	; (8009b08 <__swsetup_r+0xcc>)
 8009a3e:	b570      	push	{r4, r5, r6, lr}
 8009a40:	681d      	ldr	r5, [r3, #0]
 8009a42:	4606      	mov	r6, r0
 8009a44:	460c      	mov	r4, r1
 8009a46:	b125      	cbz	r5, 8009a52 <__swsetup_r+0x16>
 8009a48:	69ab      	ldr	r3, [r5, #24]
 8009a4a:	b913      	cbnz	r3, 8009a52 <__swsetup_r+0x16>
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	f7ff fd4b 	bl	80094e8 <__sinit>
 8009a52:	4b2e      	ldr	r3, [pc, #184]	; (8009b0c <__swsetup_r+0xd0>)
 8009a54:	429c      	cmp	r4, r3
 8009a56:	d10f      	bne.n	8009a78 <__swsetup_r+0x3c>
 8009a58:	686c      	ldr	r4, [r5, #4]
 8009a5a:	89a3      	ldrh	r3, [r4, #12]
 8009a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a60:	0719      	lsls	r1, r3, #28
 8009a62:	d42c      	bmi.n	8009abe <__swsetup_r+0x82>
 8009a64:	06dd      	lsls	r5, r3, #27
 8009a66:	d411      	bmi.n	8009a8c <__swsetup_r+0x50>
 8009a68:	2309      	movs	r3, #9
 8009a6a:	6033      	str	r3, [r6, #0]
 8009a6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a70:	81a3      	strh	r3, [r4, #12]
 8009a72:	f04f 30ff 	mov.w	r0, #4294967295
 8009a76:	e03e      	b.n	8009af6 <__swsetup_r+0xba>
 8009a78:	4b25      	ldr	r3, [pc, #148]	; (8009b10 <__swsetup_r+0xd4>)
 8009a7a:	429c      	cmp	r4, r3
 8009a7c:	d101      	bne.n	8009a82 <__swsetup_r+0x46>
 8009a7e:	68ac      	ldr	r4, [r5, #8]
 8009a80:	e7eb      	b.n	8009a5a <__swsetup_r+0x1e>
 8009a82:	4b24      	ldr	r3, [pc, #144]	; (8009b14 <__swsetup_r+0xd8>)
 8009a84:	429c      	cmp	r4, r3
 8009a86:	bf08      	it	eq
 8009a88:	68ec      	ldreq	r4, [r5, #12]
 8009a8a:	e7e6      	b.n	8009a5a <__swsetup_r+0x1e>
 8009a8c:	0758      	lsls	r0, r3, #29
 8009a8e:	d512      	bpl.n	8009ab6 <__swsetup_r+0x7a>
 8009a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a92:	b141      	cbz	r1, 8009aa6 <__swsetup_r+0x6a>
 8009a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a98:	4299      	cmp	r1, r3
 8009a9a:	d002      	beq.n	8009aa2 <__swsetup_r+0x66>
 8009a9c:	4630      	mov	r0, r6
 8009a9e:	f7fe fd93 	bl	80085c8 <_free_r>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	6363      	str	r3, [r4, #52]	; 0x34
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009aac:	81a3      	strh	r3, [r4, #12]
 8009aae:	2300      	movs	r3, #0
 8009ab0:	6063      	str	r3, [r4, #4]
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	6023      	str	r3, [r4, #0]
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	f043 0308 	orr.w	r3, r3, #8
 8009abc:	81a3      	strh	r3, [r4, #12]
 8009abe:	6923      	ldr	r3, [r4, #16]
 8009ac0:	b94b      	cbnz	r3, 8009ad6 <__swsetup_r+0x9a>
 8009ac2:	89a3      	ldrh	r3, [r4, #12]
 8009ac4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009acc:	d003      	beq.n	8009ad6 <__swsetup_r+0x9a>
 8009ace:	4621      	mov	r1, r4
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f000 f84d 	bl	8009b70 <__smakebuf_r>
 8009ad6:	89a0      	ldrh	r0, [r4, #12]
 8009ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009adc:	f010 0301 	ands.w	r3, r0, #1
 8009ae0:	d00a      	beq.n	8009af8 <__swsetup_r+0xbc>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60a3      	str	r3, [r4, #8]
 8009ae6:	6963      	ldr	r3, [r4, #20]
 8009ae8:	425b      	negs	r3, r3
 8009aea:	61a3      	str	r3, [r4, #24]
 8009aec:	6923      	ldr	r3, [r4, #16]
 8009aee:	b943      	cbnz	r3, 8009b02 <__swsetup_r+0xc6>
 8009af0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009af4:	d1ba      	bne.n	8009a6c <__swsetup_r+0x30>
 8009af6:	bd70      	pop	{r4, r5, r6, pc}
 8009af8:	0781      	lsls	r1, r0, #30
 8009afa:	bf58      	it	pl
 8009afc:	6963      	ldrpl	r3, [r4, #20]
 8009afe:	60a3      	str	r3, [r4, #8]
 8009b00:	e7f4      	b.n	8009aec <__swsetup_r+0xb0>
 8009b02:	2000      	movs	r0, #0
 8009b04:	e7f7      	b.n	8009af6 <__swsetup_r+0xba>
 8009b06:	bf00      	nop
 8009b08:	20000030 	.word	0x20000030
 8009b0c:	0800a414 	.word	0x0800a414
 8009b10:	0800a434 	.word	0x0800a434
 8009b14:	0800a3f4 	.word	0x0800a3f4

08009b18 <abort>:
 8009b18:	b508      	push	{r3, lr}
 8009b1a:	2006      	movs	r0, #6
 8009b1c:	f000 f898 	bl	8009c50 <raise>
 8009b20:	2001      	movs	r0, #1
 8009b22:	f7f8 fb79 	bl	8002218 <_exit>

08009b26 <__swhatbuf_r>:
 8009b26:	b570      	push	{r4, r5, r6, lr}
 8009b28:	460e      	mov	r6, r1
 8009b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b2e:	2900      	cmp	r1, #0
 8009b30:	b096      	sub	sp, #88	; 0x58
 8009b32:	4614      	mov	r4, r2
 8009b34:	461d      	mov	r5, r3
 8009b36:	da07      	bge.n	8009b48 <__swhatbuf_r+0x22>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	89b3      	ldrh	r3, [r6, #12]
 8009b3e:	061a      	lsls	r2, r3, #24
 8009b40:	d410      	bmi.n	8009b64 <__swhatbuf_r+0x3e>
 8009b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b46:	e00e      	b.n	8009b66 <__swhatbuf_r+0x40>
 8009b48:	466a      	mov	r2, sp
 8009b4a:	f000 f89d 	bl	8009c88 <_fstat_r>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	dbf2      	blt.n	8009b38 <__swhatbuf_r+0x12>
 8009b52:	9a01      	ldr	r2, [sp, #4]
 8009b54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b5c:	425a      	negs	r2, r3
 8009b5e:	415a      	adcs	r2, r3
 8009b60:	602a      	str	r2, [r5, #0]
 8009b62:	e7ee      	b.n	8009b42 <__swhatbuf_r+0x1c>
 8009b64:	2340      	movs	r3, #64	; 0x40
 8009b66:	2000      	movs	r0, #0
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	b016      	add	sp, #88	; 0x58
 8009b6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009b70 <__smakebuf_r>:
 8009b70:	898b      	ldrh	r3, [r1, #12]
 8009b72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b74:	079d      	lsls	r5, r3, #30
 8009b76:	4606      	mov	r6, r0
 8009b78:	460c      	mov	r4, r1
 8009b7a:	d507      	bpl.n	8009b8c <__smakebuf_r+0x1c>
 8009b7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	6123      	str	r3, [r4, #16]
 8009b84:	2301      	movs	r3, #1
 8009b86:	6163      	str	r3, [r4, #20]
 8009b88:	b002      	add	sp, #8
 8009b8a:	bd70      	pop	{r4, r5, r6, pc}
 8009b8c:	ab01      	add	r3, sp, #4
 8009b8e:	466a      	mov	r2, sp
 8009b90:	f7ff ffc9 	bl	8009b26 <__swhatbuf_r>
 8009b94:	9900      	ldr	r1, [sp, #0]
 8009b96:	4605      	mov	r5, r0
 8009b98:	4630      	mov	r0, r6
 8009b9a:	f7fe fd65 	bl	8008668 <_malloc_r>
 8009b9e:	b948      	cbnz	r0, 8009bb4 <__smakebuf_r+0x44>
 8009ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ba4:	059a      	lsls	r2, r3, #22
 8009ba6:	d4ef      	bmi.n	8009b88 <__smakebuf_r+0x18>
 8009ba8:	f023 0303 	bic.w	r3, r3, #3
 8009bac:	f043 0302 	orr.w	r3, r3, #2
 8009bb0:	81a3      	strh	r3, [r4, #12]
 8009bb2:	e7e3      	b.n	8009b7c <__smakebuf_r+0xc>
 8009bb4:	4b0d      	ldr	r3, [pc, #52]	; (8009bec <__smakebuf_r+0x7c>)
 8009bb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	6020      	str	r0, [r4, #0]
 8009bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	9b00      	ldr	r3, [sp, #0]
 8009bc4:	6163      	str	r3, [r4, #20]
 8009bc6:	9b01      	ldr	r3, [sp, #4]
 8009bc8:	6120      	str	r0, [r4, #16]
 8009bca:	b15b      	cbz	r3, 8009be4 <__smakebuf_r+0x74>
 8009bcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f000 f86b 	bl	8009cac <_isatty_r>
 8009bd6:	b128      	cbz	r0, 8009be4 <__smakebuf_r+0x74>
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	f023 0303 	bic.w	r3, r3, #3
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	89a0      	ldrh	r0, [r4, #12]
 8009be6:	4305      	orrs	r5, r0
 8009be8:	81a5      	strh	r5, [r4, #12]
 8009bea:	e7cd      	b.n	8009b88 <__smakebuf_r+0x18>
 8009bec:	08009481 	.word	0x08009481

08009bf0 <_malloc_usable_size_r>:
 8009bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bf4:	1f18      	subs	r0, r3, #4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	bfbc      	itt	lt
 8009bfa:	580b      	ldrlt	r3, [r1, r0]
 8009bfc:	18c0      	addlt	r0, r0, r3
 8009bfe:	4770      	bx	lr

08009c00 <_raise_r>:
 8009c00:	291f      	cmp	r1, #31
 8009c02:	b538      	push	{r3, r4, r5, lr}
 8009c04:	4604      	mov	r4, r0
 8009c06:	460d      	mov	r5, r1
 8009c08:	d904      	bls.n	8009c14 <_raise_r+0x14>
 8009c0a:	2316      	movs	r3, #22
 8009c0c:	6003      	str	r3, [r0, #0]
 8009c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c12:	bd38      	pop	{r3, r4, r5, pc}
 8009c14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c16:	b112      	cbz	r2, 8009c1e <_raise_r+0x1e>
 8009c18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c1c:	b94b      	cbnz	r3, 8009c32 <_raise_r+0x32>
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f000 f830 	bl	8009c84 <_getpid_r>
 8009c24:	462a      	mov	r2, r5
 8009c26:	4601      	mov	r1, r0
 8009c28:	4620      	mov	r0, r4
 8009c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c2e:	f000 b817 	b.w	8009c60 <_kill_r>
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d00a      	beq.n	8009c4c <_raise_r+0x4c>
 8009c36:	1c59      	adds	r1, r3, #1
 8009c38:	d103      	bne.n	8009c42 <_raise_r+0x42>
 8009c3a:	2316      	movs	r3, #22
 8009c3c:	6003      	str	r3, [r0, #0]
 8009c3e:	2001      	movs	r0, #1
 8009c40:	e7e7      	b.n	8009c12 <_raise_r+0x12>
 8009c42:	2400      	movs	r4, #0
 8009c44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c48:	4628      	mov	r0, r5
 8009c4a:	4798      	blx	r3
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	e7e0      	b.n	8009c12 <_raise_r+0x12>

08009c50 <raise>:
 8009c50:	4b02      	ldr	r3, [pc, #8]	; (8009c5c <raise+0xc>)
 8009c52:	4601      	mov	r1, r0
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	f7ff bfd3 	b.w	8009c00 <_raise_r>
 8009c5a:	bf00      	nop
 8009c5c:	20000030 	.word	0x20000030

08009c60 <_kill_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d07      	ldr	r5, [pc, #28]	; (8009c80 <_kill_r+0x20>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	602b      	str	r3, [r5, #0]
 8009c6e:	f7f8 fac3 	bl	80021f8 <_kill>
 8009c72:	1c43      	adds	r3, r0, #1
 8009c74:	d102      	bne.n	8009c7c <_kill_r+0x1c>
 8009c76:	682b      	ldr	r3, [r5, #0]
 8009c78:	b103      	cbz	r3, 8009c7c <_kill_r+0x1c>
 8009c7a:	6023      	str	r3, [r4, #0]
 8009c7c:	bd38      	pop	{r3, r4, r5, pc}
 8009c7e:	bf00      	nop
 8009c80:	20007f08 	.word	0x20007f08

08009c84 <_getpid_r>:
 8009c84:	f7f8 bab0 	b.w	80021e8 <_getpid>

08009c88 <_fstat_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4d07      	ldr	r5, [pc, #28]	; (8009ca8 <_fstat_r+0x20>)
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4608      	mov	r0, r1
 8009c92:	4611      	mov	r1, r2
 8009c94:	602b      	str	r3, [r5, #0]
 8009c96:	f7f8 fb0e 	bl	80022b6 <_fstat>
 8009c9a:	1c43      	adds	r3, r0, #1
 8009c9c:	d102      	bne.n	8009ca4 <_fstat_r+0x1c>
 8009c9e:	682b      	ldr	r3, [r5, #0]
 8009ca0:	b103      	cbz	r3, 8009ca4 <_fstat_r+0x1c>
 8009ca2:	6023      	str	r3, [r4, #0]
 8009ca4:	bd38      	pop	{r3, r4, r5, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20007f08 	.word	0x20007f08

08009cac <_isatty_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	4d06      	ldr	r5, [pc, #24]	; (8009cc8 <_isatty_r+0x1c>)
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	4608      	mov	r0, r1
 8009cb6:	602b      	str	r3, [r5, #0]
 8009cb8:	f7f8 fb0d 	bl	80022d6 <_isatty>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_isatty_r+0x1a>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_isatty_r+0x1a>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	20007f08 	.word	0x20007f08

08009ccc <_init>:
 8009ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cce:	bf00      	nop
 8009cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cd2:	bc08      	pop	{r3}
 8009cd4:	469e      	mov	lr, r3
 8009cd6:	4770      	bx	lr

08009cd8 <_fini>:
 8009cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cda:	bf00      	nop
 8009cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cde:	bc08      	pop	{r3}
 8009ce0:	469e      	mov	lr, r3
 8009ce2:	4770      	bx	lr
