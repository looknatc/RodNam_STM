
RodNamHaiTee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e0c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b4  08009fb0  08009fb0  00019fb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a764  0800a764  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800a764  0800a764  0001a764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a76c  0800a76c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a76c  0800a76c  0001a76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a770  0800a770  0001a770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800a774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007d1c  20000204  0800a978  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007f20  0800a978  00027f20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2db  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa7  00000000  00000000  0002d50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002f4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002fe50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c55  00000000  00000000  00030730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b747  00000000  00000000  00048385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009349a  00000000  00000000  00053acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6f66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e70  00000000  00000000  000e6fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000204 	.word	0x20000204
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f94 	.word	0x08009f94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000208 	.word	0x20000208
 80001dc:	08009f94 	.word	0x08009f94

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <serialSend>:
int parWater = 5;
int parDoEvery = 20;
int powerSaveMode = 1;
int tot_delay = 0;

void serialSend(char* str){
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, str, strlen(str), 10);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff f8e5 	bl	80001f4 <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	b29a      	uxth	r2, r3
 800102e:	230a      	movs	r3, #10
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <serialSend+0x24>)
 8001034:	f002 ff95 	bl	8003f62 <HAL_UART_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200056c4 	.word	0x200056c4

08001044 <MY_Delay>:
void MY_Delay(x){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	HAL_Delay(x);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4618      	mov	r0, r3
 8001050:	f001 fb88 	bl	8002764 <HAL_Delay>
	tot_delay+=x;
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <MY_Delay+0x24>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	4a02      	ldr	r2, [pc, #8]	; (8001068 <MY_Delay+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000224 	.word	0x20000224

0800106c <wifisend>:
#define log(x)	serialSend(x)
#define HAL_Delay(x) MY_Delay(x)
void wifisend(char* str){
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, str, strlen(str), 10);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff f8bd 	bl	80001f4 <strlen>
 800107a:	4603      	mov	r3, r0
 800107c:	b29a      	uxth	r2, r3
 800107e:	230a      	movs	r3, #10
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <wifisend+0x24>)
 8001084:	f002 ff6d 	bl	8003f62 <HAL_UART_Transmit>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20005680 	.word	0x20005680

08001094 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) { // Current UART
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a17      	ldr	r2, [pc, #92]	; (80010fc <HAL_UART_RxCpltCallback+0x68>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d111      	bne.n	80010c8 <HAL_UART_RxCpltCallback+0x34>
		Rx_data[Rx_indx++] = Rx_byte;    // Add data to Rx_Buffer
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_UART_RxCpltCallback+0x6c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	b2d1      	uxtb	r1, r2
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_UART_RxCpltCallback+0x6c>)
 80010b0:	7011      	strb	r1, [r2, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b13      	ldr	r3, [pc, #76]	; (8001104 <HAL_UART_RxCpltCallback+0x70>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2d9      	uxtb	r1, r3
 80010ba:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_UART_RxCpltCallback+0x74>)
 80010bc:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &Rx_byte, 1);
 80010be:	2201      	movs	r2, #1
 80010c0:	4910      	ldr	r1, [pc, #64]	; (8001104 <HAL_UART_RxCpltCallback+0x70>)
 80010c2:	480e      	ldr	r0, [pc, #56]	; (80010fc <HAL_UART_RxCpltCallback+0x68>)
 80010c4:	f002 ffdf 	bl	8004086 <HAL_UART_Receive_IT>
	}
	if (huart == &huart2) { // Current UART
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_UART_RxCpltCallback+0x78>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d111      	bne.n	80010f4 <HAL_UART_RxCpltCallback+0x60>
		Rx_data2[Rx_indx2++] = Rx_byte2;    // Add data to Rx_Buffer
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HAL_UART_RxCpltCallback+0x7c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	b2d1      	uxtb	r1, r2
 80010da:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_UART_RxCpltCallback+0x7c>)
 80010dc:	7011      	strb	r1, [r2, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HAL_UART_RxCpltCallback+0x80>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2d9      	uxtb	r1, r3
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_UART_RxCpltCallback+0x84>)
 80010e8:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart2, &Rx_byte2, 1);
 80010ea:	2201      	movs	r2, #1
 80010ec:	4909      	ldr	r1, [pc, #36]	; (8001114 <HAL_UART_RxCpltCallback+0x80>)
 80010ee:	4807      	ldr	r0, [pc, #28]	; (800110c <HAL_UART_RxCpltCallback+0x78>)
 80010f0:	f002 ffc9 	bl	8004086 <HAL_UART_Receive_IT>
	}
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20005680 	.word	0x20005680
 8001100:	20000220 	.word	0x20000220
 8001104:	20007f08 	.word	0x20007f08
 8001108:	20002e34 	.word	0x20002e34
 800110c:	200056c4 	.word	0x200056c4
 8001110:	20000221 	.word	0x20000221
 8001114:	20005634 	.word	0x20005634
 8001118:	20000634 	.word	0x20000634

0800111c <blink>:
void blink(int n){
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	for(int i = 0;i<n;i++){
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	e010      	b.n	800114c <blink+0x30>
		HAL_Delay(150);
 800112a:	2096      	movs	r0, #150	; 0x96
 800112c:	f7ff ff8a 	bl	8001044 <MY_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001130:	2120      	movs	r1, #32
 8001132:	480b      	ldr	r0, [pc, #44]	; (8001160 <blink+0x44>)
 8001134:	f002 fa39 	bl	80035aa <HAL_GPIO_TogglePin>
		HAL_Delay(150);
 8001138:	2096      	movs	r0, #150	; 0x96
 800113a:	f7ff ff83 	bl	8001044 <MY_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800113e:	2120      	movs	r1, #32
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <blink+0x44>)
 8001142:	f002 fa32 	bl	80035aa <HAL_GPIO_TogglePin>
	for(int i = 0;i<n;i++){
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3301      	adds	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	dbea      	blt.n	800112a <blink+0xe>
	}
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40020000 	.word	0x40020000

08001164 <blinkLong>:
void blinkLong(int n){
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	for(int i = 0;i<n;i++){
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	e011      	b.n	8001196 <blinkLong+0x32>
		HAL_Delay(100);
 8001172:	2064      	movs	r0, #100	; 0x64
 8001174:	f7ff ff66 	bl	8001044 <MY_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001178:	2120      	movs	r1, #32
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <blinkLong+0x44>)
 800117c:	f002 fa15 	bl	80035aa <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8001180:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001184:	f7ff ff5e 	bl	8001044 <MY_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001188:	2120      	movs	r1, #32
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <blinkLong+0x44>)
 800118c:	f002 fa0d 	bl	80035aa <HAL_GPIO_TogglePin>
	for(int i = 0;i<n;i++){
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	dbe9      	blt.n	8001172 <blinkLong+0xe>

	}
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40020000 	.word	0x40020000

080011ac <sendCommand>:

void sendCommand(char* id,float hum,int soil,float temp,float light,int relay){
 80011ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011b0:	b0b0      	sub	sp, #192	; 0xc0
 80011b2:	af0a      	add	r7, sp, #40	; 0x28
 80011b4:	6178      	str	r0, [r7, #20]
 80011b6:	ed87 0a04 	vstr	s0, [r7, #16]
 80011ba:	60f9      	str	r1, [r7, #12]
 80011bc:	edc7 0a02 	vstr	s1, [r7, #8]
 80011c0:	ed87 1a01 	vstr	s2, [r7, #4]
 80011c4:	603a      	str	r2, [r7, #0]
	char command[128];
	sprintf(command,"sendData('%s %f %d %f %f %d')\r\n",id,hum,soil,temp,light,relay);
 80011c6:	6938      	ldr	r0, [r7, #16]
 80011c8:	f7ff f9d6 	bl	8000578 <__aeabi_f2d>
 80011cc:	4604      	mov	r4, r0
 80011ce:	460d      	mov	r5, r1
 80011d0:	68b8      	ldr	r0, [r7, #8]
 80011d2:	f7ff f9d1 	bl	8000578 <__aeabi_f2d>
 80011d6:	4680      	mov	r8, r0
 80011d8:	4689      	mov	r9, r1
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff f9cc 	bl	8000578 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f107 0018 	add.w	r0, r7, #24
 80011e8:	6839      	ldr	r1, [r7, #0]
 80011ea:	9108      	str	r1, [sp, #32]
 80011ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80011f0:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	e9cd 4500 	strd	r4, r5, [sp]
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	4909      	ldr	r1, [pc, #36]	; (8001224 <sendCommand+0x78>)
 8001200:	f004 fce4 	bl	8005bcc <siprintf>
	log(command);
 8001204:	f107 0318 	add.w	r3, r7, #24
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff07 	bl	800101c <serialSend>
	wifisend(command);
 800120e:	f107 0318 	add.w	r3, r7, #24
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff2a 	bl	800106c <wifisend>
}
 8001218:	bf00      	nop
 800121a:	3798      	adds	r7, #152	; 0x98
 800121c:	46bd      	mov	sp, r7
 800121e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001222:	bf00      	nop
 8001224:	08009fb0 	.word	0x08009fb0

08001228 <readLineUart>:

int  readLineUart(char* buffer){
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	for(int i = 0;i< Rx_indx;i++){
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e00b      	b.n	800124e <readLineUart+0x26>
		buffer[i] = Rx_data[i];
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	4912      	ldr	r1, [pc, #72]	; (8001288 <readLineUart+0x60>)
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	440a      	add	r2, r1
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i< Rx_indx;i++){
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	3301      	adds	r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <readLineUart+0x64>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4293      	cmp	r3, r2
 800125a:	dbec      	blt.n	8001236 <readLineUart+0xe>
	}
	int ret = Rx_indx;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <readLineUart+0x64>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	60bb      	str	r3, [r7, #8]
	buffer[Rx_indx] = 0;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <readLineUart+0x64>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	461a      	mov	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
	Rx_indx = 0;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <readLineUart+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
	return ret;
 800127a:	68bb      	ldr	r3, [r7, #8]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	20002e34 	.word	0x20002e34
 800128c:	20000220 	.word	0x20000220

08001290 <readLineUart2>:

int  readLineUart2(char* buffer){
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	for(int i = 0;i< Rx_indx2;i++){
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	e00b      	b.n	80012b6 <readLineUart2+0x26>
		buffer[i] = Rx_data2[i];
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	4912      	ldr	r1, [pc, #72]	; (80012f0 <readLineUart2+0x60>)
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	440a      	add	r2, r1
 80012aa:	7812      	ldrb	r2, [r2, #0]
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i< Rx_indx2;i++){
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3301      	adds	r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <readLineUart2+0x64>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4293      	cmp	r3, r2
 80012c2:	dbec      	blt.n	800129e <readLineUart2+0xe>
	}
	int ret = Rx_indx2;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <readLineUart2+0x64>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	60bb      	str	r3, [r7, #8]
	buffer[Rx_indx2] = 0;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <readLineUart2+0x64>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
	Rx_indx2 = 0;
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <readLineUart2+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
	return ret;
 80012e2:	68bb      	ldr	r3, [r7, #8]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	20000634 	.word	0x20000634
 80012f4:	20000221 	.word	0x20000221

080012f8 <powerOnSensor>:
//DHT_DataTypedef DHT11_Data;
float Temperature, Humidity = 1.0;
uint16_t SoilHumidity = 0;
float light = 40.0;
int relayRunning = 0;
void powerOnSensor(){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	log("powerOnSensor\n");
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <powerOnSensor+0x24>)
 80012fe:	f7ff fe8d 	bl	800101c <serialSend>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1); //On
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <powerOnSensor+0x28>)
 800130a:	f002 f935 	bl	8003578 <HAL_GPIO_WritePin>
	// delay 2 sec for DHT
	HAL_Delay(2000);
 800130e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001312:	f7ff fe97 	bl	8001044 <MY_Delay>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	08009fdc 	.word	0x08009fdc
 8001320:	40020800 	.word	0x40020800

08001324 <powerOffSensor>:
void powerOffSensor(){
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	log("powerOffSensor\n");
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <powerOffSensor+0x1c>)
 800132a:	f7ff fe77 	bl	800101c <serialSend>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0); //On
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <powerOffSensor+0x20>)
 8001336:	f002 f91f 	bl	8003578 <HAL_GPIO_WritePin>

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	08009fec 	.word	0x08009fec
 8001344:	40020800 	.word	0x40020800

08001348 <relayOn>:
void relayOn(){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	log("relayOn\n");
 800134c:	4806      	ldr	r0, [pc, #24]	; (8001368 <relayOn+0x20>)
 800134e:	f7ff fe65 	bl	800101c <serialSend>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1); //On
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <relayOn+0x24>)
 800135a:	f002 f90d 	bl	8003578 <HAL_GPIO_WritePin>
	relayRunning = 1;
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <relayOn+0x28>)
 8001360:	2201      	movs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	08009ffc 	.word	0x08009ffc
 800136c:	40020400 	.word	0x40020400
 8001370:	2000022c 	.word	0x2000022c

08001374 <relayOff>:

void relayOff(){
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	log("relayOff\n");
 8001378:	4806      	ldr	r0, [pc, #24]	; (8001394 <relayOff+0x20>)
 800137a:	f7ff fe4f 	bl	800101c <serialSend>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0); //On
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <relayOff+0x24>)
 8001386:	f002 f8f7 	bl	8003578 <HAL_GPIO_WritePin>
	relayRunning = 0;
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <relayOff+0x28>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	0800a008 	.word	0x0800a008
 8001398:	40020400 	.word	0x40020400
 800139c:	2000022c 	.word	0x2000022c

080013a0 <getWifiStatus>:
	for(int i=0;i<len;i++){
		sprintf(tmp,"%02X ",buffer[i]);log(tmp);
	}
	log("\r\n");
}
int getWifiStatus(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b092      	sub	sp, #72	; 0x48
 80013a4:	af00      	add	r7, sp, #0
	char cmd[64];
	//wifisend("showConnectionStatus()\n");
	wifisend("print(connected)\n");
 80013a6:	481f      	ldr	r0, [pc, #124]	; (8001424 <getWifiStatus+0x84>)
 80013a8:	f7ff fe60 	bl	800106c <wifisend>
	HAL_Delay(200);
 80013ac:	20c8      	movs	r0, #200	; 0xc8
 80013ae:	f7ff fe49 	bl	8001044 <MY_Delay>
	int numread = readLineUart(str);
 80013b2:	481d      	ldr	r0, [pc, #116]	; (8001428 <getWifiStatus+0x88>)
 80013b4:	f7ff ff38 	bl	8001228 <readLineUart>
 80013b8:	6478      	str	r0, [r7, #68]	; 0x44
	sprintf(tmp,"getWifiStatus numread =   %d\r\n",numread);
 80013ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013bc:	491b      	ldr	r1, [pc, #108]	; (800142c <getWifiStatus+0x8c>)
 80013be:	481c      	ldr	r0, [pc, #112]	; (8001430 <getWifiStatus+0x90>)
 80013c0:	f004 fc04 	bl	8005bcc <siprintf>
	log(tmp);
 80013c4:	481a      	ldr	r0, [pc, #104]	; (8001430 <getWifiStatus+0x90>)
 80013c6:	f7ff fe29 	bl	800101c <serialSend>
	if(numread >0){
 80013ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	dd25      	ble.n	800141c <getWifiStatus+0x7c>
		char *ptr = strstr(str,"\n");
 80013d0:	210a      	movs	r1, #10
 80013d2:	4815      	ldr	r0, [pc, #84]	; (8001428 <getWifiStatus+0x88>)
 80013d4:	f004 fc8b 	bl	8005cee <strchr>
 80013d8:	6438      	str	r0, [r7, #64]	; 0x40
		if(ptr!=NULL){
 80013da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d01d      	beq.n	800141c <getWifiStatus+0x7c>
			log(ptr);
 80013e0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013e2:	f7ff fe1b 	bl	800101c <serialSend>
			if(sscanf(ptr,"%s",cmd) == 1){
 80013e6:	463b      	mov	r3, r7
 80013e8:	461a      	mov	r2, r3
 80013ea:	4912      	ldr	r1, [pc, #72]	; (8001434 <getWifiStatus+0x94>)
 80013ec:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013ee:	f004 fc0d 	bl	8005c0c <siscanf>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d111      	bne.n	800141c <getWifiStatus+0x7c>
				//sprintf(tmp,"%d %d\r\n",numread,strlen(str));log(tmp);
				//sprintf(tmp,"[%s]",ptr);log(tmp);
				//dumpData(ptr,strlen(ptr));
				if(strcmp(cmd,"true")==0){
 80013f8:	463b      	mov	r3, r7
 80013fa:	490f      	ldr	r1, [pc, #60]	; (8001438 <getWifiStatus+0x98>)
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7fe feef 	bl	80001e0 <strcmp>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d104      	bne.n	8001412 <getWifiStatus+0x72>
					log("connected\r\n");
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <getWifiStatus+0x9c>)
 800140a:	f7ff fe07 	bl	800101c <serialSend>
					return 1;
 800140e:	2301      	movs	r3, #1
 8001410:	e004      	b.n	800141c <getWifiStatus+0x7c>
				}
				else{
					log("disconnect\r\n");
 8001412:	480b      	ldr	r0, [pc, #44]	; (8001440 <getWifiStatus+0xa0>)
 8001414:	f7ff fe02 	bl	800101c <serialSend>
					return 0;
 8001418:	2300      	movs	r3, #0
 800141a:	e7ff      	b.n	800141c <getWifiStatus+0x7c>
				}
			}
		}
	}

}
 800141c:	4618      	mov	r0, r3
 800141e:	3748      	adds	r7, #72	; 0x48
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	0800a020 	.word	0x0800a020
 8001428:	20005708 	.word	0x20005708
 800142c:	0800a034 	.word	0x0800a034
 8001430:	2000023c 	.word	0x2000023c
 8001434:	0800a054 	.word	0x0800a054
 8001438:	0800a058 	.word	0x0800a058
 800143c:	0800a060 	.word	0x0800a060
 8001440:	0800a06c 	.word	0x0800a06c

08001444 <getDHT>:
int getDHT(int debug){
 8001444:	b580      	push	{r7, lr}
 8001446:	b096      	sub	sp, #88	; 0x58
 8001448:	af02      	add	r7, sp, #8
 800144a:	6078      	str	r0, [r7, #4]
	if(debug == 2){
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d101      	bne.n	8001456 <getDHT+0x12>
		powerOnSensor();
 8001452:	f7ff ff51 	bl	80012f8 <powerOnSensor>
	}

	char tmp[64];
	wifisend("getDHT()\n");
 8001456:	481c      	ldr	r0, [pc, #112]	; (80014c8 <getDHT+0x84>)
 8001458:	f7ff fe08 	bl	800106c <wifisend>
	HAL_Delay(2000);
 800145c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001460:	f7ff fdf0 	bl	8001044 <MY_Delay>
	int numread = readLineUart(str);
 8001464:	4819      	ldr	r0, [pc, #100]	; (80014cc <getDHT+0x88>)
 8001466:	f7ff fedf 	bl	8001228 <readLineUart>
 800146a:	64f8      	str	r0, [r7, #76]	; 0x4c
	//sprintf(tmplog,"numread=%d\r\n",numread);log(tmplog);
	if(numread >0){
 800146c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800146e:	2b00      	cmp	r3, #0
 8001470:	dd20      	ble.n	80014b4 <getDHT+0x70>
		if(debug == 1){
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d102      	bne.n	800147e <getDHT+0x3a>
			log(str);
 8001478:	4814      	ldr	r0, [pc, #80]	; (80014cc <getDHT+0x88>)
 800147a:	f7ff fdcf 	bl	800101c <serialSend>
		}
		char *ptr = strstr(str,"\n");
 800147e:	210a      	movs	r1, #10
 8001480:	4812      	ldr	r0, [pc, #72]	; (80014cc <getDHT+0x88>)
 8001482:	f004 fc34 	bl	8005cee <strchr>
 8001486:	64b8      	str	r0, [r7, #72]	; 0x48
		if(ptr!=NULL){
 8001488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800148a:	2b00      	cmp	r3, #0
 800148c:	d012      	beq.n	80014b4 <getDHT+0x70>
			//log(ptr);
			if(sscanf(ptr,"%s %f %f",&tmp[0],&Temperature,&Humidity)==3){
 800148e:	f107 0208 	add.w	r2, r7, #8
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <getDHT+0x8c>)
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <getDHT+0x90>)
 8001498:	490f      	ldr	r1, [pc, #60]	; (80014d8 <getDHT+0x94>)
 800149a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800149c:	f004 fbb6 	bl	8005c0c <siscanf>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d106      	bne.n	80014b4 <getDHT+0x70>
				if(debug == 2){
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d101      	bne.n	80014b0 <getDHT+0x6c>
					powerOffSensor();
 80014ac:	f7ff ff3a 	bl	8001324 <powerOffSensor>
				}

				return 1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e005      	b.n	80014c0 <getDHT+0x7c>
			}
		}
	}
	if(debug == 2){
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d101      	bne.n	80014be <getDHT+0x7a>
		powerOffSensor();
 80014ba:	f7ff ff33 	bl	8001324 <powerOffSensor>
	}
	return 0;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3750      	adds	r7, #80	; 0x50
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	0800a07c 	.word	0x0800a07c
 80014cc:	20005708 	.word	0x20005708
 80014d0:	2000001c 	.word	0x2000001c
 80014d4:	2000062c 	.word	0x2000062c
 80014d8:	0800a088 	.word	0x0800a088

080014dc <getSoil>:

void getSoil(int debug){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	if(debug == 2){
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d101      	bne.n	80014ee <getSoil+0x12>
		powerOnSensor();
 80014ea:	f7ff ff05 	bl	80012f8 <powerOnSensor>
	}
	HAL_ADC_Start(&hadc1);
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <getSoil+0x40>)
 80014f0:	f001 f9a0 	bl	8002834 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 100);
 80014f4:	2164      	movs	r1, #100	; 0x64
 80014f6:	4809      	ldr	r0, [pc, #36]	; (800151c <getSoil+0x40>)
 80014f8:	f001 fa50 	bl	800299c <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result & Map It To PWM DutyCycle
	SoilHumidity = HAL_ADC_GetValue(&hadc1);
 80014fc:	4807      	ldr	r0, [pc, #28]	; (800151c <getSoil+0x40>)
 80014fe:	f001 fad8 	bl	8002ab2 <HAL_ADC_GetValue>
 8001502:	4603      	mov	r3, r0
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <getSoil+0x44>)
 8001508:	801a      	strh	r2, [r3, #0]
	if(debug == 2){
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d101      	bne.n	8001514 <getSoil+0x38>
		powerOffSensor();
 8001510:	f7ff ff08 	bl	8001324 <powerOffSensor>
	}
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20005638 	.word	0x20005638
 8001520:	20000228 	.word	0x20000228

08001524 <upload>:

void upload(){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	sendCommand(deviceID, Humidity, SoilHumidity, Temperature, light, relayRunning);
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <upload+0x58>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a14      	ldr	r2, [pc, #80]	; (8001580 <upload+0x5c>)
 8001530:	edd2 7a00 	vldr	s15, [r2]
 8001534:	4a13      	ldr	r2, [pc, #76]	; (8001584 <upload+0x60>)
 8001536:	8812      	ldrh	r2, [r2, #0]
 8001538:	4611      	mov	r1, r2
 800153a:	4a13      	ldr	r2, [pc, #76]	; (8001588 <upload+0x64>)
 800153c:	ed92 7a00 	vldr	s14, [r2]
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <upload+0x68>)
 8001542:	edd2 6a00 	vldr	s13, [r2]
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <upload+0x6c>)
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	eeb0 1a66 	vmov.f32	s2, s13
 800154e:	eef0 0a47 	vmov.f32	s1, s14
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fe28 	bl	80011ac <sendCommand>
	HAL_Delay(2000);
 800155c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001560:	f7ff fd70 	bl	8001044 <MY_Delay>
	int numread = readLineUart(str);
 8001564:	480b      	ldr	r0, [pc, #44]	; (8001594 <upload+0x70>)
 8001566:	f7ff fe5f 	bl	8001228 <readLineUart>
 800156a:	6078      	str	r0, [r7, #4]
	log(str);
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <upload+0x70>)
 800156e:	f7ff fd55 	bl	800101c <serialSend>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000018 	.word	0x20000018
 8001580:	2000001c 	.word	0x2000001c
 8001584:	20000228 	.word	0x20000228
 8001588:	2000062c 	.word	0x2000062c
 800158c:	20000020 	.word	0x20000020
 8001590:	2000022c 	.word	0x2000022c
 8001594:	20005708 	.word	0x20005708

08001598 <shoudWater>:

int shoudWater(float Humidity, int SoilHumidity, float Temperature){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af04      	add	r7, sp, #16
 800159e:	ed87 0a03 	vstr	s0, [r7, #12]
 80015a2:	60b8      	str	r0, [r7, #8]
 80015a4:	edc7 0a01 	vstr	s1, [r7, #4]
//	temp //อุณหภูมิ
//	x //ค่าความชื้นในดิน
//	if (SoilHumidity <1400) SoilHumidity =1400;
//	if (SoilHumidity >3600) SoilHumidity =3600;
//	loadSetting();
	float moisture = (4500.0 - SoilHumidity)/4000.0*100.0; //ความชื้น
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f7fe ffd3 	bl	8000554 <__aeabi_i2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	a149      	add	r1, pc, #292	; (adr r1, 80016d8 <shoudWater+0x140>)
 80015b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015b8:	f7fe fe7e 	bl	80002b8 <__aeabi_dsub>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <shoudWater+0x120>)
 80015ca:	f7ff f957 	bl	800087c <__aeabi_ddiv>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <shoudWater+0x124>)
 80015dc:	f7ff f824 	bl	8000628 <__aeabi_dmul>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f7ff fb16 	bl	8000c18 <__aeabi_d2f>
 80015ec:	4603      	mov	r3, r0
 80015ee:	617b      	str	r3, [r7, #20]
	if (moisture < parSoilHumidity ) {
 80015f0:	4b33      	ldr	r3, [pc, #204]	; (80016c0 <shoudWater+0x128>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80015fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	d518      	bpl.n	8001636 <shoudWater+0x9e>
		sprintf(tmp,"bec soil = %f < %f \r\n",moisture,parSoilHumidity );
 8001604:	6978      	ldr	r0, [r7, #20]
 8001606:	f7fe ffb7 	bl	8000578 <__aeabi_f2d>
 800160a:	4604      	mov	r4, r0
 800160c:	460d      	mov	r5, r1
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <shoudWater+0x128>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ffb0 	bl	8000578 <__aeabi_f2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9cd 2300 	strd	r2, r3, [sp]
 8001620:	4622      	mov	r2, r4
 8001622:	462b      	mov	r3, r5
 8001624:	4927      	ldr	r1, [pc, #156]	; (80016c4 <shoudWater+0x12c>)
 8001626:	4828      	ldr	r0, [pc, #160]	; (80016c8 <shoudWater+0x130>)
 8001628:	f004 fad0 	bl	8005bcc <siprintf>
		log(tmp);
 800162c:	4826      	ldr	r0, [pc, #152]	; (80016c8 <shoudWater+0x130>)
 800162e:	f7ff fcf5 	bl	800101c <serialSend>
		return 1;
 8001632:	2301      	movs	r3, #1
 8001634:	e03a      	b.n	80016ac <shoudWater+0x114>

	}
	else if(Temperature > parTemperature){
 8001636:	4b25      	ldr	r3, [pc, #148]	; (80016cc <shoudWater+0x134>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001640:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001648:	dd18      	ble.n	800167c <shoudWater+0xe4>
		sprintf(tmp,"bec temp = %f > %f \r\n",Temperature,parTemperature );
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7fe ff94 	bl	8000578 <__aeabi_f2d>
 8001650:	4604      	mov	r4, r0
 8001652:	460d      	mov	r5, r1
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <shoudWater+0x134>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff8d 	bl	8000578 <__aeabi_f2d>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	e9cd 2300 	strd	r2, r3, [sp]
 8001666:	4622      	mov	r2, r4
 8001668:	462b      	mov	r3, r5
 800166a:	4919      	ldr	r1, [pc, #100]	; (80016d0 <shoudWater+0x138>)
 800166c:	4816      	ldr	r0, [pc, #88]	; (80016c8 <shoudWater+0x130>)
 800166e:	f004 faad 	bl	8005bcc <siprintf>
		log(tmp);
 8001672:	4815      	ldr	r0, [pc, #84]	; (80016c8 <shoudWater+0x130>)
 8001674:	f7ff fcd2 	bl	800101c <serialSend>
		return 1;
 8001678:	2301      	movs	r3, #1
 800167a:	e017      	b.n	80016ac <shoudWater+0x114>
	}
	sprintf(tmp,"DONT bec soil = %f % [%d] temp = %f \r\n",moisture,SoilHumidity,Temperature );
 800167c:	6978      	ldr	r0, [r7, #20]
 800167e:	f7fe ff7b 	bl	8000578 <__aeabi_f2d>
 8001682:	4604      	mov	r4, r0
 8001684:	460d      	mov	r5, r1
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7fe ff76 	bl	8000578 <__aeabi_f2d>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	4622      	mov	r2, r4
 800169a:	462b      	mov	r3, r5
 800169c:	490d      	ldr	r1, [pc, #52]	; (80016d4 <shoudWater+0x13c>)
 800169e:	480a      	ldr	r0, [pc, #40]	; (80016c8 <shoudWater+0x130>)
 80016a0:	f004 fa94 	bl	8005bcc <siprintf>
	log(tmp);
 80016a4:	4808      	ldr	r0, [pc, #32]	; (80016c8 <shoudWater+0x130>)
 80016a6:	f7ff fcb9 	bl	800101c <serialSend>

//	if(rand()%5 == 0){
//		return 1;
//	}
	return 0;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bdb0      	pop	{r4, r5, r7, pc}
 80016b4:	f3af 8000 	nop.w
 80016b8:	40af4000 	.word	0x40af4000
 80016bc:	40590000 	.word	0x40590000
 80016c0:	20000004 	.word	0x20000004
 80016c4:	0800a094 	.word	0x0800a094
 80016c8:	2000023c 	.word	0x2000023c
 80016cc:	20000000 	.word	0x20000000
 80016d0:	0800a0ac 	.word	0x0800a0ac
 80016d4:	0800a0c4 	.word	0x0800a0c4
 80016d8:	00000000 	.word	0x00000000
 80016dc:	40b19400 	.word	0x40b19400

080016e0 <readSensor>:

void readSensor()
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	blink(2);
 80016e4:	2002      	movs	r0, #2
 80016e6:	f7ff fd19 	bl	800111c <blink>
	powerOnSensor();
 80016ea:	f7ff fe05 	bl	80012f8 <powerOnSensor>
	getDHT(0);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fea8 	bl	8001444 <getDHT>
	getSoil(0);
 80016f4:	2000      	movs	r0, #0
 80016f6:	f7ff fef1 	bl	80014dc <getSoil>
	powerOffSensor();
 80016fa:	f7ff fe13 	bl	8001324 <powerOffSensor>
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <showESPOutput>:

void showESPOutput()
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
	int numread = readLineUart(str);
 800170a:	4807      	ldr	r0, [pc, #28]	; (8001728 <showESPOutput+0x24>)
 800170c:	f7ff fd8c 	bl	8001228 <readLineUart>
 8001710:	6078      	str	r0, [r7, #4]
	if(numread>0){
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	dd02      	ble.n	800171e <showESPOutput+0x1a>
		log(str);
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <showESPOutput+0x24>)
 800171a:	f7ff fc7f 	bl	800101c <serialSend>
	}
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20005708 	.word	0x20005708

0800172c <getSetting>:
void getSetting()
{
 800172c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001730:	b08a      	sub	sp, #40	; 0x28
 8001732:	af06      	add	r7, sp, #24
	int numread = readLineUart(str);
 8001734:	4834      	ldr	r0, [pc, #208]	; (8001808 <getSetting+0xdc>)
 8001736:	f7ff fd77 	bl	8001228 <readLineUart>
 800173a:	60b8      	str	r0, [r7, #8]
	if(numread>0){
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	dd5c      	ble.n	80017fc <getSetting+0xd0>
//		log(str);
		char *ptr = strstr(str,"\n");
 8001742:	210a      	movs	r1, #10
 8001744:	4830      	ldr	r0, [pc, #192]	; (8001808 <getSetting+0xdc>)
 8001746:	f004 fad2 	bl	8005cee <strchr>
 800174a:	6078      	str	r0, [r7, #4]
//		float parTemperature = 36.0;
//		float parSoilHumidity = 70;
//		float parHumidity = 50;
//		float parWater = 5;
//		float parDoEvery = 20;
		for(int i = 0;i< strlen(ptr);i++){
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	e00d      	b.n	800176e <getSetting+0x42>
			if(ptr[i] == '"'){
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b22      	cmp	r3, #34	; 0x22
 800175c:	d104      	bne.n	8001768 <getSetting+0x3c>
				ptr[i] = ' ';
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	2220      	movs	r2, #32
 8001766:	701a      	strb	r2, [r3, #0]
		for(int i = 0;i< strlen(ptr);i++){
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3301      	adds	r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7fe fd40 	bl	80001f4 <strlen>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	429a      	cmp	r2, r3
 800177a:	d8ea      	bhi.n	8001752 <getSetting+0x26>
			}
		}
		log(ptr);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fc4d 	bl	800101c <serialSend>
//		if(sscanf(str,"%d %s",&tmp[0],&parTemperature,&parSoilHumidity,&parHumidity,&parWater,&parDoEvery) ==6){
//					log("good\r\n");
//				}
		int t;
		if(sscanf(ptr,"%s %d %f %f %d %d %d %d",&tmp[0],&t,&parTemperature,&parSoilHumidity,&parHumidity,&parWater,&parDoEvery,&powerSaveMode) ==7){
 8001782:	463b      	mov	r3, r7
 8001784:	4a21      	ldr	r2, [pc, #132]	; (800180c <getSetting+0xe0>)
 8001786:	9205      	str	r2, [sp, #20]
 8001788:	4a21      	ldr	r2, [pc, #132]	; (8001810 <getSetting+0xe4>)
 800178a:	9204      	str	r2, [sp, #16]
 800178c:	4a21      	ldr	r2, [pc, #132]	; (8001814 <getSetting+0xe8>)
 800178e:	9203      	str	r2, [sp, #12]
 8001790:	4a21      	ldr	r2, [pc, #132]	; (8001818 <getSetting+0xec>)
 8001792:	9202      	str	r2, [sp, #8]
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <getSetting+0xf0>)
 8001796:	9201      	str	r2, [sp, #4]
 8001798:	4a21      	ldr	r2, [pc, #132]	; (8001820 <getSetting+0xf4>)
 800179a:	9200      	str	r2, [sp, #0]
 800179c:	4a21      	ldr	r2, [pc, #132]	; (8001824 <getSetting+0xf8>)
 800179e:	4922      	ldr	r1, [pc, #136]	; (8001828 <getSetting+0xfc>)
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f004 fa33 	bl	8005c0c <siscanf>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b07      	cmp	r3, #7
 80017aa:	d102      	bne.n	80017b2 <getSetting+0x86>
			log("good\r\n");
 80017ac:	481f      	ldr	r0, [pc, #124]	; (800182c <getSetting+0x100>)
 80017ae:	f7ff fc35 	bl	800101c <serialSend>
		}
		sprintf(tmp,"setting in STM32: %f %f %d %d %d %d\r\n",parTemperature,parSoilHumidity,parHumidity,parWater,parDoEvery,powerSaveMode);
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <getSetting+0xf4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fede 	bl	8000578 <__aeabi_f2d>
 80017bc:	4604      	mov	r4, r0
 80017be:	460d      	mov	r5, r1
 80017c0:	4b16      	ldr	r3, [pc, #88]	; (800181c <getSetting+0xf0>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fed7 	bl	8000578 <__aeabi_f2d>
 80017ca:	4683      	mov	fp, r0
 80017cc:	468c      	mov	ip, r1
 80017ce:	4912      	ldr	r1, [pc, #72]	; (8001818 <getSetting+0xec>)
 80017d0:	6809      	ldr	r1, [r1, #0]
 80017d2:	4810      	ldr	r0, [pc, #64]	; (8001814 <getSetting+0xe8>)
 80017d4:	6800      	ldr	r0, [r0, #0]
 80017d6:	4e0e      	ldr	r6, [pc, #56]	; (8001810 <getSetting+0xe4>)
 80017d8:	6836      	ldr	r6, [r6, #0]
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <getSetting+0xe0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	9305      	str	r3, [sp, #20]
 80017e0:	9604      	str	r6, [sp, #16]
 80017e2:	9003      	str	r0, [sp, #12]
 80017e4:	9102      	str	r1, [sp, #8]
 80017e6:	e9cd bc00 	strd	fp, ip, [sp]
 80017ea:	4622      	mov	r2, r4
 80017ec:	462b      	mov	r3, r5
 80017ee:	4910      	ldr	r1, [pc, #64]	; (8001830 <getSetting+0x104>)
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <getSetting+0xf8>)
 80017f2:	f004 f9eb 	bl	8005bcc <siprintf>
		log(tmp);
 80017f6:	480b      	ldr	r0, [pc, #44]	; (8001824 <getSetting+0xf8>)
 80017f8:	f7ff fc10 	bl	800101c <serialSend>
	}
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001806:	bf00      	nop
 8001808:	20005708 	.word	0x20005708
 800180c:	20000014 	.word	0x20000014
 8001810:	20000010 	.word	0x20000010
 8001814:	2000000c 	.word	0x2000000c
 8001818:	20000008 	.word	0x20000008
 800181c:	20000004 	.word	0x20000004
 8001820:	20000000 	.word	0x20000000
 8001824:	2000023c 	.word	0x2000023c
 8001828:	0800a0ec 	.word	0x0800a0ec
 800182c:	0800a104 	.word	0x0800a104
 8001830:	0800a10c 	.word	0x0800a10c

08001834 <loadSetting>:
void loadSetting()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	wifisend("loadSetting()\n");
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <loadSetting+0x1c>)
 800183a:	f7ff fc17 	bl	800106c <wifisend>
	HAL_Delay(1000);
 800183e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001842:	f7ff fbff 	bl	8001044 <MY_Delay>
//	showESPOutput();
	getSetting();
 8001846:	f7ff ff71 	bl	800172c <getSetting>

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	0800a134 	.word	0x0800a134

08001854 <processCommand>:

void processCommand()
{
 8001854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001858:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 800185c:	af0a      	add	r7, sp, #40	; 0x28
	char cmd[1024];
	int numread = readLineUart2(cmd);
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fd14 	bl	8001290 <readLineUart2>
 8001868:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
	if(numread>0){
 800186c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001870:	2b00      	cmp	r3, #0
 8001872:	f340 80a6 	ble.w	80019c2 <processCommand+0x16e>
		sprintf(tmp,"cmd=%s",cmd);log(tmp);
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	461a      	mov	r2, r3
 800187c:	4953      	ldr	r1, [pc, #332]	; (80019cc <processCommand+0x178>)
 800187e:	4854      	ldr	r0, [pc, #336]	; (80019d0 <processCommand+0x17c>)
 8001880:	f004 f9a4 	bl	8005bcc <siprintf>
 8001884:	4852      	ldr	r0, [pc, #328]	; (80019d0 <processCommand+0x17c>)
 8001886:	f7ff fbc9 	bl	800101c <serialSend>
		if(strcmp(cmd,"water\n")==0){
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4951      	ldr	r1, [pc, #324]	; (80019d4 <processCommand+0x180>)
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fca5 	bl	80001e0 <strcmp>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d116      	bne.n	80018ca <processCommand+0x76>
			loadSetting();
 800189c:	f7ff ffca 	bl	8001834 <loadSetting>
			readSensor();
 80018a0:	f7ff ff1e 	bl	80016e0 <readSensor>
			relayOn();
 80018a4:	f7ff fd50 	bl	8001348 <relayOn>

			HAL_Delay(1000*parWater);
 80018a8:	4b4b      	ldr	r3, [pc, #300]	; (80019d8 <processCommand+0x184>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fbc5 	bl	8001044 <MY_Delay>
			relayOff();
 80018ba:	f7ff fd5b 	bl	8001374 <relayOff>
			relayRunning = 2; 	// make it as manual watering
 80018be:	4b47      	ldr	r3, [pc, #284]	; (80019dc <processCommand+0x188>)
 80018c0:	2202      	movs	r2, #2
 80018c2:	601a      	str	r2, [r3, #0]
			upload();
 80018c4:	f7ff fe2e 	bl	8001524 <upload>
			return;
 80018c8:	e07b      	b.n	80019c2 <processCommand+0x16e>
		}
		if(strcmp(cmd,"upload\n")==0){
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	4944      	ldr	r1, [pc, #272]	; (80019e0 <processCommand+0x18c>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fc85 	bl	80001e0 <strcmp>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d104      	bne.n	80018e6 <processCommand+0x92>
			readSensor();
 80018dc:	f7ff ff00 	bl	80016e0 <readSensor>
			upload();
 80018e0:	f7ff fe20 	bl	8001524 <upload>
			return;
 80018e4:	e06d      	b.n	80019c2 <processCommand+0x16e>
		}
		if(strcmp(cmd,"status\n")==0){
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	493e      	ldr	r1, [pc, #248]	; (80019e4 <processCommand+0x190>)
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7fe fc77 	bl	80001e0 <strcmp>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d12f      	bne.n	8001958 <processCommand+0x104>
			readSensor();
 80018f8:	f7ff fef2 	bl	80016e0 <readSensor>
			sprintf(tmp,"%s %f %d %f %f %d\r\n",deviceID, Humidity, SoilHumidity, Temperature, light, relayRunning);
 80018fc:	4b3a      	ldr	r3, [pc, #232]	; (80019e8 <processCommand+0x194>)
 80018fe:	681e      	ldr	r6, [r3, #0]
 8001900:	4b3a      	ldr	r3, [pc, #232]	; (80019ec <processCommand+0x198>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe37 	bl	8000578 <__aeabi_f2d>
 800190a:	4604      	mov	r4, r0
 800190c:	460d      	mov	r5, r1
 800190e:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <processCommand+0x19c>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <processCommand+0x1a0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fe2d 	bl	8000578 <__aeabi_f2d>
 800191e:	4680      	mov	r8, r0
 8001920:	4689      	mov	r9, r1
 8001922:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <processCommand+0x1a4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe26 	bl	8000578 <__aeabi_f2d>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	492a      	ldr	r1, [pc, #168]	; (80019dc <processCommand+0x188>)
 8001932:	6809      	ldr	r1, [r1, #0]
 8001934:	9108      	str	r1, [sp, #32]
 8001936:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800193a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	9302      	str	r3, [sp, #8]
 8001942:	e9cd 4500 	strd	r4, r5, [sp]
 8001946:	4632      	mov	r2, r6
 8001948:	492c      	ldr	r1, [pc, #176]	; (80019fc <processCommand+0x1a8>)
 800194a:	4821      	ldr	r0, [pc, #132]	; (80019d0 <processCommand+0x17c>)
 800194c:	f004 f93e 	bl	8005bcc <siprintf>
			log(tmp);
 8001950:	481f      	ldr	r0, [pc, #124]	; (80019d0 <processCommand+0x17c>)
 8001952:	f7ff fb63 	bl	800101c <serialSend>
			return;
 8001956:	e034      	b.n	80019c2 <processCommand+0x16e>
		}
		if(strcmp(cmd,"wifi\n")==0){
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	4928      	ldr	r1, [pc, #160]	; (8001a00 <processCommand+0x1ac>)
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fc3e 	bl	80001e0 <strcmp>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d102      	bne.n	8001970 <processCommand+0x11c>
			getWifiStatus();
 800196a:	f7ff fd19 	bl	80013a0 <getWifiStatus>
			return;
 800196e:	e028      	b.n	80019c2 <processCommand+0x16e>
		}
		if(strcmp(cmd,"ls\n")==0){
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	4923      	ldr	r1, [pc, #140]	; (8001a04 <processCommand+0x1b0>)
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fc32 	bl	80001e0 <strcmp>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <processCommand+0x134>
			loadSetting();
 8001982:	f7ff ff57 	bl	8001834 <loadSetting>
			return;
 8001986:	e01c      	b.n	80019c2 <processCommand+0x16e>
		}
		if(cmd[0] == '#'){
 8001988:	f107 030c 	add.w	r3, r7, #12
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b23      	cmp	r3, #35	; 0x23
 8001990:	d10c      	bne.n	80019ac <processCommand+0x158>
			wifisend(&cmd[1]);
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	3301      	adds	r3, #1
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fb67 	bl	800106c <wifisend>
			HAL_Delay(2000);
 800199e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019a2:	f7ff fb4f 	bl	8001044 <MY_Delay>
			showESPOutput();
 80019a6:	f7ff fead 	bl	8001704 <showESPOutput>
			return;
 80019aa:	e00a      	b.n	80019c2 <processCommand+0x16e>
		}
		sprintf(tmp,"Unknow command: %s",cmd);log(tmp);
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	461a      	mov	r2, r3
 80019b2:	4915      	ldr	r1, [pc, #84]	; (8001a08 <processCommand+0x1b4>)
 80019b4:	4806      	ldr	r0, [pc, #24]	; (80019d0 <processCommand+0x17c>)
 80019b6:	f004 f909 	bl	8005bcc <siprintf>
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <processCommand+0x17c>)
 80019bc:	f7ff fb2e 	bl	800101c <serialSend>
		return;
 80019c0:	bf00      	nop
	}
}
 80019c2:	f207 4714 	addw	r7, r7, #1044	; 0x414
 80019c6:	46bd      	mov	sp, r7
 80019c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019cc:	0800a144 	.word	0x0800a144
 80019d0:	2000023c 	.word	0x2000023c
 80019d4:	0800a14c 	.word	0x0800a14c
 80019d8:	2000000c 	.word	0x2000000c
 80019dc:	2000022c 	.word	0x2000022c
 80019e0:	0800a154 	.word	0x0800a154
 80019e4:	0800a15c 	.word	0x0800a15c
 80019e8:	20000018 	.word	0x20000018
 80019ec:	2000001c 	.word	0x2000001c
 80019f0:	20000228 	.word	0x20000228
 80019f4:	2000062c 	.word	0x2000062c
 80019f8:	20000020 	.word	0x20000020
 80019fc:	0800a164 	.word	0x0800a164
 8001a00:	0800a178 	.word	0x0800a178
 8001a04:	0800a180 	.word	0x0800a180
 8001a08:	0800a184 	.word	0x0800a184

08001a0c <waitingForESP>:

void waitingForESP()
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
	// delay 5 sec for ESP reboot
	HAL_Delay(5000);
 8001a12:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a16:	f7ff fb15 	bl	8001044 <MY_Delay>
	log("waitingForESP start\r\n");
 8001a1a:	4817      	ldr	r0, [pc, #92]	; (8001a78 <waitingForESP+0x6c>)
 8001a1c:	f7ff fafe 	bl	800101c <serialSend>
	for(int i=0;i<600;i++){
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	e01d      	b.n	8001a62 <waitingForESP+0x56>
		if(getWifiStatus()==1){
 8001a26:	f7ff fcbb 	bl	80013a0 <getWifiStatus>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d103      	bne.n	8001a38 <waitingForESP+0x2c>
			log("ESP WIFI ready\r\n");
 8001a30:	4812      	ldr	r0, [pc, #72]	; (8001a7c <waitingForESP+0x70>)
 8001a32:	f7ff faf3 	bl	800101c <serialSend>
			break;
 8001a36:	e018      	b.n	8001a6a <waitingForESP+0x5e>
		}else{
			sprintf(tmp,"wait for ESP WIFI %d\r\n",i+1);log(tmp);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4910      	ldr	r1, [pc, #64]	; (8001a80 <waitingForESP+0x74>)
 8001a40:	4810      	ldr	r0, [pc, #64]	; (8001a84 <waitingForESP+0x78>)
 8001a42:	f004 f8c3 	bl	8005bcc <siprintf>
 8001a46:	480f      	ldr	r0, [pc, #60]	; (8001a84 <waitingForESP+0x78>)
 8001a48:	f7ff fae8 	bl	800101c <serialSend>
			HAL_Delay(1000);
 8001a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a50:	f7ff faf8 	bl	8001044 <MY_Delay>
			showESPOutput();
 8001a54:	f7ff fe56 	bl	8001704 <showESPOutput>
			processCommand();
 8001a58:	f7ff fefc 	bl	8001854 <processCommand>
	for(int i=0;i<600;i++){
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	607b      	str	r3, [r7, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001a68:	dbdd      	blt.n	8001a26 <waitingForESP+0x1a>
		}
	}
	log("waitingForESP end\r\n");
 8001a6a:	4807      	ldr	r0, [pc, #28]	; (8001a88 <waitingForESP+0x7c>)
 8001a6c:	f7ff fad6 	bl	800101c <serialSend>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	0800a198 	.word	0x0800a198
 8001a7c:	0800a1b0 	.word	0x0800a1b0
 8001a80:	0800a1c4 	.word	0x0800a1c4
 8001a84:	2000023c 	.word	0x2000023c
 8001a88:	0800a1dc 	.word	0x0800a1dc

08001a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a90:	b0af      	sub	sp, #188	; 0xbc
 8001a92:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a94:	f000 fdf4 	bl	8002680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a98:	f000 f9f0 	bl	8001e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9c:	f000 fafc 	bl	8002098 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001aa0:	f000 fad0 	bl	8002044 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001aa4:	f000 faa4 	bl	8001ff0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001aa8:	f000 fa50 	bl	8001f4c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_ADCEx_Calibration_Start(&hadc1);
//  ESP_Init("muminoiais_5G", "99775533");
//  HAL_UART_Receive_IT(&huart1, &uart_recv, 1);
  HAL_UART_Receive_IT(&huart1, &Rx_byte, 1);
 8001aac:	2201      	movs	r2, #1
 8001aae:	49a8      	ldr	r1, [pc, #672]	; (8001d50 <main+0x2c4>)
 8001ab0:	48a8      	ldr	r0, [pc, #672]	; (8001d54 <main+0x2c8>)
 8001ab2:	f002 fae8 	bl	8004086 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &Rx_byte2, 1);
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	49a7      	ldr	r1, [pc, #668]	; (8001d58 <main+0x2cc>)
 8001aba:	48a8      	ldr	r0, [pc, #672]	; (8001d5c <main+0x2d0>)
 8001abc:	f002 fae3 	bl	8004086 <HAL_UART_Receive_IT>
  log("**-----------------------------------------------\r\n");
 8001ac0:	48a7      	ldr	r0, [pc, #668]	; (8001d60 <main+0x2d4>)
 8001ac2:	f7ff faab 	bl	800101c <serialSend>
  char UART1_rxBuffer[100] = {'a'};
 8001ac6:	2361      	movs	r3, #97	; 0x61
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	2260      	movs	r2, #96	; 0x60
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 f9f2 	bl	8004ebc <memset>




  /*constrain part */
  float tempConst = 30.0;
 8001ad8:	4ba2      	ldr	r3, [pc, #648]	; (8001d64 <main+0x2d8>)
 8001ada:	677b      	str	r3, [r7, #116]	; 0x74
  float soilConst = 1000; // low = moist
 8001adc:	4ba2      	ldr	r3, [pc, #648]	; (8001d68 <main+0x2dc>)
 8001ade:	673b      	str	r3, [r7, #112]	; 0x70
  float  humidConst = 60;  // high = moist
 8001ae0:	4ba2      	ldr	r3, [pc, #648]	; (8001d6c <main+0x2e0>)
 8001ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
  int count = 1;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  //waiting for ESP ready by checking wifistatus
  blink(10);
 8001aea:	200a      	movs	r0, #10
 8001aec:	f7ff fb16 	bl	800111c <blink>
  waitingForESP();
 8001af0:	f7ff ff8c 	bl	8001a0c <waitingForESP>
  loadSetting();
 8001af4:	f7ff fe9e 	bl	8001834 <loadSetting>
  powerOnSensor();
 8001af8:	f7ff fbfe 	bl	80012f8 <powerOnSensor>
  float checkDHT = 0;
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  float checkSoil = 0;
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  int valError = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  for(int i = 0;i< 4;i++){
 8001b12:	2300      	movs	r3, #0
 8001b14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b16:	e04e      	b.n	8001bb6 <main+0x12a>
	getDHT(0);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff fc93 	bl	8001444 <getDHT>
	getSoil(0);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f7ff fcdc 	bl	80014dc <getSoil>
	checkSoil += SoilHumidity;
 8001b24:	4b92      	ldr	r3, [pc, #584]	; (8001d70 <main+0x2e4>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b30:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	checkDHT += Temperature;
 8001b3c:	4b8d      	ldr	r3, [pc, #564]	; (8001d74 <main+0x2e8>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
//	blinkLong(2);
	sprintf(tmp,"%d %f\r\n",SoilHumidity, Temperature);
 8001b4e:	4b88      	ldr	r3, [pc, #544]	; (8001d70 <main+0x2e4>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	461c      	mov	r4, r3
 8001b54:	4b87      	ldr	r3, [pc, #540]	; (8001d74 <main+0x2e8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd0d 	bl	8000578 <__aeabi_f2d>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	e9cd 2300 	strd	r2, r3, [sp]
 8001b66:	4622      	mov	r2, r4
 8001b68:	4983      	ldr	r1, [pc, #524]	; (8001d78 <main+0x2ec>)
 8001b6a:	4884      	ldr	r0, [pc, #528]	; (8001d7c <main+0x2f0>)
 8001b6c:	f004 f82e 	bl	8005bcc <siprintf>
	log(tmp);
 8001b70:	4882      	ldr	r0, [pc, #520]	; (8001d7c <main+0x2f0>)
 8001b72:	f7ff fa53 	bl	800101c <serialSend>
	if(SoilHumidity <1000 || SoilHumidity > 4200 || SoilHumidity == 0 || Temperature == 0.0){
 8001b76:	4b7e      	ldr	r3, [pc, #504]	; (8001d70 <main+0x2e4>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b7e:	d311      	bcc.n	8001ba4 <main+0x118>
 8001b80:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <main+0x2e4>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	f241 0268 	movw	r2, #4200	; 0x1068
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d80b      	bhi.n	8001ba4 <main+0x118>
 8001b8c:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <main+0x2e4>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <main+0x118>
 8001b94:	4b77      	ldr	r3, [pc, #476]	; (8001d74 <main+0x2e8>)
 8001b96:	edd3 7a00 	vldr	s15, [r3]
 8001b9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	d105      	bne.n	8001bb0 <main+0x124>
		valError = 1;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		blinkLong(3);
 8001baa:	2003      	movs	r0, #3
 8001bac:	f7ff fada 	bl	8001164 <blinkLong>
  for(int i = 0;i< 4;i++){
 8001bb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	ddad      	ble.n	8001b18 <main+0x8c>
	}

  }
  powerOffSensor();
 8001bbc:	f7ff fbb2 	bl	8001324 <powerOffSensor>
  if(valError){
 8001bc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <main+0x142>
	  log("value error\r\n");
 8001bc8:	486d      	ldr	r0, [pc, #436]	; (8001d80 <main+0x2f4>)
 8001bca:	f7ff fa27 	bl	800101c <serialSend>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 tot_delay = 0;
 8001bce:	4b6d      	ldr	r3, [pc, #436]	; (8001d84 <main+0x2f8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]

	count++;
 8001bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	/*---------------idiot wire soil data----------------------*/
//	getSoil(0);
//	sprintf(tmp,"count=%d %d\r\n",count,SoilHumidity);log(tmp);
	int val = (60*(parDoEvery))-(count % (60*parDoEvery))-30;
 8001bde:	4b6a      	ldr	r3, [pc, #424]	; (8001d88 <main+0x2fc>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	4613      	mov	r3, r2
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	1a9b      	subs	r3, r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4618      	mov	r0, r3
 8001bec:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <main+0x2fc>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c02:	fb02 f201 	mul.w	r2, r2, r1
 8001c06:	1a9b      	subs	r3, r3, r2
 8001c08:	1ac3      	subs	r3, r0, r3
 8001c0a:	3b1e      	subs	r3, #30
 8001c0c:	67bb      	str	r3, [r7, #120]	; 0x78
	if( val > 300){
 8001c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c14:	dd20      	ble.n	8001c58 <main+0x1cc>
		loadSetting();
 8001c16:	f7ff fe0d 	bl	8001834 <loadSetting>
		val = (60*(parDoEvery))-(count % (60*parDoEvery))-30;
 8001c1a:	4b5b      	ldr	r3, [pc, #364]	; (8001d88 <main+0x2fc>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4618      	mov	r0, r3
 8001c28:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <main+0x2fc>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	461a      	mov	r2, r3
 8001c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c3a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c3e:	fb02 f201 	mul.w	r2, r2, r1
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	1ac3      	subs	r3, r0, r3
 8001c46:	3b1e      	subs	r3, #30
 8001c48:	67bb      	str	r3, [r7, #120]	; 0x78
		if(val > 300){
 8001c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c4c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001c50:	dd02      	ble.n	8001c58 <main+0x1cc>
			val = 300;
 8001c52:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001c56:	67bb      	str	r3, [r7, #120]	; 0x78
		}
	}
	sprintf(tmp,"count=%d  val = %d \r\n",count,val);log(tmp);
 8001c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c5a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001c5e:	494b      	ldr	r1, [pc, #300]	; (8001d8c <main+0x300>)
 8001c60:	4846      	ldr	r0, [pc, #280]	; (8001d7c <main+0x2f0>)
 8001c62:	f003 ffb3 	bl	8005bcc <siprintf>
 8001c66:	4845      	ldr	r0, [pc, #276]	; (8001d7c <main+0x2f0>)
 8001c68:	f7ff f9d8 	bl	800101c <serialSend>
//	loadSetting();
	if(count % (60*parDoEvery) == 0){
 8001c6c:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <main+0x2fc>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4613      	mov	r3, r2
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c7e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c82:	fb02 f201 	mul.w	r2, r2, r1
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 8091 	bne.w	8001db0 <main+0x324>
		loadSetting();
 8001c8e:	f7ff fdd1 	bl	8001834 <loadSetting>
	//if(count % (10) == 0){
		blink(2);
 8001c92:	2002      	movs	r0, #2
 8001c94:	f7ff fa42 	bl	800111c <blink>
		powerOnSensor();
 8001c98:	f7ff fb2e 	bl	80012f8 <powerOnSensor>
		if(getDHT(0)){
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff fbd1 	bl	8001444 <getDHT>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8081 	beq.w	8001dac <main+0x320>
			getSoil(0);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff fc16 	bl	80014dc <getSoil>
//			readSensor();
			sprintf(tmp,"%s %f %d %f %f %d\r\n",deviceID, Humidity, SoilHumidity, Temperature, light, relayRunning);
 8001cb0:	4b37      	ldr	r3, [pc, #220]	; (8001d90 <main+0x304>)
 8001cb2:	681e      	ldr	r6, [r3, #0]
 8001cb4:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <main+0x308>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fc5d 	bl	8000578 <__aeabi_f2d>
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	460d      	mov	r5, r1
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <main+0x2e4>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <main+0x2e8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc53 	bl	8000578 <__aeabi_f2d>
 8001cd2:	4680      	mov	r8, r0
 8001cd4:	4689      	mov	r9, r1
 8001cd6:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <main+0x30c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc4c 	bl	8000578 <__aeabi_f2d>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	492d      	ldr	r1, [pc, #180]	; (8001d9c <main+0x310>)
 8001ce6:	6809      	ldr	r1, [r1, #0]
 8001ce8:	9108      	str	r1, [sp, #32]
 8001cea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001cee:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	9302      	str	r3, [sp, #8]
 8001cf6:	e9cd 4500 	strd	r4, r5, [sp]
 8001cfa:	4632      	mov	r2, r6
 8001cfc:	4928      	ldr	r1, [pc, #160]	; (8001da0 <main+0x314>)
 8001cfe:	481f      	ldr	r0, [pc, #124]	; (8001d7c <main+0x2f0>)
 8001d00:	f003 ff64 	bl	8005bcc <siprintf>
			//sprintf(tmp,"%s %.2f %.2f %.2f %.2f %d\r\n",deviceID, Humidity, SoilHumidity, Temperature, light, relayRunning);
			log(tmp);
 8001d04:	481d      	ldr	r0, [pc, #116]	; (8001d7c <main+0x2f0>)
 8001d06:	f7ff f989 	bl	800101c <serialSend>
			if(shoudWater(Humidity, SoilHumidity, Temperature)){
 8001d0a:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <main+0x308>)
 8001d0c:	edd3 7a00 	vldr	s15, [r3]
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <main+0x2e4>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <main+0x2e8>)
 8001d18:	ed93 7a00 	vldr	s14, [r3]
 8001d1c:	eef0 0a47 	vmov.f32	s1, s14
 8001d20:	4610      	mov	r0, r2
 8001d22:	eeb0 0a67 	vmov.f32	s0, s15
 8001d26:	f7ff fc37 	bl	8001598 <shoudWater>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d03b      	beq.n	8001da8 <main+0x31c>
				relayOn();
 8001d30:	f7ff fb0a 	bl	8001348 <relayOn>

				HAL_Delay(1000*parWater);
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <main+0x318>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff f97f 	bl	8001044 <MY_Delay>
				relayOff();
 8001d46:	f7ff fb15 	bl	8001374 <relayOff>
				upload();
 8001d4a:	f7ff fbeb 	bl	8001524 <upload>
 8001d4e:	e02d      	b.n	8001dac <main+0x320>
 8001d50:	20007f08 	.word	0x20007f08
 8001d54:	20005680 	.word	0x20005680
 8001d58:	20005634 	.word	0x20005634
 8001d5c:	200056c4 	.word	0x200056c4
 8001d60:	0800a1f0 	.word	0x0800a1f0
 8001d64:	41f00000 	.word	0x41f00000
 8001d68:	447a0000 	.word	0x447a0000
 8001d6c:	42700000 	.word	0x42700000
 8001d70:	20000228 	.word	0x20000228
 8001d74:	2000062c 	.word	0x2000062c
 8001d78:	0800a224 	.word	0x0800a224
 8001d7c:	2000023c 	.word	0x2000023c
 8001d80:	0800a22c 	.word	0x0800a22c
 8001d84:	20000224 	.word	0x20000224
 8001d88:	20000010 	.word	0x20000010
 8001d8c:	0800a23c 	.word	0x0800a23c
 8001d90:	20000018 	.word	0x20000018
 8001d94:	2000001c 	.word	0x2000001c
 8001d98:	20000020 	.word	0x20000020
 8001d9c:	2000022c 	.word	0x2000022c
 8001da0:	0800a164 	.word	0x0800a164
 8001da4:	2000000c 	.word	0x2000000c
			}else{
				upload();
 8001da8:	f7ff fbbc 	bl	8001524 <upload>
			}
		}
		powerOffSensor();
 8001dac:	f7ff faba 	bl	8001324 <powerOffSensor>
	}
//	int val = (60*(parDoEvery))-(count % (60*parDoEvery))-30;
//	sprintf(tmp,"val:  %d\r\n",val);
//	log(tmp);
	val = (60*(parDoEvery))-(count % (60*parDoEvery))-30;
 8001db0:	4b2c      	ldr	r3, [pc, #176]	; (8001e64 <main+0x3d8>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4613      	mov	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <main+0x3d8>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dd0:	fb93 f1f2 	sdiv	r1, r3, r2
 8001dd4:	fb02 f201 	mul.w	r2, r2, r1
 8001dd8:	1a9b      	subs	r3, r3, r2
 8001dda:	1ac3      	subs	r3, r0, r3
 8001ddc:	3b1e      	subs	r3, #30
 8001dde:	67bb      	str	r3, [r7, #120]	; 0x78
	if(val >0 && powerSaveMode == 1){
 8001de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	dd20      	ble.n	8001e28 <main+0x39c>
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <main+0x3dc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d11c      	bne.n	8001e28 <main+0x39c>
		sprintf(tmp,"deepSleep(%d)\n",val);
 8001dee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001df0:	491e      	ldr	r1, [pc, #120]	; (8001e6c <main+0x3e0>)
 8001df2:	481f      	ldr	r0, [pc, #124]	; (8001e70 <main+0x3e4>)
 8001df4:	f003 feea 	bl	8005bcc <siprintf>
		wifisend(tmp);
 8001df8:	481d      	ldr	r0, [pc, #116]	; (8001e70 <main+0x3e4>)
 8001dfa:	f7ff f937 	bl	800106c <wifisend>
		log(tmp);
 8001dfe:	481c      	ldr	r0, [pc, #112]	; (8001e70 <main+0x3e4>)
 8001e00:	f7ff f90c 	bl	800101c <serialSend>
		blink(5);
 8001e04:	2005      	movs	r0, #5
 8001e06:	f7ff f989 	bl	800111c <blink>
		HAL_Delay(val*1000);
 8001e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e10:	fb02 f303 	mul.w	r3, r2, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f915 	bl	8001044 <MY_Delay>
//		blinkLong(1);
		count += val;
 8001e1a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e20:	4413      	add	r3, r2
 8001e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001e26:	e017      	b.n	8001e58 <main+0x3cc>
	}
	else{
//		blink(1);
		sprintf(tmp,"tot_delay (%d)\n",1000-tot_delay);
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <main+0x3e8>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001e30:	461a      	mov	r2, r3
 8001e32:	4911      	ldr	r1, [pc, #68]	; (8001e78 <main+0x3ec>)
 8001e34:	480e      	ldr	r0, [pc, #56]	; (8001e70 <main+0x3e4>)
 8001e36:	f003 fec9 	bl	8005bcc <siprintf>
		log(tmp);
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <main+0x3e4>)
 8001e3c:	f7ff f8ee 	bl	800101c <serialSend>
		if(tot_delay<1000){
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <main+0x3e8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e48:	da06      	bge.n	8001e58 <main+0x3cc>
			HAL_Delay(1000-tot_delay);
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <main+0x3e8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f8f6 	bl	8001044 <MY_Delay>
		}

	}

	showESPOutput();
 8001e58:	f7ff fc54 	bl	8001704 <showESPOutput>
	processCommand();
 8001e5c:	f7ff fcfa 	bl	8001854 <processCommand>
  {
 8001e60:	e6b5      	b.n	8001bce <main+0x142>
 8001e62:	bf00      	nop
 8001e64:	20000010 	.word	0x20000010
 8001e68:	20000014 	.word	0x20000014
 8001e6c:	0800a254 	.word	0x0800a254
 8001e70:	2000023c 	.word	0x2000023c
 8001e74:	20000224 	.word	0x20000224
 8001e78:	0800a264 	.word	0x0800a264

08001e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b094      	sub	sp, #80	; 0x50
 8001e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e82:	f107 0320 	add.w	r3, r7, #32
 8001e86:	2230      	movs	r2, #48	; 0x30
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 f816 	bl	8004ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <SystemClock_Config+0xc8>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <SystemClock_Config+0xc8>)
 8001eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eae:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <SystemClock_Config+0xc8>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <SystemClock_Config+0xcc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <SystemClock_Config+0xcc>)
 8001ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <SystemClock_Config+0xcc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001edc:	2301      	movs	r3, #1
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ee0:	2310      	movs	r3, #16
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001eec:	2308      	movs	r3, #8
 8001eee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001ef0:	2354      	movs	r3, #84	; 0x54
 8001ef2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ef8:	2304      	movs	r3, #4
 8001efa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efc:	f107 0320 	add.w	r3, r7, #32
 8001f00:	4618      	mov	r0, r3
 8001f02:	f001 fb6d 	bl	80035e0 <HAL_RCC_OscConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f0c:	f000 f97a 	bl	8002204 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f10:	230f      	movs	r3, #15
 8001f12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f14:	2302      	movs	r3, #2
 8001f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f26:	f107 030c 	add.w	r3, r7, #12
 8001f2a:	2102      	movs	r1, #2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 fdcf 	bl	8003ad0 <HAL_RCC_ClockConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f38:	f000 f964 	bl	8002204 <Error_Handler>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	3750      	adds	r7, #80	; 0x50
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40007000 	.word	0x40007000

08001f4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f52:	463b      	mov	r3, r7
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001f60:	4a21      	ldr	r2, [pc, #132]	; (8001fe8 <MX_ADC1_Init+0x9c>)
 8001f62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001f66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f86:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f8c:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001f8e:	4a17      	ldr	r2, [pc, #92]	; (8001fec <MX_ADC1_Init+0xa0>)
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fac:	480d      	ldr	r0, [pc, #52]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001fae:	f000 fbfd 	bl	80027ac <HAL_ADC_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001fb8:	f000 f924 	bl	8002204 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001fbc:	2307      	movs	r3, #7
 8001fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc8:	463b      	mov	r3, r7
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <MX_ADC1_Init+0x98>)
 8001fce:	f000 fd7d 	bl	8002acc <HAL_ADC_ConfigChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001fd8:	f000 f914 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20005638 	.word	0x20005638
 8001fe8:	40012000 	.word	0x40012000
 8001fec:	0f000001 	.word	0x0f000001

08001ff0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <MX_USART1_UART_Init+0x50>)
 8001ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8001ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <MX_USART1_UART_Init+0x4c>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8002016:	220c      	movs	r2, #12
 8002018:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <MX_USART1_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002026:	4805      	ldr	r0, [pc, #20]	; (800203c <MX_USART1_UART_Init+0x4c>)
 8002028:	f001 ff4e 	bl	8003ec8 <HAL_UART_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002032:	f000 f8e7 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20005680 	.word	0x20005680
 8002040:	40011000 	.word	0x40011000

08002044 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <MX_USART2_UART_Init+0x4c>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <MX_USART2_UART_Init+0x50>)
 800204c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <MX_USART2_UART_Init+0x4c>)
 8002050:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002054:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <MX_USART2_UART_Init+0x4c>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800205c:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <MX_USART2_UART_Init+0x4c>)
 800205e:	2200      	movs	r2, #0
 8002060:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002062:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <MX_USART2_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <MX_USART2_UART_Init+0x4c>)
 800206a:	220c      	movs	r2, #12
 800206c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <MX_USART2_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <MX_USART2_UART_Init+0x4c>)
 8002076:	2200      	movs	r2, #0
 8002078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800207a:	4805      	ldr	r0, [pc, #20]	; (8002090 <MX_USART2_UART_Init+0x4c>)
 800207c:	f001 ff24 	bl	8003ec8 <HAL_UART_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002086:	f000 f8bd 	bl	8002204 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200056c4 	.word	0x200056c4
 8002094:	40004400 	.word	0x40004400

08002098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	; 0x28
 800209c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <MX_GPIO_Init+0x15c>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <MX_GPIO_Init+0x15c>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <MX_GPIO_Init+0x15c>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <MX_GPIO_Init+0x15c>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	4a48      	ldr	r2, [pc, #288]	; (80021f4 <MX_GPIO_Init+0x15c>)
 80020d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d8:	6313      	str	r3, [r2, #48]	; 0x30
 80020da:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <MX_GPIO_Init+0x15c>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b42      	ldr	r3, [pc, #264]	; (80021f4 <MX_GPIO_Init+0x15c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a41      	ldr	r2, [pc, #260]	; (80021f4 <MX_GPIO_Init+0x15c>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <MX_GPIO_Init+0x15c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <MX_GPIO_Init+0x15c>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	4a3a      	ldr	r2, [pc, #232]	; (80021f4 <MX_GPIO_Init+0x15c>)
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	6313      	str	r3, [r2, #48]	; 0x30
 8002112:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <MX_GPIO_Init+0x15c>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	2120      	movs	r1, #32
 8002122:	4835      	ldr	r0, [pc, #212]	; (80021f8 <MX_GPIO_Init+0x160>)
 8002124:	f001 fa28 	bl	8003578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	f44f 7144 	mov.w	r1, #784	; 0x310
 800212e:	4833      	ldr	r0, [pc, #204]	; (80021fc <MX_GPIO_Init+0x164>)
 8002130:	f001 fa22 	bl	8003578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002134:	2200      	movs	r2, #0
 8002136:	f44f 510c 	mov.w	r1, #8960	; 0x2300
 800213a:	4831      	ldr	r0, [pc, #196]	; (8002200 <MX_GPIO_Init+0x168>)
 800213c:	f001 fa1c 	bl	8003578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002146:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800214a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4829      	ldr	r0, [pc, #164]	; (80021fc <MX_GPIO_Init+0x164>)
 8002158:	f001 f88a 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800215c:	2320      	movs	r3, #32
 800215e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	2301      	movs	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4821      	ldr	r0, [pc, #132]	; (80021f8 <MX_GPIO_Init+0x160>)
 8002174:	f001 f87c 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9;
 8002178:	f44f 7344 	mov.w	r3, #784	; 0x310
 800217c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217e:	2301      	movs	r3, #1
 8002180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002182:	2300      	movs	r3, #0
 8002184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	481a      	ldr	r0, [pc, #104]	; (80021fc <MX_GPIO_Init+0x164>)
 8002192:	f001 f86d 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a0:	2301      	movs	r3, #1
 80021a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	4814      	ldr	r0, [pc, #80]	; (8002200 <MX_GPIO_Init+0x168>)
 80021b0:	f001 f85e 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80021b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <MX_GPIO_Init+0x164>)
 80021ca:	f001 f851 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d4:	2301      	movs	r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	4619      	mov	r1, r3
 80021e6:	4806      	ldr	r0, [pc, #24]	; (8002200 <MX_GPIO_Init+0x168>)
 80021e8:	f001 f842 	bl	8003270 <HAL_GPIO_Init>

}
 80021ec:	bf00      	nop
 80021ee:	3728      	adds	r7, #40	; 0x28
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	40020800 	.word	0x40020800
 8002200:	40020400 	.word	0x40020400

08002204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800220c:	e7fe      	b.n	800220c <Error_Handler+0x8>
	...

08002210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	4b10      	ldr	r3, [pc, #64]	; (800225c <HAL_MspInit+0x4c>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4a0f      	ldr	r2, [pc, #60]	; (800225c <HAL_MspInit+0x4c>)
 8002220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002224:	6453      	str	r3, [r2, #68]	; 0x44
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <HAL_MspInit+0x4c>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_MspInit+0x4c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a08      	ldr	r2, [pc, #32]	; (800225c <HAL_MspInit+0x4c>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_MspInit+0x4c>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800

08002260 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_ADC_MspInit+0x7c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d127      	bne.n	80022d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_ADC_MspInit+0x80>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <HAL_ADC_MspInit+0x80>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_ADC_MspInit+0x80>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_ADC_MspInit+0x80>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <HAL_ADC_MspInit+0x80>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6313      	str	r3, [r2, #48]	; 0x30
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <HAL_ADC_MspInit+0x80>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022be:	2303      	movs	r3, #3
 80022c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4619      	mov	r1, r3
 80022cc:	4805      	ldr	r0, [pc, #20]	; (80022e4 <HAL_ADC_MspInit+0x84>)
 80022ce:	f000 ffcf 	bl	8003270 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022d2:	bf00      	nop
 80022d4:	3728      	adds	r7, #40	; 0x28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40012000 	.word	0x40012000
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40020000 	.word	0x40020000

080022e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08c      	sub	sp, #48	; 0x30
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 031c 	add.w	r3, r7, #28
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a3a      	ldr	r2, [pc, #232]	; (80023f0 <HAL_UART_MspInit+0x108>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d135      	bne.n	8002376 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <HAL_UART_MspInit+0x10c>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a38      	ldr	r2, [pc, #224]	; (80023f4 <HAL_UART_MspInit+0x10c>)
 8002314:	f043 0310 	orr.w	r3, r3, #16
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_UART_MspInit+0x10c>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <HAL_UART_MspInit+0x10c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a31      	ldr	r2, [pc, #196]	; (80023f4 <HAL_UART_MspInit+0x10c>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <HAL_UART_MspInit+0x10c>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002342:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002354:	2307      	movs	r3, #7
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 031c 	add.w	r3, r7, #28
 800235c:	4619      	mov	r1, r3
 800235e:	4826      	ldr	r0, [pc, #152]	; (80023f8 <HAL_UART_MspInit+0x110>)
 8002360:	f000 ff86 	bl	8003270 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002364:	2200      	movs	r2, #0
 8002366:	2100      	movs	r1, #0
 8002368:	2025      	movs	r0, #37	; 0x25
 800236a:	f000 feb8 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800236e:	2025      	movs	r0, #37	; 0x25
 8002370:	f000 fed1 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002374:	e038      	b.n	80023e8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a20      	ldr	r2, [pc, #128]	; (80023fc <HAL_UART_MspInit+0x114>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d133      	bne.n	80023e8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_UART_MspInit+0x10c>)
 8002386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002388:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <HAL_UART_MspInit+0x10c>)
 800238a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238e:	6413      	str	r3, [r2, #64]	; 0x40
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_UART_MspInit+0x10c>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	4b14      	ldr	r3, [pc, #80]	; (80023f4 <HAL_UART_MspInit+0x10c>)
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	4a13      	ldr	r2, [pc, #76]	; (80023f4 <HAL_UART_MspInit+0x10c>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6313      	str	r3, [r2, #48]	; 0x30
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_UART_MspInit+0x10c>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023b8:	230c      	movs	r3, #12
 80023ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c8:	2307      	movs	r3, #7
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	4619      	mov	r1, r3
 80023d2:	4809      	ldr	r0, [pc, #36]	; (80023f8 <HAL_UART_MspInit+0x110>)
 80023d4:	f000 ff4c 	bl	8003270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2100      	movs	r1, #0
 80023dc:	2026      	movs	r0, #38	; 0x26
 80023de:	f000 fe7e 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023e2:	2026      	movs	r0, #38	; 0x26
 80023e4:	f000 fe97 	bl	8003116 <HAL_NVIC_EnableIRQ>
}
 80023e8:	bf00      	nop
 80023ea:	3730      	adds	r7, #48	; 0x30
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40004400 	.word	0x40004400

08002400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <NMI_Handler+0x4>

08002406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <HardFault_Handler+0x4>

0800240c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <MemManage_Handler+0x4>

08002412 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <BusFault_Handler+0x4>

08002418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <UsageFault_Handler+0x4>

0800241e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244c:	f000 f96a 	bl	8002724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <USART1_IRQHandler+0x10>)
 800245a:	f001 fe45 	bl	80040e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20005680 	.word	0x20005680

08002468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <USART2_IRQHandler+0x10>)
 800246e:	f001 fe3b 	bl	80040e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200056c4 	.word	0x200056c4

0800247c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
	return 1;
 8002480:	2301      	movs	r3, #1
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_kill>:

int _kill(int pid, int sig)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002496:	f002 fce7 	bl	8004e68 <__errno>
 800249a:	4603      	mov	r3, r0
 800249c:	2216      	movs	r2, #22
 800249e:	601a      	str	r2, [r3, #0]
	return -1;
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_exit>:

void _exit (int status)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ffe7 	bl	800248c <_kill>
	while (1) {}		/* Make sure we hang here */
 80024be:	e7fe      	b.n	80024be <_exit+0x12>

080024c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	e00a      	b.n	80024e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024d2:	f3af 8000 	nop.w
 80024d6:	4601      	mov	r1, r0
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	1c5a      	adds	r2, r3, #1
 80024dc:	60ba      	str	r2, [r7, #8]
 80024de:	b2ca      	uxtb	r2, r1
 80024e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	dbf0      	blt.n	80024d2 <_read+0x12>
	}

return len;
 80024f0:	687b      	ldr	r3, [r7, #4]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e009      	b.n	8002520 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	60ba      	str	r2, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	dbf1      	blt.n	800250c <_write+0x12>
	}
	return len;
 8002528:	687b      	ldr	r3, [r7, #4]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_close>:

int _close(int file)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
	return -1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253e:	4618      	mov	r0, r3
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr

0800254a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800255a:	605a      	str	r2, [r3, #4]
	return 0;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <_isatty>:

int _isatty(int file)
{
 800256a:	b480      	push	{r7}
 800256c:	b083      	sub	sp, #12
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
	return 1;
 8002572:	2301      	movs	r3, #1
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
	return 0;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a4:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <_sbrk+0x5c>)
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <_sbrk+0x60>)
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b0:	4b13      	ldr	r3, [pc, #76]	; (8002600 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <_sbrk+0x64>)
 80025ba:	4a12      	ldr	r2, [pc, #72]	; (8002604 <_sbrk+0x68>)
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d207      	bcs.n	80025dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025cc:	f002 fc4c 	bl	8004e68 <__errno>
 80025d0:	4603      	mov	r3, r0
 80025d2:	220c      	movs	r2, #12
 80025d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	e009      	b.n	80025f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025dc:	4b08      	ldr	r3, [pc, #32]	; (8002600 <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <_sbrk+0x64>)
 80025ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20020000 	.word	0x20020000
 80025fc:	00000400 	.word	0x00000400
 8002600:	20000230 	.word	0x20000230
 8002604:	20007f20 	.word	0x20007f20

08002608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <SystemInit+0x20>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	4a05      	ldr	r2, [pc, #20]	; (8002628 <SystemInit+0x20>)
 8002614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800262c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002630:	480d      	ldr	r0, [pc, #52]	; (8002668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002632:	490e      	ldr	r1, [pc, #56]	; (800266c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002634:	4a0e      	ldr	r2, [pc, #56]	; (8002670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002638:	e002      	b.n	8002640 <LoopCopyDataInit>

0800263a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800263a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800263c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800263e:	3304      	adds	r3, #4

08002640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002644:	d3f9      	bcc.n	800263a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002646:	4a0b      	ldr	r2, [pc, #44]	; (8002674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002648:	4c0b      	ldr	r4, [pc, #44]	; (8002678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800264a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800264c:	e001      	b.n	8002652 <LoopFillZerobss>

0800264e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800264e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002650:	3204      	adds	r2, #4

08002652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002654:	d3fb      	bcc.n	800264e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002656:	f7ff ffd7 	bl	8002608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800265a:	f002 fc0b 	bl	8004e74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800265e:	f7ff fa15 	bl	8001a8c <main>
  bx  lr    
 8002662:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800266c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002670:	0800a774 	.word	0x0800a774
  ldr r2, =_sbss
 8002674:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8002678:	20007f20 	.word	0x20007f20

0800267c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800267c:	e7fe      	b.n	800267c <ADC_IRQHandler>
	...

08002680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002684:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <HAL_Init+0x40>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <HAL_Init+0x40>)
 800268a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_Init+0x40>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <HAL_Init+0x40>)
 8002696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800269c:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_Init+0x40>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <HAL_Init+0x40>)
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a8:	2003      	movs	r0, #3
 80026aa:	f000 fd0d 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f000 f808 	bl	80026c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b4:	f7ff fdac 	bl	8002210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023c00 	.word	0x40023c00

080026c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_InitTick+0x54>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_InitTick+0x58>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026da:	fbb3 f3f1 	udiv	r3, r3, r1
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fd25 	bl	8003132 <HAL_SYSTICK_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e00e      	b.n	8002710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b0f      	cmp	r3, #15
 80026f6:	d80a      	bhi.n	800270e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f8:	2200      	movs	r2, #0
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	f000 fced 	bl	80030de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002704:	4a06      	ldr	r2, [pc, #24]	; (8002720 <HAL_InitTick+0x5c>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	e000      	b.n	8002710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000024 	.word	0x20000024
 800271c:	2000002c 	.word	0x2000002c
 8002720:	20000028 	.word	0x20000028

08002724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_IncTick+0x20>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	461a      	mov	r2, r3
 800272e:	4b06      	ldr	r3, [pc, #24]	; (8002748 <HAL_IncTick+0x24>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4413      	add	r3, r2
 8002734:	4a04      	ldr	r2, [pc, #16]	; (8002748 <HAL_IncTick+0x24>)
 8002736:	6013      	str	r3, [r2, #0]
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	2000002c 	.word	0x2000002c
 8002748:	20007f0c 	.word	0x20007f0c

0800274c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return uwTick;
 8002750:	4b03      	ldr	r3, [pc, #12]	; (8002760 <HAL_GetTick+0x14>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	20007f0c 	.word	0x20007f0c

08002764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800276c:	f7ff ffee 	bl	800274c <HAL_GetTick>
 8002770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277c:	d005      	beq.n	800278a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800277e:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_Delay+0x44>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800278a:	bf00      	nop
 800278c:	f7ff ffde 	bl	800274c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	429a      	cmp	r2, r3
 800279a:	d8f7      	bhi.n	800278c <HAL_Delay+0x28>
  {
  }
}
 800279c:	bf00      	nop
 800279e:	bf00      	nop
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000002c 	.word	0x2000002c

080027ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e033      	b.n	800282a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fd48 	bl	8002260 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d118      	bne.n	800281c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027f2:	f023 0302 	bic.w	r3, r3, #2
 80027f6:	f043 0202 	orr.w	r2, r3, #2
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fa96 	bl	8002d30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f023 0303 	bic.w	r3, r3, #3
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
 800281a:	e001      	b.n	8002820 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_ADC_Start+0x1a>
 800284a:	2302      	movs	r3, #2
 800284c:	e097      	b.n	800297e <HAL_ADC_Start+0x14a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d018      	beq.n	8002896 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002874:	4b45      	ldr	r3, [pc, #276]	; (800298c <HAL_ADC_Start+0x158>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a45      	ldr	r2, [pc, #276]	; (8002990 <HAL_ADC_Start+0x15c>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0c9a      	lsrs	r2, r3, #18
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002888:	e002      	b.n	8002890 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3b01      	subs	r3, #1
 800288e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f9      	bne.n	800288a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d15f      	bne.n	8002964 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e2:	d106      	bne.n	80028f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	f023 0206 	bic.w	r2, r3, #6
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44
 80028f0:	e002      	b.n	80028f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002900:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_ADC_Start+0x160>)
 8002902:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800290c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10f      	bne.n	800293a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d129      	bne.n	800297c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	e020      	b.n	800297c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a16      	ldr	r2, [pc, #88]	; (8002998 <HAL_ADC_Start+0x164>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d11b      	bne.n	800297c <HAL_ADC_Start+0x148>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d114      	bne.n	800297c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	e00b      	b.n	800297c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f043 0210 	orr.w	r2, r3, #16
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	f043 0201 	orr.w	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000024 	.word	0x20000024
 8002990:	431bde83 	.word	0x431bde83
 8002994:	40012300 	.word	0x40012300
 8002998:	40012000 	.word	0x40012000

0800299c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b8:	d113      	bne.n	80029e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80029c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c8:	d10b      	bne.n	80029e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0220 	orr.w	r2, r3, #32
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e063      	b.n	8002aaa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80029e2:	f7ff feb3 	bl	800274c <HAL_GetTick>
 80029e6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80029e8:	e021      	b.n	8002a2e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f0:	d01d      	beq.n	8002a2e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d007      	beq.n	8002a08 <HAL_ADC_PollForConversion+0x6c>
 80029f8:	f7ff fea8 	bl	800274c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d212      	bcs.n	8002a2e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d00b      	beq.n	8002a2e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	f043 0204 	orr.w	r2, r3, #4
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e03d      	b.n	8002aaa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d1d6      	bne.n	80029ea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0212 	mvn.w	r2, #18
 8002a44:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d123      	bne.n	8002aa8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d11f      	bne.n	8002aa8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d111      	bne.n	8002aa8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f043 0201 	orr.w	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1c>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e113      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x244>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b09      	cmp	r3, #9
 8002af6:	d925      	bls.n	8002b44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68d9      	ldr	r1, [r3, #12]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3b1e      	subs	r3, #30
 8002b0e:	2207      	movs	r2, #7
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43da      	mvns	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	400a      	ands	r2, r1
 8002b1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68d9      	ldr	r1, [r3, #12]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	4603      	mov	r3, r0
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4403      	add	r3, r0
 8002b36:	3b1e      	subs	r3, #30
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	e022      	b.n	8002b8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6919      	ldr	r1, [r3, #16]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	461a      	mov	r2, r3
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	2207      	movs	r2, #7
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	400a      	ands	r2, r1
 8002b66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6919      	ldr	r1, [r3, #16]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4403      	add	r3, r0
 8002b80:	409a      	lsls	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d824      	bhi.n	8002bdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3b05      	subs	r3, #5
 8002ba4:	221f      	movs	r2, #31
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43da      	mvns	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	3b05      	subs	r3, #5
 8002bce:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bda:	e04c      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b0c      	cmp	r3, #12
 8002be2:	d824      	bhi.n	8002c2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	3b23      	subs	r3, #35	; 0x23
 8002bf6:	221f      	movs	r2, #31
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43da      	mvns	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	400a      	ands	r2, r1
 8002c04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3b23      	subs	r3, #35	; 0x23
 8002c20:	fa00 f203 	lsl.w	r2, r0, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c2c:	e023      	b.n	8002c76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3b41      	subs	r3, #65	; 0x41
 8002c40:	221f      	movs	r2, #31
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43da      	mvns	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	3b41      	subs	r3, #65	; 0x41
 8002c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c76:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <HAL_ADC_ConfigChannel+0x250>)
 8002c78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a28      	ldr	r2, [pc, #160]	; (8002d20 <HAL_ADC_ConfigChannel+0x254>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d10f      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x1d8>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b12      	cmp	r3, #18
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <HAL_ADC_ConfigChannel+0x254>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d12b      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x23a>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <HAL_ADC_ConfigChannel+0x258>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <HAL_ADC_ConfigChannel+0x1f4>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b11      	cmp	r3, #17
 8002cbe:	d122      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a11      	ldr	r2, [pc, #68]	; (8002d24 <HAL_ADC_ConfigChannel+0x258>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d111      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce2:	4b11      	ldr	r3, [pc, #68]	; (8002d28 <HAL_ADC_ConfigChannel+0x25c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <HAL_ADC_ConfigChannel+0x260>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	0c9a      	lsrs	r2, r3, #18
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002cf8:	e002      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f9      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	40012300 	.word	0x40012300
 8002d20:	40012000 	.word	0x40012000
 8002d24:	10000012 	.word	0x10000012
 8002d28:	20000024 	.word	0x20000024
 8002d2c:	431bde83 	.word	0x431bde83

08002d30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d38:	4b79      	ldr	r3, [pc, #484]	; (8002f20 <ADC_Init+0x1f0>)
 8002d3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6899      	ldr	r1, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <ADC_Init+0x1f4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6899      	ldr	r1, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	e00f      	b.n	8002e2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0202 	bic.w	r2, r2, #2
 8002e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7e1b      	ldrb	r3, [r3, #24]
 8002e48:	005a      	lsls	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	3b01      	subs	r3, #1
 8002e88:	035a      	lsls	r2, r3, #13
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	e007      	b.n	8002ea4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	051a      	lsls	r2, r3, #20
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6899      	ldr	r1, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ee6:	025a      	lsls	r2, r3, #9
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6899      	ldr	r1, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	029a      	lsls	r2, r3, #10
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40012300 	.word	0x40012300
 8002f24:	0f000001 	.word	0x0f000001

08002f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	db0b      	blt.n	8002fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <__NVIC_EnableIRQ+0x38>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2001      	movs	r0, #1
 8002fae:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db0a      	blt.n	8002ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	490c      	ldr	r1, [pc, #48]	; (8003014 <__NVIC_SetPriority+0x4c>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff0:	e00a      	b.n	8003008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4908      	ldr	r1, [pc, #32]	; (8003018 <__NVIC_SetPriority+0x50>)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	3b04      	subs	r3, #4
 8003000:	0112      	lsls	r2, r2, #4
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	440b      	add	r3, r1
 8003006:	761a      	strb	r2, [r3, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000e100 	.word	0xe000e100
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	; 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f1c3 0307 	rsb	r3, r3, #7
 8003036:	2b04      	cmp	r3, #4
 8003038:	bf28      	it	cs
 800303a:	2304      	movcs	r3, #4
 800303c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3304      	adds	r3, #4
 8003042:	2b06      	cmp	r3, #6
 8003044:	d902      	bls.n	800304c <NVIC_EncodePriority+0x30>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3b03      	subs	r3, #3
 800304a:	e000      	b.n	800304e <NVIC_EncodePriority+0x32>
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	401a      	ands	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003064:	f04f 31ff 	mov.w	r1, #4294967295
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43d9      	mvns	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	4313      	orrs	r3, r2
         );
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	; 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003094:	d301      	bcc.n	800309a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003096:	2301      	movs	r3, #1
 8003098:	e00f      	b.n	80030ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <SysTick_Config+0x40>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030a2:	210f      	movs	r1, #15
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	f7ff ff8e 	bl	8002fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <SysTick_Config+0x40>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030b2:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <SysTick_Config+0x40>)
 80030b4:	2207      	movs	r2, #7
 80030b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	e000e010 	.word	0xe000e010

080030c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff29 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f0:	f7ff ff3e 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7ff ff8e 	bl	800301c <NVIC_EncodePriority>
 8003100:	4602      	mov	r2, r0
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff5d 	bl	8002fc8 <__NVIC_SetPriority>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff31 	bl	8002f8c <__NVIC_EnableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ffa2 	bl	8003084 <SysTick_Config>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003156:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff faf8 	bl	800274c <HAL_GetTick>
 800315c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b02      	cmp	r3, #2
 8003168:	d008      	beq.n	800317c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2280      	movs	r2, #128	; 0x80
 800316e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e052      	b.n	8003222 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0216 	bic.w	r2, r2, #22
 800318a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d103      	bne.n	80031ac <HAL_DMA_Abort+0x62>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0208 	bic.w	r2, r2, #8
 80031ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031cc:	e013      	b.n	80031f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031ce:	f7ff fabd 	bl	800274c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d90c      	bls.n	80031f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2203      	movs	r2, #3
 80031e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e015      	b.n	8003222 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1e4      	bne.n	80031ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003208:	223f      	movs	r2, #63	; 0x3f
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d004      	beq.n	8003248 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2280      	movs	r2, #128	; 0x80
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e00c      	b.n	8003262 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2205      	movs	r2, #5
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0201 	bic.w	r2, r2, #1
 800325e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	; 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	e159      	b.n	8003540 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800328c:	2201      	movs	r2, #1
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	f040 8148 	bne.w	800353a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d005      	beq.n	80032c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d130      	bne.n	8003324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2203      	movs	r2, #3
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032f8:	2201      	movs	r2, #1
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 0201 	and.w	r2, r3, #1
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0303 	and.w	r3, r3, #3
 800332c:	2b03      	cmp	r3, #3
 800332e:	d017      	beq.n	8003360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	2203      	movs	r2, #3
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d123      	bne.n	80033b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	08da      	lsrs	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3208      	adds	r2, #8
 8003374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	220f      	movs	r2, #15
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	08da      	lsrs	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3208      	adds	r2, #8
 80033ae:	69b9      	ldr	r1, [r7, #24]
 80033b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	2203      	movs	r2, #3
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0203 	and.w	r2, r3, #3
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80a2 	beq.w	800353a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b57      	ldr	r3, [pc, #348]	; (8003558 <HAL_GPIO_Init+0x2e8>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	4a56      	ldr	r2, [pc, #344]	; (8003558 <HAL_GPIO_Init+0x2e8>)
 8003400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003404:	6453      	str	r3, [r2, #68]	; 0x44
 8003406:	4b54      	ldr	r3, [pc, #336]	; (8003558 <HAL_GPIO_Init+0x2e8>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003412:	4a52      	ldr	r2, [pc, #328]	; (800355c <HAL_GPIO_Init+0x2ec>)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a49      	ldr	r2, [pc, #292]	; (8003560 <HAL_GPIO_Init+0x2f0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d019      	beq.n	8003472 <HAL_GPIO_Init+0x202>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a48      	ldr	r2, [pc, #288]	; (8003564 <HAL_GPIO_Init+0x2f4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_GPIO_Init+0x1fe>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a47      	ldr	r2, [pc, #284]	; (8003568 <HAL_GPIO_Init+0x2f8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00d      	beq.n	800346a <HAL_GPIO_Init+0x1fa>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a46      	ldr	r2, [pc, #280]	; (800356c <HAL_GPIO_Init+0x2fc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <HAL_GPIO_Init+0x1f6>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a45      	ldr	r2, [pc, #276]	; (8003570 <HAL_GPIO_Init+0x300>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_GPIO_Init+0x1f2>
 800345e:	2304      	movs	r3, #4
 8003460:	e008      	b.n	8003474 <HAL_GPIO_Init+0x204>
 8003462:	2307      	movs	r3, #7
 8003464:	e006      	b.n	8003474 <HAL_GPIO_Init+0x204>
 8003466:	2303      	movs	r3, #3
 8003468:	e004      	b.n	8003474 <HAL_GPIO_Init+0x204>
 800346a:	2302      	movs	r3, #2
 800346c:	e002      	b.n	8003474 <HAL_GPIO_Init+0x204>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_GPIO_Init+0x204>
 8003472:	2300      	movs	r3, #0
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	f002 0203 	and.w	r2, r2, #3
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	4093      	lsls	r3, r2
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003484:	4935      	ldr	r1, [pc, #212]	; (800355c <HAL_GPIO_Init+0x2ec>)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	3302      	adds	r3, #2
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003492:	4b38      	ldr	r3, [pc, #224]	; (8003574 <HAL_GPIO_Init+0x304>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	43db      	mvns	r3, r3
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	4013      	ands	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034b6:	4a2f      	ldr	r2, [pc, #188]	; (8003574 <HAL_GPIO_Init+0x304>)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034bc:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <HAL_GPIO_Init+0x304>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034e0:	4a24      	ldr	r2, [pc, #144]	; (8003574 <HAL_GPIO_Init+0x304>)
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034e6:	4b23      	ldr	r3, [pc, #140]	; (8003574 <HAL_GPIO_Init+0x304>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	43db      	mvns	r3, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4013      	ands	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800350a:	4a1a      	ldr	r2, [pc, #104]	; (8003574 <HAL_GPIO_Init+0x304>)
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003510:	4b18      	ldr	r3, [pc, #96]	; (8003574 <HAL_GPIO_Init+0x304>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d003      	beq.n	8003534 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003534:	4a0f      	ldr	r2, [pc, #60]	; (8003574 <HAL_GPIO_Init+0x304>)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3301      	adds	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	f67f aea2 	bls.w	800328c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	40013800 	.word	0x40013800
 8003560:	40020000 	.word	0x40020000
 8003564:	40020400 	.word	0x40020400
 8003568:	40020800 	.word	0x40020800
 800356c:	40020c00 	.word	0x40020c00
 8003570:	40021000 	.word	0x40021000
 8003574:	40013c00 	.word	0x40013c00

08003578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
 8003584:	4613      	mov	r3, r2
 8003586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003588:	787b      	ldrb	r3, [r7, #1]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800358e:	887a      	ldrh	r2, [r7, #2]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003594:	e003      	b.n	800359e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	041a      	lsls	r2, r3, #16
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	619a      	str	r2, [r3, #24]
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035bc:	887a      	ldrh	r2, [r7, #2]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4013      	ands	r3, r2
 80035c2:	041a      	lsls	r2, r3, #16
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	43d9      	mvns	r1, r3
 80035c8:	887b      	ldrh	r3, [r7, #2]
 80035ca:	400b      	ands	r3, r1
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	619a      	str	r2, [r3, #24]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e264      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d075      	beq.n	80036ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035fe:	4ba3      	ldr	r3, [pc, #652]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b04      	cmp	r3, #4
 8003608:	d00c      	beq.n	8003624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360a:	4ba0      	ldr	r3, [pc, #640]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003612:	2b08      	cmp	r3, #8
 8003614:	d112      	bne.n	800363c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003616:	4b9d      	ldr	r3, [pc, #628]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003622:	d10b      	bne.n	800363c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003624:	4b99      	ldr	r3, [pc, #612]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d05b      	beq.n	80036e8 <HAL_RCC_OscConfig+0x108>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d157      	bne.n	80036e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e23f      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d106      	bne.n	8003654 <HAL_RCC_OscConfig+0x74>
 8003646:	4b91      	ldr	r3, [pc, #580]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a90      	ldr	r2, [pc, #576]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e01d      	b.n	8003690 <HAL_RCC_OscConfig+0xb0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x98>
 800365e:	4b8b      	ldr	r3, [pc, #556]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a8a      	ldr	r2, [pc, #552]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a87      	ldr	r2, [pc, #540]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e00b      	b.n	8003690 <HAL_RCC_OscConfig+0xb0>
 8003678:	4b84      	ldr	r3, [pc, #528]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a83      	ldr	r2, [pc, #524]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800367e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	4b81      	ldr	r3, [pc, #516]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a80      	ldr	r2, [pc, #512]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800368a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d013      	beq.n	80036c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7ff f858 	bl	800274c <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a0:	f7ff f854 	bl	800274c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e204      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0xc0>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7ff f844 	bl	800274c <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c8:	f7ff f840 	bl	800274c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e1f0      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036da:	4b6c      	ldr	r3, [pc, #432]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0xe8>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d063      	beq.n	80037be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036f6:	4b65      	ldr	r3, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003702:	4b62      	ldr	r3, [pc, #392]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370a:	2b08      	cmp	r3, #8
 800370c:	d11c      	bne.n	8003748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d116      	bne.n	8003748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371a:	4b5c      	ldr	r3, [pc, #368]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_RCC_OscConfig+0x152>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d001      	beq.n	8003732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e1c4      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003732:	4b56      	ldr	r3, [pc, #344]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4952      	ldr	r1, [pc, #328]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003746:	e03a      	b.n	80037be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003750:	4b4f      	ldr	r3, [pc, #316]	; (8003890 <HAL_RCC_OscConfig+0x2b0>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fe fff9 	bl	800274c <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375e:	f7fe fff5 	bl	800274c <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e1a5      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003770:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377c:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4940      	ldr	r1, [pc, #256]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
 8003790:	e015      	b.n	80037be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003792:	4b3f      	ldr	r3, [pc, #252]	; (8003890 <HAL_RCC_OscConfig+0x2b0>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe ffd8 	bl	800274c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a0:	f7fe ffd4 	bl	800274c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e184      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	4b36      	ldr	r3, [pc, #216]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d030      	beq.n	800382c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d2:	4b30      	ldr	r3, [pc, #192]	; (8003894 <HAL_RCC_OscConfig+0x2b4>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fe ffb8 	bl	800274c <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fe ffb4 	bl	800274c <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e164      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f2:	4b26      	ldr	r3, [pc, #152]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x200>
 80037fe:	e015      	b.n	800382c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003800:	4b24      	ldr	r3, [pc, #144]	; (8003894 <HAL_RCC_OscConfig+0x2b4>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003806:	f7fe ffa1 	bl	800274c <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800380e:	f7fe ff9d 	bl	800274c <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e14d      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f0      	bne.n	800380e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a0 	beq.w	800397a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b13      	ldr	r3, [pc, #76]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	60bb      	str	r3, [r7, #8]
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	4a0e      	ldr	r2, [pc, #56]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003858:	6413      	str	r3, [r2, #64]	; 0x40
 800385a:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_RCC_OscConfig+0x2ac>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	60bb      	str	r3, [r7, #8]
 8003864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_OscConfig+0x2b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d121      	bne.n	80038ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_RCC_OscConfig+0x2b8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a07      	ldr	r2, [pc, #28]	; (8003898 <HAL_RCC_OscConfig+0x2b8>)
 800387c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003882:	f7fe ff63 	bl	800274c <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	e011      	b.n	80038ae <HAL_RCC_OscConfig+0x2ce>
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	42470000 	.word	0x42470000
 8003894:	42470e80 	.word	0x42470e80
 8003898:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389c:	f7fe ff56 	bl	800274c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e106      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ae:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCC_OscConfig+0x4e4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d106      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2f0>
 80038c2:	4b81      	ldr	r3, [pc, #516]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a80      	ldr	r2, [pc, #512]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70
 80038ce:	e01c      	b.n	800390a <HAL_RCC_OscConfig+0x32a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d10c      	bne.n	80038f2 <HAL_RCC_OscConfig+0x312>
 80038d8:	4b7b      	ldr	r3, [pc, #492]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a7a      	ldr	r2, [pc, #488]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 80038de:	f043 0304 	orr.w	r3, r3, #4
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
 80038e4:	4b78      	ldr	r3, [pc, #480]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	4a77      	ldr	r2, [pc, #476]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6713      	str	r3, [r2, #112]	; 0x70
 80038f0:	e00b      	b.n	800390a <HAL_RCC_OscConfig+0x32a>
 80038f2:	4b75      	ldr	r3, [pc, #468]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a74      	ldr	r2, [pc, #464]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
 80038fe:	4b72      	ldr	r3, [pc, #456]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	4a71      	ldr	r2, [pc, #452]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 8003904:	f023 0304 	bic.w	r3, r3, #4
 8003908:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d015      	beq.n	800393e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003912:	f7fe ff1b 	bl	800274c <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391a:	f7fe ff17 	bl	800274c <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	f241 3288 	movw	r2, #5000	; 0x1388
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e0c5      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003930:	4b65      	ldr	r3, [pc, #404]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 8003932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0ee      	beq.n	800391a <HAL_RCC_OscConfig+0x33a>
 800393c:	e014      	b.n	8003968 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800393e:	f7fe ff05 	bl	800274c <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003944:	e00a      	b.n	800395c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003946:	f7fe ff01 	bl	800274c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f241 3288 	movw	r2, #5000	; 0x1388
 8003954:	4293      	cmp	r3, r2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e0af      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395c:	4b5a      	ldr	r3, [pc, #360]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ee      	bne.n	8003946 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d105      	bne.n	800397a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396e:	4b56      	ldr	r3, [pc, #344]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	4a55      	ldr	r2, [pc, #340]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 8003974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003978:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 809b 	beq.w	8003aba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003984:	4b50      	ldr	r3, [pc, #320]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b08      	cmp	r3, #8
 800398e:	d05c      	beq.n	8003a4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d141      	bne.n	8003a1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003998:	4b4c      	ldr	r3, [pc, #304]	; (8003acc <HAL_RCC_OscConfig+0x4ec>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399e:	f7fe fed5 	bl	800274c <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fe fed1 	bl	800274c <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e081      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b8:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69da      	ldr	r2, [r3, #28]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	019b      	lsls	r3, r3, #6
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	3b01      	subs	r3, #1
 80039de:	041b      	lsls	r3, r3, #16
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	061b      	lsls	r3, r3, #24
 80039e8:	4937      	ldr	r1, [pc, #220]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ee:	4b37      	ldr	r3, [pc, #220]	; (8003acc <HAL_RCC_OscConfig+0x4ec>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fe feaa 	bl	800274c <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fc:	f7fe fea6 	bl	800274c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e056      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0e:	4b2e      	ldr	r3, [pc, #184]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x41c>
 8003a1a:	e04e      	b.n	8003aba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1c:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <HAL_RCC_OscConfig+0x4ec>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7fe fe93 	bl	800274c <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2a:	f7fe fe8f 	bl	800274c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e03f      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3c:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCC_OscConfig+0x44a>
 8003a48:	e037      	b.n	8003aba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e032      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a56:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <HAL_RCC_OscConfig+0x4e8>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d028      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d121      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d11a      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a86:	4013      	ands	r3, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a8c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d111      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40007000 	.word	0x40007000
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	42470060 	.word	0x42470060

08003ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0cc      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b68      	ldr	r3, [pc, #416]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d90c      	bls.n	8003b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b65      	ldr	r3, [pc, #404]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b63      	ldr	r3, [pc, #396]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0b8      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d020      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b24:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4a58      	ldr	r2, [pc, #352]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b3c:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4a52      	ldr	r2, [pc, #328]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b48:	4b50      	ldr	r3, [pc, #320]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	494d      	ldr	r1, [pc, #308]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d044      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d119      	bne.n	8003bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e07f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8e:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e06f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e067      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bae:	4b37      	ldr	r3, [pc, #220]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f023 0203 	bic.w	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4934      	ldr	r1, [pc, #208]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc0:	f7fe fdc4 	bl	800274c <HAL_GetTick>
 8003bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc8:	f7fe fdc0 	bl	800274c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e04f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bde:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 020c 	and.w	r2, r3, #12
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d1eb      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf0:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d20c      	bcs.n	8003c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfe:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e032      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c24:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4916      	ldr	r1, [pc, #88]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	490e      	ldr	r1, [pc, #56]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c56:	f000 f821 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	490a      	ldr	r1, [pc, #40]	; (8003c90 <HAL_RCC_ClockConfig+0x1c0>)
 8003c68:	5ccb      	ldrb	r3, [r1, r3]
 8003c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6e:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fd24 	bl	80026c4 <HAL_InitTick>

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40023c00 	.word	0x40023c00
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	0800a280 	.word	0x0800a280
 8003c94:	20000024 	.word	0x20000024
 8003c98:	20000028 	.word	0x20000028

08003c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	2300      	movs	r3, #0
 8003cae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb4:	4b67      	ldr	r3, [pc, #412]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d00d      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x40>
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	f200 80bd 	bhi.w	8003e40 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d003      	beq.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cce:	e0b7      	b.n	8003e40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cd0:	4b61      	ldr	r3, [pc, #388]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cd2:	60bb      	str	r3, [r7, #8]
       break;
 8003cd4:	e0b7      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cd6:	4b61      	ldr	r3, [pc, #388]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003cd8:	60bb      	str	r3, [r7, #8]
      break;
 8003cda:	e0b4      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cdc:	4b5d      	ldr	r3, [pc, #372]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ce6:	4b5b      	ldr	r3, [pc, #364]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d04d      	beq.n	8003d8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf2:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	099b      	lsrs	r3, r3, #6
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d02:	f04f 0100 	mov.w	r1, #0
 8003d06:	ea02 0800 	and.w	r8, r2, r0
 8003d0a:	ea03 0901 	and.w	r9, r3, r1
 8003d0e:	4640      	mov	r0, r8
 8003d10:	4649      	mov	r1, r9
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	014b      	lsls	r3, r1, #5
 8003d1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d20:	0142      	lsls	r2, r0, #5
 8003d22:	4610      	mov	r0, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	ebb0 0008 	subs.w	r0, r0, r8
 8003d2a:	eb61 0109 	sbc.w	r1, r1, r9
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	f04f 0300 	mov.w	r3, #0
 8003d36:	018b      	lsls	r3, r1, #6
 8003d38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d3c:	0182      	lsls	r2, r0, #6
 8003d3e:	1a12      	subs	r2, r2, r0
 8003d40:	eb63 0301 	sbc.w	r3, r3, r1
 8003d44:	f04f 0000 	mov.w	r0, #0
 8003d48:	f04f 0100 	mov.w	r1, #0
 8003d4c:	00d9      	lsls	r1, r3, #3
 8003d4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d52:	00d0      	lsls	r0, r2, #3
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	eb12 0208 	adds.w	r2, r2, r8
 8003d5c:	eb43 0309 	adc.w	r3, r3, r9
 8003d60:	f04f 0000 	mov.w	r0, #0
 8003d64:	f04f 0100 	mov.w	r1, #0
 8003d68:	0259      	lsls	r1, r3, #9
 8003d6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d6e:	0250      	lsls	r0, r2, #9
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4610      	mov	r0, r2
 8003d76:	4619      	mov	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f7fc ff9a 	bl	8000cb8 <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4613      	mov	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e04a      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8e:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	461a      	mov	r2, r3
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d9e:	f04f 0100 	mov.w	r1, #0
 8003da2:	ea02 0400 	and.w	r4, r2, r0
 8003da6:	ea03 0501 	and.w	r5, r3, r1
 8003daa:	4620      	mov	r0, r4
 8003dac:	4629      	mov	r1, r5
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	014b      	lsls	r3, r1, #5
 8003db8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dbc:	0142      	lsls	r2, r0, #5
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	1b00      	subs	r0, r0, r4
 8003dc4:	eb61 0105 	sbc.w	r1, r1, r5
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	018b      	lsls	r3, r1, #6
 8003dd2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dd6:	0182      	lsls	r2, r0, #6
 8003dd8:	1a12      	subs	r2, r2, r0
 8003dda:	eb63 0301 	sbc.w	r3, r3, r1
 8003dde:	f04f 0000 	mov.w	r0, #0
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	00d9      	lsls	r1, r3, #3
 8003de8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dec:	00d0      	lsls	r0, r2, #3
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	1912      	adds	r2, r2, r4
 8003df4:	eb45 0303 	adc.w	r3, r5, r3
 8003df8:	f04f 0000 	mov.w	r0, #0
 8003dfc:	f04f 0100 	mov.w	r1, #0
 8003e00:	0299      	lsls	r1, r3, #10
 8003e02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e06:	0290      	lsls	r0, r2, #10
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4619      	mov	r1, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	461a      	mov	r2, r3
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	f7fc ff4e 	bl	8000cb8 <__aeabi_uldivmod>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4613      	mov	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	3301      	adds	r3, #1
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	60bb      	str	r3, [r7, #8]
      break;
 8003e3e:	e002      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e40:	4b05      	ldr	r3, [pc, #20]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e42:	60bb      	str	r3, [r7, #8]
      break;
 8003e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e46:	68bb      	ldr	r3, [r7, #8]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800
 8003e58:	00f42400 	.word	0x00f42400
 8003e5c:	007a1200 	.word	0x007a1200

08003e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e64:	4b03      	ldr	r3, [pc, #12]	; (8003e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e66:	681b      	ldr	r3, [r3, #0]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	20000024 	.word	0x20000024

08003e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e7c:	f7ff fff0 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003e80:	4602      	mov	r2, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	0a9b      	lsrs	r3, r3, #10
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8e:	5ccb      	ldrb	r3, [r1, r3]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	0800a290 	.word	0x0800a290

08003ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ea4:	f7ff ffdc 	bl	8003e60 <HAL_RCC_GetHCLKFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	0b5b      	lsrs	r3, r3, #13
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	4903      	ldr	r1, [pc, #12]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	0800a290 	.word	0x0800a290

08003ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e03f      	b.n	8003f5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe f9fa 	bl	80022e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	; 0x24
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 fddb 	bl	8004ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695a      	ldr	r2, [r3, #20]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b08a      	sub	sp, #40	; 0x28
 8003f66:	af02      	add	r7, sp, #8
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	603b      	str	r3, [r7, #0]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d17c      	bne.n	800407c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d002      	beq.n	8003f8e <HAL_UART_Transmit+0x2c>
 8003f88:	88fb      	ldrh	r3, [r7, #6]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e075      	b.n	800407e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_UART_Transmit+0x3e>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e06e      	b.n	800407e <HAL_UART_Transmit+0x11c>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2221      	movs	r2, #33	; 0x21
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fb6:	f7fe fbc9 	bl	800274c <HAL_GetTick>
 8003fba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	88fa      	ldrh	r2, [r7, #6]
 8003fc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	88fa      	ldrh	r2, [r7, #6]
 8003fc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd0:	d108      	bne.n	8003fe4 <HAL_UART_Transmit+0x82>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	e003      	b.n	8003fec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ff4:	e02a      	b.n	800404c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2180      	movs	r1, #128	; 0x80
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 fb1f 	bl	8004644 <UART_WaitOnFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e036      	b.n	800407e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10b      	bne.n	800402e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004024:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	3302      	adds	r3, #2
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	e007      	b.n	800403e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	781a      	ldrb	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	3301      	adds	r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1cf      	bne.n	8003ff6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	2200      	movs	r2, #0
 800405e:	2140      	movs	r1, #64	; 0x40
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 faef 	bl	8004644 <UART_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e006      	b.n	800407e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	e000      	b.n	800407e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800407c:	2302      	movs	r3, #2
  }
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	4613      	mov	r3, r2
 8004092:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b20      	cmp	r3, #32
 800409e:	d11d      	bne.n	80040dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_UART_Receive_IT+0x26>
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e016      	b.n	80040de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_UART_Receive_IT+0x38>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e00f      	b.n	80040de <HAL_UART_Receive_IT+0x58>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040cc:	88fb      	ldrh	r3, [r7, #6]
 80040ce:	461a      	mov	r2, r3
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fb24 	bl	8004720 <UART_Start_Receive_IT>
 80040d8:	4603      	mov	r3, r0
 80040da:	e000      	b.n	80040de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b0ba      	sub	sp, #232	; 0xe8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004114:	2300      	movs	r3, #0
 8004116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800411a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800412e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d009      	beq.n	800414e <HAL_UART_IRQHandler+0x66>
 800413a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fc03 	bl	8004952 <UART_Receive_IT>
      return;
 800414c:	e256      	b.n	80045fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800414e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80de 	beq.w	8004314 <HAL_UART_IRQHandler+0x22c>
 8004158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004168:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80d1 	beq.w	8004314 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <HAL_UART_IRQHandler+0xae>
 800417e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	f043 0201 	orr.w	r2, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_UART_IRQHandler+0xd2>
 80041a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	f043 0202 	orr.w	r2, r3, #2
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_UART_IRQHandler+0xf6>
 80041c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d005      	beq.n	80041de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f043 0204 	orr.w	r2, r3, #4
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d011      	beq.n	800420e <HAL_UART_IRQHandler+0x126>
 80041ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d105      	bne.n	8004202 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d005      	beq.n	800420e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f043 0208 	orr.w	r2, r3, #8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 81ed 	beq.w	80045f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421c:	f003 0320 	and.w	r3, r3, #32
 8004220:	2b00      	cmp	r3, #0
 8004222:	d008      	beq.n	8004236 <HAL_UART_IRQHandler+0x14e>
 8004224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b00      	cmp	r3, #0
 800422e:	d002      	beq.n	8004236 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fb8e 	bl	8004952 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	bf0c      	ite	eq
 8004244:	2301      	moveq	r3, #1
 8004246:	2300      	movne	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <HAL_UART_IRQHandler+0x17a>
 800425a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d04f      	beq.n	8004302 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fa96 	bl	8004794 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004272:	2b40      	cmp	r3, #64	; 0x40
 8004274:	d141      	bne.n	80042fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3314      	adds	r3, #20
 800427c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800428c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3314      	adds	r3, #20
 800429e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80042ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1d9      	bne.n	8004276 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d013      	beq.n	80042f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	4a7d      	ldr	r2, [pc, #500]	; (80044c4 <HAL_UART_IRQHandler+0x3dc>)
 80042d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe ffa7 	bl	800322a <HAL_DMA_Abort_IT>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d016      	beq.n	8004310 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042ec:	4610      	mov	r0, r2
 80042ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f0:	e00e      	b.n	8004310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f990 	bl	8004618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f8:	e00a      	b.n	8004310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f98c 	bl	8004618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004300:	e006      	b.n	8004310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f988 	bl	8004618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800430e:	e170      	b.n	80045f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004310:	bf00      	nop
    return;
 8004312:	e16e      	b.n	80045f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	2b01      	cmp	r3, #1
 800431a:	f040 814a 	bne.w	80045b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8143 	beq.w	80045b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800432c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 813c 	beq.w	80045b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	f040 80b4 	bne.w	80044c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800436c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 8140 	beq.w	80045f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800437a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800437e:	429a      	cmp	r2, r3
 8004380:	f080 8139 	bcs.w	80045f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800438a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004396:	f000 8088 	beq.w	80044aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	330c      	adds	r3, #12
 80043a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	330c      	adds	r3, #12
 80043c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1d9      	bne.n	800439a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3314      	adds	r3, #20
 80043ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800440a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800440e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004412:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800441c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e1      	bne.n	80043e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3314      	adds	r3, #20
 8004428:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3314      	adds	r3, #20
 8004442:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004446:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004448:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800444c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e3      	bne.n	8004422 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	330c      	adds	r3, #12
 800446e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447a:	f023 0310 	bic.w	r3, r3, #16
 800447e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800448c:	65ba      	str	r2, [r7, #88]	; 0x58
 800448e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004492:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800449a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e3      	bne.n	8004468 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe fe50 	bl	800314a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8b6 	bl	800462c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044c0:	e099      	b.n	80045f6 <HAL_UART_IRQHandler+0x50e>
 80044c2:	bf00      	nop
 80044c4:	0800485b 	.word	0x0800485b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 808b 	beq.w	80045fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80044e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8086 	beq.w	80045fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004500:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004504:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004512:	647a      	str	r2, [r7, #68]	; 0x44
 8004514:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e3      	bne.n	80044ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3314      	adds	r3, #20
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	623b      	str	r3, [r7, #32]
   return(result);
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800454a:	633a      	str	r2, [r7, #48]	; 0x30
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e3      	bne.n	8004526 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	330c      	adds	r3, #12
 8004572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	60fb      	str	r3, [r7, #12]
   return(result);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0310 	bic.w	r3, r3, #16
 8004582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004590:	61fa      	str	r2, [r7, #28]
 8004592:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	69b9      	ldr	r1, [r7, #24]
 8004596:	69fa      	ldr	r2, [r7, #28]
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	617b      	str	r3, [r7, #20]
   return(result);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e3      	bne.n	800456c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f83e 	bl	800462c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045b0:	e023      	b.n	80045fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_UART_IRQHandler+0x4ea>
 80045be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f959 	bl	8004882 <UART_Transmit_IT>
    return;
 80045d0:	e014      	b.n	80045fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00e      	beq.n	80045fc <HAL_UART_IRQHandler+0x514>
 80045de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f999 	bl	8004922 <UART_EndTransmit_IT>
    return;
 80045f0:	e004      	b.n	80045fc <HAL_UART_IRQHandler+0x514>
    return;
 80045f2:	bf00      	nop
 80045f4:	e002      	b.n	80045fc <HAL_UART_IRQHandler+0x514>
      return;
 80045f6:	bf00      	nop
 80045f8:	e000      	b.n	80045fc <HAL_UART_IRQHandler+0x514>
      return;
 80045fa:	bf00      	nop
  }
}
 80045fc:	37e8      	adds	r7, #232	; 0xe8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop

08004604 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b090      	sub	sp, #64	; 0x40
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004654:	e050      	b.n	80046f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d04c      	beq.n	80046f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800465e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <UART_WaitOnFlagUntilTimeout+0x30>
 8004664:	f7fe f872 	bl	800274c <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004670:	429a      	cmp	r2, r3
 8004672:	d241      	bcs.n	80046f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	330c      	adds	r3, #12
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467e:	e853 3f00 	ldrex	r3, [r3]
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800468a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	330c      	adds	r3, #12
 8004692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004694:	637a      	str	r2, [r7, #52]	; 0x34
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800469a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800469c:	e841 2300 	strex	r3, r2, [r1]
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1e5      	bne.n	8004674 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3314      	adds	r3, #20
 80046ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	613b      	str	r3, [r7, #16]
   return(result);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	63bb      	str	r3, [r7, #56]	; 0x38
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3314      	adds	r3, #20
 80046c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046c8:	623a      	str	r2, [r7, #32]
 80046ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	69f9      	ldr	r1, [r7, #28]
 80046ce:	6a3a      	ldr	r2, [r7, #32]
 80046d0:	e841 2300 	strex	r3, r2, [r1]
 80046d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e5      	bne.n	80046a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e00f      	b.n	8004718 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4013      	ands	r3, r2
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	429a      	cmp	r2, r3
 8004714:	d09f      	beq.n	8004656 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3740      	adds	r7, #64	; 0x40
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	88fa      	ldrh	r2, [r7, #6]
 800473e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2222      	movs	r2, #34	; 0x22
 800474a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004764:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0201 	orr.w	r2, r2, #1
 8004774:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0220 	orr.w	r2, r2, #32
 8004784:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004794:	b480      	push	{r7}
 8004796:	b095      	sub	sp, #84	; 0x54
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	330c      	adds	r3, #12
 80047ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047bc:	643a      	str	r2, [r7, #64]	; 0x40
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e5      	bne.n	800479c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3314      	adds	r3, #20
 80047d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	61fb      	str	r3, [r7, #28]
   return(result);
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f023 0301 	bic.w	r3, r3, #1
 80047e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3314      	adds	r3, #20
 80047ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f8:	e841 2300 	strex	r3, r2, [r1]
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e5      	bne.n	80047d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004808:	2b01      	cmp	r3, #1
 800480a:	d119      	bne.n	8004840 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	60bb      	str	r3, [r7, #8]
   return(result);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f023 0310 	bic.w	r3, r3, #16
 8004822:	647b      	str	r3, [r7, #68]	; 0x44
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	330c      	adds	r3, #12
 800482a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800482c:	61ba      	str	r2, [r7, #24]
 800482e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6979      	ldr	r1, [r7, #20]
 8004832:	69ba      	ldr	r2, [r7, #24]
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	613b      	str	r3, [r7, #16]
   return(result);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800484e:	bf00      	nop
 8004850:	3754      	adds	r7, #84	; 0x54
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b084      	sub	sp, #16
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff fecf 	bl	8004618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004882:	b480      	push	{r7}
 8004884:	b085      	sub	sp, #20
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b21      	cmp	r3, #33	; 0x21
 8004894:	d13e      	bne.n	8004914 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489e:	d114      	bne.n	80048ca <UART_Transmit_IT+0x48>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d110      	bne.n	80048ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	1c9a      	adds	r2, r3, #2
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	621a      	str	r2, [r3, #32]
 80048c8:	e008      	b.n	80048dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	1c59      	adds	r1, r3, #1
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6211      	str	r1, [r2, #32]
 80048d4:	781a      	ldrb	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	4619      	mov	r1, r3
 80048ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10f      	bne.n	8004910 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68da      	ldr	r2, [r3, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800490e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	e000      	b.n	8004916 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004914:	2302      	movs	r3, #2
  }
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b082      	sub	sp, #8
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004938:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7ff fe5e 	bl	8004604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b08c      	sub	sp, #48	; 0x30
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b22      	cmp	r3, #34	; 0x22
 8004964:	f040 80ab 	bne.w	8004abe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004970:	d117      	bne.n	80049a2 <UART_Receive_IT+0x50>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d113      	bne.n	80049a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800497a:	2300      	movs	r3, #0
 800497c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	b29b      	uxth	r3, r3
 800498c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004990:	b29a      	uxth	r2, r3
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	1c9a      	adds	r2, r3, #2
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	629a      	str	r2, [r3, #40]	; 0x28
 80049a0:	e026      	b.n	80049f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b4:	d007      	beq.n	80049c6 <UART_Receive_IT+0x74>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <UART_Receive_IT+0x82>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e008      	b.n	80049e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	4619      	mov	r1, r3
 80049fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d15a      	bne.n	8004aba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68da      	ldr	r2, [r3, #12]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0220 	bic.w	r2, r2, #32
 8004a12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695a      	ldr	r2, [r3, #20]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d135      	bne.n	8004ab0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	e853 3f00 	ldrex	r3, [r3]
 8004a58:	613b      	str	r3, [r7, #16]
   return(result);
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f023 0310 	bic.w	r3, r3, #16
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	330c      	adds	r3, #12
 8004a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6a:	623a      	str	r2, [r7, #32]
 8004a6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	69f9      	ldr	r1, [r7, #28]
 8004a70:	6a3a      	ldr	r2, [r7, #32]
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e5      	bne.n	8004a4a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d10a      	bne.n	8004aa2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fdbf 	bl	800462c <HAL_UARTEx_RxEventCallback>
 8004aae:	e002      	b.n	8004ab6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7fc faef 	bl	8001094 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e002      	b.n	8004ac0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	e000      	b.n	8004ac0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
  }
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3730      	adds	r7, #48	; 0x30
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004acc:	b09f      	sub	sp, #124	; 0x7c
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ade:	68d9      	ldr	r1, [r3, #12]
 8004ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	ea40 0301 	orr.w	r3, r0, r1
 8004ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b0c:	f021 010c 	bic.w	r1, r1, #12
 8004b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b16:	430b      	orrs	r3, r1
 8004b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b26:	6999      	ldr	r1, [r3, #24]
 8004b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	ea40 0301 	orr.w	r3, r0, r1
 8004b30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4bc5      	ldr	r3, [pc, #788]	; (8004e4c <UART_SetConfig+0x384>)
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d004      	beq.n	8004b46 <UART_SetConfig+0x7e>
 8004b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4bc3      	ldr	r3, [pc, #780]	; (8004e50 <UART_SetConfig+0x388>)
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d103      	bne.n	8004b4e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b46:	f7ff f9ab 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 8004b4a:	6778      	str	r0, [r7, #116]	; 0x74
 8004b4c:	e002      	b.n	8004b54 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b4e:	f7ff f993 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8004b52:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b5c:	f040 80b6 	bne.w	8004ccc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b62:	461c      	mov	r4, r3
 8004b64:	f04f 0500 	mov.w	r5, #0
 8004b68:	4622      	mov	r2, r4
 8004b6a:	462b      	mov	r3, r5
 8004b6c:	1891      	adds	r1, r2, r2
 8004b6e:	6439      	str	r1, [r7, #64]	; 0x40
 8004b70:	415b      	adcs	r3, r3
 8004b72:	647b      	str	r3, [r7, #68]	; 0x44
 8004b74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b78:	1912      	adds	r2, r2, r4
 8004b7a:	eb45 0303 	adc.w	r3, r5, r3
 8004b7e:	f04f 0000 	mov.w	r0, #0
 8004b82:	f04f 0100 	mov.w	r1, #0
 8004b86:	00d9      	lsls	r1, r3, #3
 8004b88:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b8c:	00d0      	lsls	r0, r2, #3
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	1911      	adds	r1, r2, r4
 8004b94:	6639      	str	r1, [r7, #96]	; 0x60
 8004b96:	416b      	adcs	r3, r5
 8004b98:	667b      	str	r3, [r7, #100]	; 0x64
 8004b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	1891      	adds	r1, r2, r2
 8004ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ba8:	415b      	adcs	r3, r3
 8004baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bb0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004bb4:	f7fc f880 	bl	8000cb8 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4ba5      	ldr	r3, [pc, #660]	; (8004e54 <UART_SetConfig+0x38c>)
 8004bbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	011e      	lsls	r6, r3, #4
 8004bc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc8:	461c      	mov	r4, r3
 8004bca:	f04f 0500 	mov.w	r5, #0
 8004bce:	4622      	mov	r2, r4
 8004bd0:	462b      	mov	r3, r5
 8004bd2:	1891      	adds	r1, r2, r2
 8004bd4:	6339      	str	r1, [r7, #48]	; 0x30
 8004bd6:	415b      	adcs	r3, r3
 8004bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004bda:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bde:	1912      	adds	r2, r2, r4
 8004be0:	eb45 0303 	adc.w	r3, r5, r3
 8004be4:	f04f 0000 	mov.w	r0, #0
 8004be8:	f04f 0100 	mov.w	r1, #0
 8004bec:	00d9      	lsls	r1, r3, #3
 8004bee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bf2:	00d0      	lsls	r0, r2, #3
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	1911      	adds	r1, r2, r4
 8004bfa:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bfc:	416b      	adcs	r3, r5
 8004bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	461a      	mov	r2, r3
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	1891      	adds	r1, r2, r2
 8004c0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8004c0e:	415b      	adcs	r3, r3
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c16:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004c1a:	f7fc f84d 	bl	8000cb8 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4b8c      	ldr	r3, [pc, #560]	; (8004e54 <UART_SetConfig+0x38c>)
 8004c24:	fba3 1302 	umull	r1, r3, r3, r2
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	2164      	movs	r1, #100	; 0x64
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	3332      	adds	r3, #50	; 0x32
 8004c36:	4a87      	ldr	r2, [pc, #540]	; (8004e54 <UART_SetConfig+0x38c>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c44:	441e      	add	r6, r3
 8004c46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f04f 0100 	mov.w	r1, #0
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	1894      	adds	r4, r2, r2
 8004c54:	623c      	str	r4, [r7, #32]
 8004c56:	415b      	adcs	r3, r3
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c5e:	1812      	adds	r2, r2, r0
 8004c60:	eb41 0303 	adc.w	r3, r1, r3
 8004c64:	f04f 0400 	mov.w	r4, #0
 8004c68:	f04f 0500 	mov.w	r5, #0
 8004c6c:	00dd      	lsls	r5, r3, #3
 8004c6e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c72:	00d4      	lsls	r4, r2, #3
 8004c74:	4622      	mov	r2, r4
 8004c76:	462b      	mov	r3, r5
 8004c78:	1814      	adds	r4, r2, r0
 8004c7a:	653c      	str	r4, [r7, #80]	; 0x50
 8004c7c:	414b      	adcs	r3, r1
 8004c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	461a      	mov	r2, r3
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	1891      	adds	r1, r2, r2
 8004c8c:	61b9      	str	r1, [r7, #24]
 8004c8e:	415b      	adcs	r3, r3
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004c9a:	f7fc f80d 	bl	8000cb8 <__aeabi_uldivmod>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4b6c      	ldr	r3, [pc, #432]	; (8004e54 <UART_SetConfig+0x38c>)
 8004ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	2164      	movs	r1, #100	; 0x64
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	00db      	lsls	r3, r3, #3
 8004cb4:	3332      	adds	r3, #50	; 0x32
 8004cb6:	4a67      	ldr	r2, [pc, #412]	; (8004e54 <UART_SetConfig+0x38c>)
 8004cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbc:	095b      	lsrs	r3, r3, #5
 8004cbe:	f003 0207 	and.w	r2, r3, #7
 8004cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4432      	add	r2, r6
 8004cc8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cca:	e0b9      	b.n	8004e40 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cce:	461c      	mov	r4, r3
 8004cd0:	f04f 0500 	mov.w	r5, #0
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	462b      	mov	r3, r5
 8004cd8:	1891      	adds	r1, r2, r2
 8004cda:	6139      	str	r1, [r7, #16]
 8004cdc:	415b      	adcs	r3, r3
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ce4:	1912      	adds	r2, r2, r4
 8004ce6:	eb45 0303 	adc.w	r3, r5, r3
 8004cea:	f04f 0000 	mov.w	r0, #0
 8004cee:	f04f 0100 	mov.w	r1, #0
 8004cf2:	00d9      	lsls	r1, r3, #3
 8004cf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cf8:	00d0      	lsls	r0, r2, #3
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	eb12 0804 	adds.w	r8, r2, r4
 8004d02:	eb43 0905 	adc.w	r9, r3, r5
 8004d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f04f 0100 	mov.w	r1, #0
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	008b      	lsls	r3, r1, #2
 8004d1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d1e:	0082      	lsls	r2, r0, #2
 8004d20:	4640      	mov	r0, r8
 8004d22:	4649      	mov	r1, r9
 8004d24:	f7fb ffc8 	bl	8000cb8 <__aeabi_uldivmod>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4b49      	ldr	r3, [pc, #292]	; (8004e54 <UART_SetConfig+0x38c>)
 8004d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	011e      	lsls	r6, r3, #4
 8004d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f04f 0100 	mov.w	r1, #0
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	1894      	adds	r4, r2, r2
 8004d44:	60bc      	str	r4, [r7, #8]
 8004d46:	415b      	adcs	r3, r3
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d4e:	1812      	adds	r2, r2, r0
 8004d50:	eb41 0303 	adc.w	r3, r1, r3
 8004d54:	f04f 0400 	mov.w	r4, #0
 8004d58:	f04f 0500 	mov.w	r5, #0
 8004d5c:	00dd      	lsls	r5, r3, #3
 8004d5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d62:	00d4      	lsls	r4, r2, #3
 8004d64:	4622      	mov	r2, r4
 8004d66:	462b      	mov	r3, r5
 8004d68:	1814      	adds	r4, r2, r0
 8004d6a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004d6c:	414b      	adcs	r3, r1
 8004d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f04f 0100 	mov.w	r1, #0
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	008b      	lsls	r3, r1, #2
 8004d84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d88:	0082      	lsls	r2, r0, #2
 8004d8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004d8e:	f7fb ff93 	bl	8000cb8 <__aeabi_uldivmod>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4b2f      	ldr	r3, [pc, #188]	; (8004e54 <UART_SetConfig+0x38c>)
 8004d98:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9c:	095b      	lsrs	r3, r3, #5
 8004d9e:	2164      	movs	r1, #100	; 0x64
 8004da0:	fb01 f303 	mul.w	r3, r1, r3
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	3332      	adds	r3, #50	; 0x32
 8004daa:	4a2a      	ldr	r2, [pc, #168]	; (8004e54 <UART_SetConfig+0x38c>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db6:	441e      	add	r6, r3
 8004db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f04f 0100 	mov.w	r1, #0
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	1894      	adds	r4, r2, r2
 8004dc6:	603c      	str	r4, [r7, #0]
 8004dc8:	415b      	adcs	r3, r3
 8004dca:	607b      	str	r3, [r7, #4]
 8004dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd0:	1812      	adds	r2, r2, r0
 8004dd2:	eb41 0303 	adc.w	r3, r1, r3
 8004dd6:	f04f 0400 	mov.w	r4, #0
 8004dda:	f04f 0500 	mov.w	r5, #0
 8004dde:	00dd      	lsls	r5, r3, #3
 8004de0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004de4:	00d4      	lsls	r4, r2, #3
 8004de6:	4622      	mov	r2, r4
 8004de8:	462b      	mov	r3, r5
 8004dea:	eb12 0a00 	adds.w	sl, r2, r0
 8004dee:	eb43 0b01 	adc.w	fp, r3, r1
 8004df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f04f 0100 	mov.w	r1, #0
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	008b      	lsls	r3, r1, #2
 8004e06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e0a:	0082      	lsls	r2, r0, #2
 8004e0c:	4650      	mov	r0, sl
 8004e0e:	4659      	mov	r1, fp
 8004e10:	f7fb ff52 	bl	8000cb8 <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <UART_SetConfig+0x38c>)
 8004e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	2164      	movs	r1, #100	; 0x64
 8004e22:	fb01 f303 	mul.w	r3, r1, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	011b      	lsls	r3, r3, #4
 8004e2a:	3332      	adds	r3, #50	; 0x32
 8004e2c:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <UART_SetConfig+0x38c>)
 8004e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	f003 020f 	and.w	r2, r3, #15
 8004e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4432      	add	r2, r6
 8004e3e:	609a      	str	r2, [r3, #8]
}
 8004e40:	bf00      	nop
 8004e42:	377c      	adds	r7, #124	; 0x7c
 8004e44:	46bd      	mov	sp, r7
 8004e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40011000 	.word	0x40011000
 8004e50:	40011400 	.word	0x40011400
 8004e54:	51eb851f 	.word	0x51eb851f

08004e58 <nan>:
 8004e58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004e60 <nan+0x8>
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	00000000 	.word	0x00000000
 8004e64:	7ff80000 	.word	0x7ff80000

08004e68 <__errno>:
 8004e68:	4b01      	ldr	r3, [pc, #4]	; (8004e70 <__errno+0x8>)
 8004e6a:	6818      	ldr	r0, [r3, #0]
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000030 	.word	0x20000030

08004e74 <__libc_init_array>:
 8004e74:	b570      	push	{r4, r5, r6, lr}
 8004e76:	4d0d      	ldr	r5, [pc, #52]	; (8004eac <__libc_init_array+0x38>)
 8004e78:	4c0d      	ldr	r4, [pc, #52]	; (8004eb0 <__libc_init_array+0x3c>)
 8004e7a:	1b64      	subs	r4, r4, r5
 8004e7c:	10a4      	asrs	r4, r4, #2
 8004e7e:	2600      	movs	r6, #0
 8004e80:	42a6      	cmp	r6, r4
 8004e82:	d109      	bne.n	8004e98 <__libc_init_array+0x24>
 8004e84:	4d0b      	ldr	r5, [pc, #44]	; (8004eb4 <__libc_init_array+0x40>)
 8004e86:	4c0c      	ldr	r4, [pc, #48]	; (8004eb8 <__libc_init_array+0x44>)
 8004e88:	f005 f884 	bl	8009f94 <_init>
 8004e8c:	1b64      	subs	r4, r4, r5
 8004e8e:	10a4      	asrs	r4, r4, #2
 8004e90:	2600      	movs	r6, #0
 8004e92:	42a6      	cmp	r6, r4
 8004e94:	d105      	bne.n	8004ea2 <__libc_init_array+0x2e>
 8004e96:	bd70      	pop	{r4, r5, r6, pc}
 8004e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e9c:	4798      	blx	r3
 8004e9e:	3601      	adds	r6, #1
 8004ea0:	e7ee      	b.n	8004e80 <__libc_init_array+0xc>
 8004ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ea6:	4798      	blx	r3
 8004ea8:	3601      	adds	r6, #1
 8004eaa:	e7f2      	b.n	8004e92 <__libc_init_array+0x1e>
 8004eac:	0800a76c 	.word	0x0800a76c
 8004eb0:	0800a76c 	.word	0x0800a76c
 8004eb4:	0800a76c 	.word	0x0800a76c
 8004eb8:	0800a770 	.word	0x0800a770

08004ebc <memset>:
 8004ebc:	4402      	add	r2, r0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d100      	bne.n	8004ec6 <memset+0xa>
 8004ec4:	4770      	bx	lr
 8004ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eca:	e7f9      	b.n	8004ec0 <memset+0x4>

08004ecc <__cvt>:
 8004ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed0:	ec55 4b10 	vmov	r4, r5, d0
 8004ed4:	2d00      	cmp	r5, #0
 8004ed6:	460e      	mov	r6, r1
 8004ed8:	4619      	mov	r1, r3
 8004eda:	462b      	mov	r3, r5
 8004edc:	bfbb      	ittet	lt
 8004ede:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ee2:	461d      	movlt	r5, r3
 8004ee4:	2300      	movge	r3, #0
 8004ee6:	232d      	movlt	r3, #45	; 0x2d
 8004ee8:	700b      	strb	r3, [r1, #0]
 8004eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004eec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ef0:	4691      	mov	r9, r2
 8004ef2:	f023 0820 	bic.w	r8, r3, #32
 8004ef6:	bfbc      	itt	lt
 8004ef8:	4622      	movlt	r2, r4
 8004efa:	4614      	movlt	r4, r2
 8004efc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f00:	d005      	beq.n	8004f0e <__cvt+0x42>
 8004f02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004f06:	d100      	bne.n	8004f0a <__cvt+0x3e>
 8004f08:	3601      	adds	r6, #1
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	e000      	b.n	8004f10 <__cvt+0x44>
 8004f0e:	2103      	movs	r1, #3
 8004f10:	ab03      	add	r3, sp, #12
 8004f12:	9301      	str	r3, [sp, #4]
 8004f14:	ab02      	add	r3, sp, #8
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	ec45 4b10 	vmov	d0, r4, r5
 8004f1c:	4653      	mov	r3, sl
 8004f1e:	4632      	mov	r2, r6
 8004f20:	f001 fe52 	bl	8006bc8 <_dtoa_r>
 8004f24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f28:	4607      	mov	r7, r0
 8004f2a:	d102      	bne.n	8004f32 <__cvt+0x66>
 8004f2c:	f019 0f01 	tst.w	r9, #1
 8004f30:	d022      	beq.n	8004f78 <__cvt+0xac>
 8004f32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f36:	eb07 0906 	add.w	r9, r7, r6
 8004f3a:	d110      	bne.n	8004f5e <__cvt+0x92>
 8004f3c:	783b      	ldrb	r3, [r7, #0]
 8004f3e:	2b30      	cmp	r3, #48	; 0x30
 8004f40:	d10a      	bne.n	8004f58 <__cvt+0x8c>
 8004f42:	2200      	movs	r2, #0
 8004f44:	2300      	movs	r3, #0
 8004f46:	4620      	mov	r0, r4
 8004f48:	4629      	mov	r1, r5
 8004f4a:	f7fb fdd5 	bl	8000af8 <__aeabi_dcmpeq>
 8004f4e:	b918      	cbnz	r0, 8004f58 <__cvt+0x8c>
 8004f50:	f1c6 0601 	rsb	r6, r6, #1
 8004f54:	f8ca 6000 	str.w	r6, [sl]
 8004f58:	f8da 3000 	ldr.w	r3, [sl]
 8004f5c:	4499      	add	r9, r3
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2300      	movs	r3, #0
 8004f62:	4620      	mov	r0, r4
 8004f64:	4629      	mov	r1, r5
 8004f66:	f7fb fdc7 	bl	8000af8 <__aeabi_dcmpeq>
 8004f6a:	b108      	cbz	r0, 8004f70 <__cvt+0xa4>
 8004f6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f70:	2230      	movs	r2, #48	; 0x30
 8004f72:	9b03      	ldr	r3, [sp, #12]
 8004f74:	454b      	cmp	r3, r9
 8004f76:	d307      	bcc.n	8004f88 <__cvt+0xbc>
 8004f78:	9b03      	ldr	r3, [sp, #12]
 8004f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f7c:	1bdb      	subs	r3, r3, r7
 8004f7e:	4638      	mov	r0, r7
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	b004      	add	sp, #16
 8004f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f88:	1c59      	adds	r1, r3, #1
 8004f8a:	9103      	str	r1, [sp, #12]
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e7f0      	b.n	8004f72 <__cvt+0xa6>

08004f90 <__exponent>:
 8004f90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f92:	4603      	mov	r3, r0
 8004f94:	2900      	cmp	r1, #0
 8004f96:	bfb8      	it	lt
 8004f98:	4249      	neglt	r1, r1
 8004f9a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f9e:	bfb4      	ite	lt
 8004fa0:	222d      	movlt	r2, #45	; 0x2d
 8004fa2:	222b      	movge	r2, #43	; 0x2b
 8004fa4:	2909      	cmp	r1, #9
 8004fa6:	7042      	strb	r2, [r0, #1]
 8004fa8:	dd2a      	ble.n	8005000 <__exponent+0x70>
 8004faa:	f10d 0407 	add.w	r4, sp, #7
 8004fae:	46a4      	mov	ip, r4
 8004fb0:	270a      	movs	r7, #10
 8004fb2:	46a6      	mov	lr, r4
 8004fb4:	460a      	mov	r2, r1
 8004fb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004fba:	fb07 1516 	mls	r5, r7, r6, r1
 8004fbe:	3530      	adds	r5, #48	; 0x30
 8004fc0:	2a63      	cmp	r2, #99	; 0x63
 8004fc2:	f104 34ff 	add.w	r4, r4, #4294967295
 8004fc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004fca:	4631      	mov	r1, r6
 8004fcc:	dcf1      	bgt.n	8004fb2 <__exponent+0x22>
 8004fce:	3130      	adds	r1, #48	; 0x30
 8004fd0:	f1ae 0502 	sub.w	r5, lr, #2
 8004fd4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004fd8:	1c44      	adds	r4, r0, #1
 8004fda:	4629      	mov	r1, r5
 8004fdc:	4561      	cmp	r1, ip
 8004fde:	d30a      	bcc.n	8004ff6 <__exponent+0x66>
 8004fe0:	f10d 0209 	add.w	r2, sp, #9
 8004fe4:	eba2 020e 	sub.w	r2, r2, lr
 8004fe8:	4565      	cmp	r5, ip
 8004fea:	bf88      	it	hi
 8004fec:	2200      	movhi	r2, #0
 8004fee:	4413      	add	r3, r2
 8004ff0:	1a18      	subs	r0, r3, r0
 8004ff2:	b003      	add	sp, #12
 8004ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ffa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ffe:	e7ed      	b.n	8004fdc <__exponent+0x4c>
 8005000:	2330      	movs	r3, #48	; 0x30
 8005002:	3130      	adds	r1, #48	; 0x30
 8005004:	7083      	strb	r3, [r0, #2]
 8005006:	70c1      	strb	r1, [r0, #3]
 8005008:	1d03      	adds	r3, r0, #4
 800500a:	e7f1      	b.n	8004ff0 <__exponent+0x60>

0800500c <_printf_float>:
 800500c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005010:	ed2d 8b02 	vpush	{d8}
 8005014:	b08d      	sub	sp, #52	; 0x34
 8005016:	460c      	mov	r4, r1
 8005018:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800501c:	4616      	mov	r6, r2
 800501e:	461f      	mov	r7, r3
 8005020:	4605      	mov	r5, r0
 8005022:	f002 ff2d 	bl	8007e80 <_localeconv_r>
 8005026:	f8d0 a000 	ldr.w	sl, [r0]
 800502a:	4650      	mov	r0, sl
 800502c:	f7fb f8e2 	bl	80001f4 <strlen>
 8005030:	2300      	movs	r3, #0
 8005032:	930a      	str	r3, [sp, #40]	; 0x28
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	9305      	str	r3, [sp, #20]
 8005038:	f8d8 3000 	ldr.w	r3, [r8]
 800503c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005040:	3307      	adds	r3, #7
 8005042:	f023 0307 	bic.w	r3, r3, #7
 8005046:	f103 0208 	add.w	r2, r3, #8
 800504a:	f8c8 2000 	str.w	r2, [r8]
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005056:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800505a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800505e:	9307      	str	r3, [sp, #28]
 8005060:	f8cd 8018 	str.w	r8, [sp, #24]
 8005064:	ee08 0a10 	vmov	s16, r0
 8005068:	4b9f      	ldr	r3, [pc, #636]	; (80052e8 <_printf_float+0x2dc>)
 800506a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800506e:	f04f 32ff 	mov.w	r2, #4294967295
 8005072:	f7fb fd73 	bl	8000b5c <__aeabi_dcmpun>
 8005076:	bb88      	cbnz	r0, 80050dc <_printf_float+0xd0>
 8005078:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800507c:	4b9a      	ldr	r3, [pc, #616]	; (80052e8 <_printf_float+0x2dc>)
 800507e:	f04f 32ff 	mov.w	r2, #4294967295
 8005082:	f7fb fd4d 	bl	8000b20 <__aeabi_dcmple>
 8005086:	bb48      	cbnz	r0, 80050dc <_printf_float+0xd0>
 8005088:	2200      	movs	r2, #0
 800508a:	2300      	movs	r3, #0
 800508c:	4640      	mov	r0, r8
 800508e:	4649      	mov	r1, r9
 8005090:	f7fb fd3c 	bl	8000b0c <__aeabi_dcmplt>
 8005094:	b110      	cbz	r0, 800509c <_printf_float+0x90>
 8005096:	232d      	movs	r3, #45	; 0x2d
 8005098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800509c:	4b93      	ldr	r3, [pc, #588]	; (80052ec <_printf_float+0x2e0>)
 800509e:	4894      	ldr	r0, [pc, #592]	; (80052f0 <_printf_float+0x2e4>)
 80050a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80050a4:	bf94      	ite	ls
 80050a6:	4698      	movls	r8, r3
 80050a8:	4680      	movhi	r8, r0
 80050aa:	2303      	movs	r3, #3
 80050ac:	6123      	str	r3, [r4, #16]
 80050ae:	9b05      	ldr	r3, [sp, #20]
 80050b0:	f023 0204 	bic.w	r2, r3, #4
 80050b4:	6022      	str	r2, [r4, #0]
 80050b6:	f04f 0900 	mov.w	r9, #0
 80050ba:	9700      	str	r7, [sp, #0]
 80050bc:	4633      	mov	r3, r6
 80050be:	aa0b      	add	r2, sp, #44	; 0x2c
 80050c0:	4621      	mov	r1, r4
 80050c2:	4628      	mov	r0, r5
 80050c4:	f000 f9d8 	bl	8005478 <_printf_common>
 80050c8:	3001      	adds	r0, #1
 80050ca:	f040 8090 	bne.w	80051ee <_printf_float+0x1e2>
 80050ce:	f04f 30ff 	mov.w	r0, #4294967295
 80050d2:	b00d      	add	sp, #52	; 0x34
 80050d4:	ecbd 8b02 	vpop	{d8}
 80050d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050dc:	4642      	mov	r2, r8
 80050de:	464b      	mov	r3, r9
 80050e0:	4640      	mov	r0, r8
 80050e2:	4649      	mov	r1, r9
 80050e4:	f7fb fd3a 	bl	8000b5c <__aeabi_dcmpun>
 80050e8:	b140      	cbz	r0, 80050fc <_printf_float+0xf0>
 80050ea:	464b      	mov	r3, r9
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	bfbc      	itt	lt
 80050f0:	232d      	movlt	r3, #45	; 0x2d
 80050f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050f6:	487f      	ldr	r0, [pc, #508]	; (80052f4 <_printf_float+0x2e8>)
 80050f8:	4b7f      	ldr	r3, [pc, #508]	; (80052f8 <_printf_float+0x2ec>)
 80050fa:	e7d1      	b.n	80050a0 <_printf_float+0x94>
 80050fc:	6863      	ldr	r3, [r4, #4]
 80050fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005102:	9206      	str	r2, [sp, #24]
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	d13f      	bne.n	8005188 <_printf_float+0x17c>
 8005108:	2306      	movs	r3, #6
 800510a:	6063      	str	r3, [r4, #4]
 800510c:	9b05      	ldr	r3, [sp, #20]
 800510e:	6861      	ldr	r1, [r4, #4]
 8005110:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005114:	2300      	movs	r3, #0
 8005116:	9303      	str	r3, [sp, #12]
 8005118:	ab0a      	add	r3, sp, #40	; 0x28
 800511a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800511e:	ab09      	add	r3, sp, #36	; 0x24
 8005120:	ec49 8b10 	vmov	d0, r8, r9
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	6022      	str	r2, [r4, #0]
 8005128:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800512c:	4628      	mov	r0, r5
 800512e:	f7ff fecd 	bl	8004ecc <__cvt>
 8005132:	9b06      	ldr	r3, [sp, #24]
 8005134:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005136:	2b47      	cmp	r3, #71	; 0x47
 8005138:	4680      	mov	r8, r0
 800513a:	d108      	bne.n	800514e <_printf_float+0x142>
 800513c:	1cc8      	adds	r0, r1, #3
 800513e:	db02      	blt.n	8005146 <_printf_float+0x13a>
 8005140:	6863      	ldr	r3, [r4, #4]
 8005142:	4299      	cmp	r1, r3
 8005144:	dd41      	ble.n	80051ca <_printf_float+0x1be>
 8005146:	f1ab 0b02 	sub.w	fp, fp, #2
 800514a:	fa5f fb8b 	uxtb.w	fp, fp
 800514e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005152:	d820      	bhi.n	8005196 <_printf_float+0x18a>
 8005154:	3901      	subs	r1, #1
 8005156:	465a      	mov	r2, fp
 8005158:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800515c:	9109      	str	r1, [sp, #36]	; 0x24
 800515e:	f7ff ff17 	bl	8004f90 <__exponent>
 8005162:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005164:	1813      	adds	r3, r2, r0
 8005166:	2a01      	cmp	r2, #1
 8005168:	4681      	mov	r9, r0
 800516a:	6123      	str	r3, [r4, #16]
 800516c:	dc02      	bgt.n	8005174 <_printf_float+0x168>
 800516e:	6822      	ldr	r2, [r4, #0]
 8005170:	07d2      	lsls	r2, r2, #31
 8005172:	d501      	bpl.n	8005178 <_printf_float+0x16c>
 8005174:	3301      	adds	r3, #1
 8005176:	6123      	str	r3, [r4, #16]
 8005178:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800517c:	2b00      	cmp	r3, #0
 800517e:	d09c      	beq.n	80050ba <_printf_float+0xae>
 8005180:	232d      	movs	r3, #45	; 0x2d
 8005182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005186:	e798      	b.n	80050ba <_printf_float+0xae>
 8005188:	9a06      	ldr	r2, [sp, #24]
 800518a:	2a47      	cmp	r2, #71	; 0x47
 800518c:	d1be      	bne.n	800510c <_printf_float+0x100>
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1bc      	bne.n	800510c <_printf_float+0x100>
 8005192:	2301      	movs	r3, #1
 8005194:	e7b9      	b.n	800510a <_printf_float+0xfe>
 8005196:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800519a:	d118      	bne.n	80051ce <_printf_float+0x1c2>
 800519c:	2900      	cmp	r1, #0
 800519e:	6863      	ldr	r3, [r4, #4]
 80051a0:	dd0b      	ble.n	80051ba <_printf_float+0x1ae>
 80051a2:	6121      	str	r1, [r4, #16]
 80051a4:	b913      	cbnz	r3, 80051ac <_printf_float+0x1a0>
 80051a6:	6822      	ldr	r2, [r4, #0]
 80051a8:	07d0      	lsls	r0, r2, #31
 80051aa:	d502      	bpl.n	80051b2 <_printf_float+0x1a6>
 80051ac:	3301      	adds	r3, #1
 80051ae:	440b      	add	r3, r1
 80051b0:	6123      	str	r3, [r4, #16]
 80051b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80051b4:	f04f 0900 	mov.w	r9, #0
 80051b8:	e7de      	b.n	8005178 <_printf_float+0x16c>
 80051ba:	b913      	cbnz	r3, 80051c2 <_printf_float+0x1b6>
 80051bc:	6822      	ldr	r2, [r4, #0]
 80051be:	07d2      	lsls	r2, r2, #31
 80051c0:	d501      	bpl.n	80051c6 <_printf_float+0x1ba>
 80051c2:	3302      	adds	r3, #2
 80051c4:	e7f4      	b.n	80051b0 <_printf_float+0x1a4>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e7f2      	b.n	80051b0 <_printf_float+0x1a4>
 80051ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80051ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d0:	4299      	cmp	r1, r3
 80051d2:	db05      	blt.n	80051e0 <_printf_float+0x1d4>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	6121      	str	r1, [r4, #16]
 80051d8:	07d8      	lsls	r0, r3, #31
 80051da:	d5ea      	bpl.n	80051b2 <_printf_float+0x1a6>
 80051dc:	1c4b      	adds	r3, r1, #1
 80051de:	e7e7      	b.n	80051b0 <_printf_float+0x1a4>
 80051e0:	2900      	cmp	r1, #0
 80051e2:	bfd4      	ite	le
 80051e4:	f1c1 0202 	rsble	r2, r1, #2
 80051e8:	2201      	movgt	r2, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	e7e0      	b.n	80051b0 <_printf_float+0x1a4>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	055a      	lsls	r2, r3, #21
 80051f2:	d407      	bmi.n	8005204 <_printf_float+0x1f8>
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	4642      	mov	r2, r8
 80051f8:	4631      	mov	r1, r6
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	d12c      	bne.n	800525c <_printf_float+0x250>
 8005202:	e764      	b.n	80050ce <_printf_float+0xc2>
 8005204:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005208:	f240 80e0 	bls.w	80053cc <_printf_float+0x3c0>
 800520c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005210:	2200      	movs	r2, #0
 8005212:	2300      	movs	r3, #0
 8005214:	f7fb fc70 	bl	8000af8 <__aeabi_dcmpeq>
 8005218:	2800      	cmp	r0, #0
 800521a:	d034      	beq.n	8005286 <_printf_float+0x27a>
 800521c:	4a37      	ldr	r2, [pc, #220]	; (80052fc <_printf_float+0x2f0>)
 800521e:	2301      	movs	r3, #1
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	f43f af51 	beq.w	80050ce <_printf_float+0xc2>
 800522c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005230:	429a      	cmp	r2, r3
 8005232:	db02      	blt.n	800523a <_printf_float+0x22e>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	07d8      	lsls	r0, r3, #31
 8005238:	d510      	bpl.n	800525c <_printf_float+0x250>
 800523a:	ee18 3a10 	vmov	r3, s16
 800523e:	4652      	mov	r2, sl
 8005240:	4631      	mov	r1, r6
 8005242:	4628      	mov	r0, r5
 8005244:	47b8      	blx	r7
 8005246:	3001      	adds	r0, #1
 8005248:	f43f af41 	beq.w	80050ce <_printf_float+0xc2>
 800524c:	f04f 0800 	mov.w	r8, #0
 8005250:	f104 091a 	add.w	r9, r4, #26
 8005254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005256:	3b01      	subs	r3, #1
 8005258:	4543      	cmp	r3, r8
 800525a:	dc09      	bgt.n	8005270 <_printf_float+0x264>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	079b      	lsls	r3, r3, #30
 8005260:	f100 8105 	bmi.w	800546e <_printf_float+0x462>
 8005264:	68e0      	ldr	r0, [r4, #12]
 8005266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005268:	4298      	cmp	r0, r3
 800526a:	bfb8      	it	lt
 800526c:	4618      	movlt	r0, r3
 800526e:	e730      	b.n	80050d2 <_printf_float+0xc6>
 8005270:	2301      	movs	r3, #1
 8005272:	464a      	mov	r2, r9
 8005274:	4631      	mov	r1, r6
 8005276:	4628      	mov	r0, r5
 8005278:	47b8      	blx	r7
 800527a:	3001      	adds	r0, #1
 800527c:	f43f af27 	beq.w	80050ce <_printf_float+0xc2>
 8005280:	f108 0801 	add.w	r8, r8, #1
 8005284:	e7e6      	b.n	8005254 <_printf_float+0x248>
 8005286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005288:	2b00      	cmp	r3, #0
 800528a:	dc39      	bgt.n	8005300 <_printf_float+0x2f4>
 800528c:	4a1b      	ldr	r2, [pc, #108]	; (80052fc <_printf_float+0x2f0>)
 800528e:	2301      	movs	r3, #1
 8005290:	4631      	mov	r1, r6
 8005292:	4628      	mov	r0, r5
 8005294:	47b8      	blx	r7
 8005296:	3001      	adds	r0, #1
 8005298:	f43f af19 	beq.w	80050ce <_printf_float+0xc2>
 800529c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052a0:	4313      	orrs	r3, r2
 80052a2:	d102      	bne.n	80052aa <_printf_float+0x29e>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	07d9      	lsls	r1, r3, #31
 80052a8:	d5d8      	bpl.n	800525c <_printf_float+0x250>
 80052aa:	ee18 3a10 	vmov	r3, s16
 80052ae:	4652      	mov	r2, sl
 80052b0:	4631      	mov	r1, r6
 80052b2:	4628      	mov	r0, r5
 80052b4:	47b8      	blx	r7
 80052b6:	3001      	adds	r0, #1
 80052b8:	f43f af09 	beq.w	80050ce <_printf_float+0xc2>
 80052bc:	f04f 0900 	mov.w	r9, #0
 80052c0:	f104 0a1a 	add.w	sl, r4, #26
 80052c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c6:	425b      	negs	r3, r3
 80052c8:	454b      	cmp	r3, r9
 80052ca:	dc01      	bgt.n	80052d0 <_printf_float+0x2c4>
 80052cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ce:	e792      	b.n	80051f6 <_printf_float+0x1ea>
 80052d0:	2301      	movs	r3, #1
 80052d2:	4652      	mov	r2, sl
 80052d4:	4631      	mov	r1, r6
 80052d6:	4628      	mov	r0, r5
 80052d8:	47b8      	blx	r7
 80052da:	3001      	adds	r0, #1
 80052dc:	f43f aef7 	beq.w	80050ce <_printf_float+0xc2>
 80052e0:	f109 0901 	add.w	r9, r9, #1
 80052e4:	e7ee      	b.n	80052c4 <_printf_float+0x2b8>
 80052e6:	bf00      	nop
 80052e8:	7fefffff 	.word	0x7fefffff
 80052ec:	0800a29c 	.word	0x0800a29c
 80052f0:	0800a2a0 	.word	0x0800a2a0
 80052f4:	0800a2a8 	.word	0x0800a2a8
 80052f8:	0800a2a4 	.word	0x0800a2a4
 80052fc:	0800a6b1 	.word	0x0800a6b1
 8005300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005302:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005304:	429a      	cmp	r2, r3
 8005306:	bfa8      	it	ge
 8005308:	461a      	movge	r2, r3
 800530a:	2a00      	cmp	r2, #0
 800530c:	4691      	mov	r9, r2
 800530e:	dc37      	bgt.n	8005380 <_printf_float+0x374>
 8005310:	f04f 0b00 	mov.w	fp, #0
 8005314:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005318:	f104 021a 	add.w	r2, r4, #26
 800531c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800531e:	9305      	str	r3, [sp, #20]
 8005320:	eba3 0309 	sub.w	r3, r3, r9
 8005324:	455b      	cmp	r3, fp
 8005326:	dc33      	bgt.n	8005390 <_printf_float+0x384>
 8005328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800532c:	429a      	cmp	r2, r3
 800532e:	db3b      	blt.n	80053a8 <_printf_float+0x39c>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	07da      	lsls	r2, r3, #31
 8005334:	d438      	bmi.n	80053a8 <_printf_float+0x39c>
 8005336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005338:	9b05      	ldr	r3, [sp, #20]
 800533a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	eba2 0901 	sub.w	r9, r2, r1
 8005342:	4599      	cmp	r9, r3
 8005344:	bfa8      	it	ge
 8005346:	4699      	movge	r9, r3
 8005348:	f1b9 0f00 	cmp.w	r9, #0
 800534c:	dc35      	bgt.n	80053ba <_printf_float+0x3ae>
 800534e:	f04f 0800 	mov.w	r8, #0
 8005352:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005356:	f104 0a1a 	add.w	sl, r4, #26
 800535a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	eba3 0309 	sub.w	r3, r3, r9
 8005364:	4543      	cmp	r3, r8
 8005366:	f77f af79 	ble.w	800525c <_printf_float+0x250>
 800536a:	2301      	movs	r3, #1
 800536c:	4652      	mov	r2, sl
 800536e:	4631      	mov	r1, r6
 8005370:	4628      	mov	r0, r5
 8005372:	47b8      	blx	r7
 8005374:	3001      	adds	r0, #1
 8005376:	f43f aeaa 	beq.w	80050ce <_printf_float+0xc2>
 800537a:	f108 0801 	add.w	r8, r8, #1
 800537e:	e7ec      	b.n	800535a <_printf_float+0x34e>
 8005380:	4613      	mov	r3, r2
 8005382:	4631      	mov	r1, r6
 8005384:	4642      	mov	r2, r8
 8005386:	4628      	mov	r0, r5
 8005388:	47b8      	blx	r7
 800538a:	3001      	adds	r0, #1
 800538c:	d1c0      	bne.n	8005310 <_printf_float+0x304>
 800538e:	e69e      	b.n	80050ce <_printf_float+0xc2>
 8005390:	2301      	movs	r3, #1
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	9205      	str	r2, [sp, #20]
 8005398:	47b8      	blx	r7
 800539a:	3001      	adds	r0, #1
 800539c:	f43f ae97 	beq.w	80050ce <_printf_float+0xc2>
 80053a0:	9a05      	ldr	r2, [sp, #20]
 80053a2:	f10b 0b01 	add.w	fp, fp, #1
 80053a6:	e7b9      	b.n	800531c <_printf_float+0x310>
 80053a8:	ee18 3a10 	vmov	r3, s16
 80053ac:	4652      	mov	r2, sl
 80053ae:	4631      	mov	r1, r6
 80053b0:	4628      	mov	r0, r5
 80053b2:	47b8      	blx	r7
 80053b4:	3001      	adds	r0, #1
 80053b6:	d1be      	bne.n	8005336 <_printf_float+0x32a>
 80053b8:	e689      	b.n	80050ce <_printf_float+0xc2>
 80053ba:	9a05      	ldr	r2, [sp, #20]
 80053bc:	464b      	mov	r3, r9
 80053be:	4442      	add	r2, r8
 80053c0:	4631      	mov	r1, r6
 80053c2:	4628      	mov	r0, r5
 80053c4:	47b8      	blx	r7
 80053c6:	3001      	adds	r0, #1
 80053c8:	d1c1      	bne.n	800534e <_printf_float+0x342>
 80053ca:	e680      	b.n	80050ce <_printf_float+0xc2>
 80053cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053ce:	2a01      	cmp	r2, #1
 80053d0:	dc01      	bgt.n	80053d6 <_printf_float+0x3ca>
 80053d2:	07db      	lsls	r3, r3, #31
 80053d4:	d538      	bpl.n	8005448 <_printf_float+0x43c>
 80053d6:	2301      	movs	r3, #1
 80053d8:	4642      	mov	r2, r8
 80053da:	4631      	mov	r1, r6
 80053dc:	4628      	mov	r0, r5
 80053de:	47b8      	blx	r7
 80053e0:	3001      	adds	r0, #1
 80053e2:	f43f ae74 	beq.w	80050ce <_printf_float+0xc2>
 80053e6:	ee18 3a10 	vmov	r3, s16
 80053ea:	4652      	mov	r2, sl
 80053ec:	4631      	mov	r1, r6
 80053ee:	4628      	mov	r0, r5
 80053f0:	47b8      	blx	r7
 80053f2:	3001      	adds	r0, #1
 80053f4:	f43f ae6b 	beq.w	80050ce <_printf_float+0xc2>
 80053f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053fc:	2200      	movs	r2, #0
 80053fe:	2300      	movs	r3, #0
 8005400:	f7fb fb7a 	bl	8000af8 <__aeabi_dcmpeq>
 8005404:	b9d8      	cbnz	r0, 800543e <_printf_float+0x432>
 8005406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005408:	f108 0201 	add.w	r2, r8, #1
 800540c:	3b01      	subs	r3, #1
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	d10e      	bne.n	8005436 <_printf_float+0x42a>
 8005418:	e659      	b.n	80050ce <_printf_float+0xc2>
 800541a:	2301      	movs	r3, #1
 800541c:	4652      	mov	r2, sl
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f ae52 	beq.w	80050ce <_printf_float+0xc2>
 800542a:	f108 0801 	add.w	r8, r8, #1
 800542e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005430:	3b01      	subs	r3, #1
 8005432:	4543      	cmp	r3, r8
 8005434:	dcf1      	bgt.n	800541a <_printf_float+0x40e>
 8005436:	464b      	mov	r3, r9
 8005438:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800543c:	e6dc      	b.n	80051f8 <_printf_float+0x1ec>
 800543e:	f04f 0800 	mov.w	r8, #0
 8005442:	f104 0a1a 	add.w	sl, r4, #26
 8005446:	e7f2      	b.n	800542e <_printf_float+0x422>
 8005448:	2301      	movs	r3, #1
 800544a:	4642      	mov	r2, r8
 800544c:	e7df      	b.n	800540e <_printf_float+0x402>
 800544e:	2301      	movs	r3, #1
 8005450:	464a      	mov	r2, r9
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	f43f ae38 	beq.w	80050ce <_printf_float+0xc2>
 800545e:	f108 0801 	add.w	r8, r8, #1
 8005462:	68e3      	ldr	r3, [r4, #12]
 8005464:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005466:	1a5b      	subs	r3, r3, r1
 8005468:	4543      	cmp	r3, r8
 800546a:	dcf0      	bgt.n	800544e <_printf_float+0x442>
 800546c:	e6fa      	b.n	8005264 <_printf_float+0x258>
 800546e:	f04f 0800 	mov.w	r8, #0
 8005472:	f104 0919 	add.w	r9, r4, #25
 8005476:	e7f4      	b.n	8005462 <_printf_float+0x456>

08005478 <_printf_common>:
 8005478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800547c:	4616      	mov	r6, r2
 800547e:	4699      	mov	r9, r3
 8005480:	688a      	ldr	r2, [r1, #8]
 8005482:	690b      	ldr	r3, [r1, #16]
 8005484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005488:	4293      	cmp	r3, r2
 800548a:	bfb8      	it	lt
 800548c:	4613      	movlt	r3, r2
 800548e:	6033      	str	r3, [r6, #0]
 8005490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005494:	4607      	mov	r7, r0
 8005496:	460c      	mov	r4, r1
 8005498:	b10a      	cbz	r2, 800549e <_printf_common+0x26>
 800549a:	3301      	adds	r3, #1
 800549c:	6033      	str	r3, [r6, #0]
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	0699      	lsls	r1, r3, #26
 80054a2:	bf42      	ittt	mi
 80054a4:	6833      	ldrmi	r3, [r6, #0]
 80054a6:	3302      	addmi	r3, #2
 80054a8:	6033      	strmi	r3, [r6, #0]
 80054aa:	6825      	ldr	r5, [r4, #0]
 80054ac:	f015 0506 	ands.w	r5, r5, #6
 80054b0:	d106      	bne.n	80054c0 <_printf_common+0x48>
 80054b2:	f104 0a19 	add.w	sl, r4, #25
 80054b6:	68e3      	ldr	r3, [r4, #12]
 80054b8:	6832      	ldr	r2, [r6, #0]
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	42ab      	cmp	r3, r5
 80054be:	dc26      	bgt.n	800550e <_printf_common+0x96>
 80054c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054c4:	1e13      	subs	r3, r2, #0
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	bf18      	it	ne
 80054ca:	2301      	movne	r3, #1
 80054cc:	0692      	lsls	r2, r2, #26
 80054ce:	d42b      	bmi.n	8005528 <_printf_common+0xb0>
 80054d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054d4:	4649      	mov	r1, r9
 80054d6:	4638      	mov	r0, r7
 80054d8:	47c0      	blx	r8
 80054da:	3001      	adds	r0, #1
 80054dc:	d01e      	beq.n	800551c <_printf_common+0xa4>
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	68e5      	ldr	r5, [r4, #12]
 80054e2:	6832      	ldr	r2, [r6, #0]
 80054e4:	f003 0306 	and.w	r3, r3, #6
 80054e8:	2b04      	cmp	r3, #4
 80054ea:	bf08      	it	eq
 80054ec:	1aad      	subeq	r5, r5, r2
 80054ee:	68a3      	ldr	r3, [r4, #8]
 80054f0:	6922      	ldr	r2, [r4, #16]
 80054f2:	bf0c      	ite	eq
 80054f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054f8:	2500      	movne	r5, #0
 80054fa:	4293      	cmp	r3, r2
 80054fc:	bfc4      	itt	gt
 80054fe:	1a9b      	subgt	r3, r3, r2
 8005500:	18ed      	addgt	r5, r5, r3
 8005502:	2600      	movs	r6, #0
 8005504:	341a      	adds	r4, #26
 8005506:	42b5      	cmp	r5, r6
 8005508:	d11a      	bne.n	8005540 <_printf_common+0xc8>
 800550a:	2000      	movs	r0, #0
 800550c:	e008      	b.n	8005520 <_printf_common+0xa8>
 800550e:	2301      	movs	r3, #1
 8005510:	4652      	mov	r2, sl
 8005512:	4649      	mov	r1, r9
 8005514:	4638      	mov	r0, r7
 8005516:	47c0      	blx	r8
 8005518:	3001      	adds	r0, #1
 800551a:	d103      	bne.n	8005524 <_printf_common+0xac>
 800551c:	f04f 30ff 	mov.w	r0, #4294967295
 8005520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005524:	3501      	adds	r5, #1
 8005526:	e7c6      	b.n	80054b6 <_printf_common+0x3e>
 8005528:	18e1      	adds	r1, r4, r3
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	2030      	movs	r0, #48	; 0x30
 800552e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005532:	4422      	add	r2, r4
 8005534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800553c:	3302      	adds	r3, #2
 800553e:	e7c7      	b.n	80054d0 <_printf_common+0x58>
 8005540:	2301      	movs	r3, #1
 8005542:	4622      	mov	r2, r4
 8005544:	4649      	mov	r1, r9
 8005546:	4638      	mov	r0, r7
 8005548:	47c0      	blx	r8
 800554a:	3001      	adds	r0, #1
 800554c:	d0e6      	beq.n	800551c <_printf_common+0xa4>
 800554e:	3601      	adds	r6, #1
 8005550:	e7d9      	b.n	8005506 <_printf_common+0x8e>
	...

08005554 <_printf_i>:
 8005554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005558:	460c      	mov	r4, r1
 800555a:	4691      	mov	r9, r2
 800555c:	7e27      	ldrb	r7, [r4, #24]
 800555e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005560:	2f78      	cmp	r7, #120	; 0x78
 8005562:	4680      	mov	r8, r0
 8005564:	469a      	mov	sl, r3
 8005566:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800556a:	d807      	bhi.n	800557c <_printf_i+0x28>
 800556c:	2f62      	cmp	r7, #98	; 0x62
 800556e:	d80a      	bhi.n	8005586 <_printf_i+0x32>
 8005570:	2f00      	cmp	r7, #0
 8005572:	f000 80d8 	beq.w	8005726 <_printf_i+0x1d2>
 8005576:	2f58      	cmp	r7, #88	; 0x58
 8005578:	f000 80a3 	beq.w	80056c2 <_printf_i+0x16e>
 800557c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005584:	e03a      	b.n	80055fc <_printf_i+0xa8>
 8005586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800558a:	2b15      	cmp	r3, #21
 800558c:	d8f6      	bhi.n	800557c <_printf_i+0x28>
 800558e:	a001      	add	r0, pc, #4	; (adr r0, 8005594 <_printf_i+0x40>)
 8005590:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005594:	080055ed 	.word	0x080055ed
 8005598:	08005601 	.word	0x08005601
 800559c:	0800557d 	.word	0x0800557d
 80055a0:	0800557d 	.word	0x0800557d
 80055a4:	0800557d 	.word	0x0800557d
 80055a8:	0800557d 	.word	0x0800557d
 80055ac:	08005601 	.word	0x08005601
 80055b0:	0800557d 	.word	0x0800557d
 80055b4:	0800557d 	.word	0x0800557d
 80055b8:	0800557d 	.word	0x0800557d
 80055bc:	0800557d 	.word	0x0800557d
 80055c0:	0800570d 	.word	0x0800570d
 80055c4:	08005631 	.word	0x08005631
 80055c8:	080056ef 	.word	0x080056ef
 80055cc:	0800557d 	.word	0x0800557d
 80055d0:	0800557d 	.word	0x0800557d
 80055d4:	0800572f 	.word	0x0800572f
 80055d8:	0800557d 	.word	0x0800557d
 80055dc:	08005631 	.word	0x08005631
 80055e0:	0800557d 	.word	0x0800557d
 80055e4:	0800557d 	.word	0x0800557d
 80055e8:	080056f7 	.word	0x080056f7
 80055ec:	680b      	ldr	r3, [r1, #0]
 80055ee:	1d1a      	adds	r2, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	600a      	str	r2, [r1, #0]
 80055f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055fc:	2301      	movs	r3, #1
 80055fe:	e0a3      	b.n	8005748 <_printf_i+0x1f4>
 8005600:	6825      	ldr	r5, [r4, #0]
 8005602:	6808      	ldr	r0, [r1, #0]
 8005604:	062e      	lsls	r6, r5, #24
 8005606:	f100 0304 	add.w	r3, r0, #4
 800560a:	d50a      	bpl.n	8005622 <_printf_i+0xce>
 800560c:	6805      	ldr	r5, [r0, #0]
 800560e:	600b      	str	r3, [r1, #0]
 8005610:	2d00      	cmp	r5, #0
 8005612:	da03      	bge.n	800561c <_printf_i+0xc8>
 8005614:	232d      	movs	r3, #45	; 0x2d
 8005616:	426d      	negs	r5, r5
 8005618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800561c:	485e      	ldr	r0, [pc, #376]	; (8005798 <_printf_i+0x244>)
 800561e:	230a      	movs	r3, #10
 8005620:	e019      	b.n	8005656 <_printf_i+0x102>
 8005622:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005626:	6805      	ldr	r5, [r0, #0]
 8005628:	600b      	str	r3, [r1, #0]
 800562a:	bf18      	it	ne
 800562c:	b22d      	sxthne	r5, r5
 800562e:	e7ef      	b.n	8005610 <_printf_i+0xbc>
 8005630:	680b      	ldr	r3, [r1, #0]
 8005632:	6825      	ldr	r5, [r4, #0]
 8005634:	1d18      	adds	r0, r3, #4
 8005636:	6008      	str	r0, [r1, #0]
 8005638:	0628      	lsls	r0, r5, #24
 800563a:	d501      	bpl.n	8005640 <_printf_i+0xec>
 800563c:	681d      	ldr	r5, [r3, #0]
 800563e:	e002      	b.n	8005646 <_printf_i+0xf2>
 8005640:	0669      	lsls	r1, r5, #25
 8005642:	d5fb      	bpl.n	800563c <_printf_i+0xe8>
 8005644:	881d      	ldrh	r5, [r3, #0]
 8005646:	4854      	ldr	r0, [pc, #336]	; (8005798 <_printf_i+0x244>)
 8005648:	2f6f      	cmp	r7, #111	; 0x6f
 800564a:	bf0c      	ite	eq
 800564c:	2308      	moveq	r3, #8
 800564e:	230a      	movne	r3, #10
 8005650:	2100      	movs	r1, #0
 8005652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005656:	6866      	ldr	r6, [r4, #4]
 8005658:	60a6      	str	r6, [r4, #8]
 800565a:	2e00      	cmp	r6, #0
 800565c:	bfa2      	ittt	ge
 800565e:	6821      	ldrge	r1, [r4, #0]
 8005660:	f021 0104 	bicge.w	r1, r1, #4
 8005664:	6021      	strge	r1, [r4, #0]
 8005666:	b90d      	cbnz	r5, 800566c <_printf_i+0x118>
 8005668:	2e00      	cmp	r6, #0
 800566a:	d04d      	beq.n	8005708 <_printf_i+0x1b4>
 800566c:	4616      	mov	r6, r2
 800566e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005672:	fb03 5711 	mls	r7, r3, r1, r5
 8005676:	5dc7      	ldrb	r7, [r0, r7]
 8005678:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800567c:	462f      	mov	r7, r5
 800567e:	42bb      	cmp	r3, r7
 8005680:	460d      	mov	r5, r1
 8005682:	d9f4      	bls.n	800566e <_printf_i+0x11a>
 8005684:	2b08      	cmp	r3, #8
 8005686:	d10b      	bne.n	80056a0 <_printf_i+0x14c>
 8005688:	6823      	ldr	r3, [r4, #0]
 800568a:	07df      	lsls	r7, r3, #31
 800568c:	d508      	bpl.n	80056a0 <_printf_i+0x14c>
 800568e:	6923      	ldr	r3, [r4, #16]
 8005690:	6861      	ldr	r1, [r4, #4]
 8005692:	4299      	cmp	r1, r3
 8005694:	bfde      	ittt	le
 8005696:	2330      	movle	r3, #48	; 0x30
 8005698:	f806 3c01 	strble.w	r3, [r6, #-1]
 800569c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056a0:	1b92      	subs	r2, r2, r6
 80056a2:	6122      	str	r2, [r4, #16]
 80056a4:	f8cd a000 	str.w	sl, [sp]
 80056a8:	464b      	mov	r3, r9
 80056aa:	aa03      	add	r2, sp, #12
 80056ac:	4621      	mov	r1, r4
 80056ae:	4640      	mov	r0, r8
 80056b0:	f7ff fee2 	bl	8005478 <_printf_common>
 80056b4:	3001      	adds	r0, #1
 80056b6:	d14c      	bne.n	8005752 <_printf_i+0x1fe>
 80056b8:	f04f 30ff 	mov.w	r0, #4294967295
 80056bc:	b004      	add	sp, #16
 80056be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c2:	4835      	ldr	r0, [pc, #212]	; (8005798 <_printf_i+0x244>)
 80056c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	680e      	ldr	r6, [r1, #0]
 80056cc:	061f      	lsls	r7, r3, #24
 80056ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80056d2:	600e      	str	r6, [r1, #0]
 80056d4:	d514      	bpl.n	8005700 <_printf_i+0x1ac>
 80056d6:	07d9      	lsls	r1, r3, #31
 80056d8:	bf44      	itt	mi
 80056da:	f043 0320 	orrmi.w	r3, r3, #32
 80056de:	6023      	strmi	r3, [r4, #0]
 80056e0:	b91d      	cbnz	r5, 80056ea <_printf_i+0x196>
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	f023 0320 	bic.w	r3, r3, #32
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	2310      	movs	r3, #16
 80056ec:	e7b0      	b.n	8005650 <_printf_i+0xfc>
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	f043 0320 	orr.w	r3, r3, #32
 80056f4:	6023      	str	r3, [r4, #0]
 80056f6:	2378      	movs	r3, #120	; 0x78
 80056f8:	4828      	ldr	r0, [pc, #160]	; (800579c <_printf_i+0x248>)
 80056fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056fe:	e7e3      	b.n	80056c8 <_printf_i+0x174>
 8005700:	065e      	lsls	r6, r3, #25
 8005702:	bf48      	it	mi
 8005704:	b2ad      	uxthmi	r5, r5
 8005706:	e7e6      	b.n	80056d6 <_printf_i+0x182>
 8005708:	4616      	mov	r6, r2
 800570a:	e7bb      	b.n	8005684 <_printf_i+0x130>
 800570c:	680b      	ldr	r3, [r1, #0]
 800570e:	6826      	ldr	r6, [r4, #0]
 8005710:	6960      	ldr	r0, [r4, #20]
 8005712:	1d1d      	adds	r5, r3, #4
 8005714:	600d      	str	r5, [r1, #0]
 8005716:	0635      	lsls	r5, r6, #24
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	d501      	bpl.n	8005720 <_printf_i+0x1cc>
 800571c:	6018      	str	r0, [r3, #0]
 800571e:	e002      	b.n	8005726 <_printf_i+0x1d2>
 8005720:	0671      	lsls	r1, r6, #25
 8005722:	d5fb      	bpl.n	800571c <_printf_i+0x1c8>
 8005724:	8018      	strh	r0, [r3, #0]
 8005726:	2300      	movs	r3, #0
 8005728:	6123      	str	r3, [r4, #16]
 800572a:	4616      	mov	r6, r2
 800572c:	e7ba      	b.n	80056a4 <_printf_i+0x150>
 800572e:	680b      	ldr	r3, [r1, #0]
 8005730:	1d1a      	adds	r2, r3, #4
 8005732:	600a      	str	r2, [r1, #0]
 8005734:	681e      	ldr	r6, [r3, #0]
 8005736:	6862      	ldr	r2, [r4, #4]
 8005738:	2100      	movs	r1, #0
 800573a:	4630      	mov	r0, r6
 800573c:	f7fa fd68 	bl	8000210 <memchr>
 8005740:	b108      	cbz	r0, 8005746 <_printf_i+0x1f2>
 8005742:	1b80      	subs	r0, r0, r6
 8005744:	6060      	str	r0, [r4, #4]
 8005746:	6863      	ldr	r3, [r4, #4]
 8005748:	6123      	str	r3, [r4, #16]
 800574a:	2300      	movs	r3, #0
 800574c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005750:	e7a8      	b.n	80056a4 <_printf_i+0x150>
 8005752:	6923      	ldr	r3, [r4, #16]
 8005754:	4632      	mov	r2, r6
 8005756:	4649      	mov	r1, r9
 8005758:	4640      	mov	r0, r8
 800575a:	47d0      	blx	sl
 800575c:	3001      	adds	r0, #1
 800575e:	d0ab      	beq.n	80056b8 <_printf_i+0x164>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	079b      	lsls	r3, r3, #30
 8005764:	d413      	bmi.n	800578e <_printf_i+0x23a>
 8005766:	68e0      	ldr	r0, [r4, #12]
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	4298      	cmp	r0, r3
 800576c:	bfb8      	it	lt
 800576e:	4618      	movlt	r0, r3
 8005770:	e7a4      	b.n	80056bc <_printf_i+0x168>
 8005772:	2301      	movs	r3, #1
 8005774:	4632      	mov	r2, r6
 8005776:	4649      	mov	r1, r9
 8005778:	4640      	mov	r0, r8
 800577a:	47d0      	blx	sl
 800577c:	3001      	adds	r0, #1
 800577e:	d09b      	beq.n	80056b8 <_printf_i+0x164>
 8005780:	3501      	adds	r5, #1
 8005782:	68e3      	ldr	r3, [r4, #12]
 8005784:	9903      	ldr	r1, [sp, #12]
 8005786:	1a5b      	subs	r3, r3, r1
 8005788:	42ab      	cmp	r3, r5
 800578a:	dcf2      	bgt.n	8005772 <_printf_i+0x21e>
 800578c:	e7eb      	b.n	8005766 <_printf_i+0x212>
 800578e:	2500      	movs	r5, #0
 8005790:	f104 0619 	add.w	r6, r4, #25
 8005794:	e7f5      	b.n	8005782 <_printf_i+0x22e>
 8005796:	bf00      	nop
 8005798:	0800a2ac 	.word	0x0800a2ac
 800579c:	0800a2bd 	.word	0x0800a2bd

080057a0 <_scanf_float>:
 80057a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	b087      	sub	sp, #28
 80057a6:	4617      	mov	r7, r2
 80057a8:	9303      	str	r3, [sp, #12]
 80057aa:	688b      	ldr	r3, [r1, #8]
 80057ac:	1e5a      	subs	r2, r3, #1
 80057ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80057b2:	bf83      	ittte	hi
 80057b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80057b8:	195b      	addhi	r3, r3, r5
 80057ba:	9302      	strhi	r3, [sp, #8]
 80057bc:	2300      	movls	r3, #0
 80057be:	bf86      	itte	hi
 80057c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80057c4:	608b      	strhi	r3, [r1, #8]
 80057c6:	9302      	strls	r3, [sp, #8]
 80057c8:	680b      	ldr	r3, [r1, #0]
 80057ca:	468b      	mov	fp, r1
 80057cc:	2500      	movs	r5, #0
 80057ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80057d2:	f84b 3b1c 	str.w	r3, [fp], #28
 80057d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80057da:	4680      	mov	r8, r0
 80057dc:	460c      	mov	r4, r1
 80057de:	465e      	mov	r6, fp
 80057e0:	46aa      	mov	sl, r5
 80057e2:	46a9      	mov	r9, r5
 80057e4:	9501      	str	r5, [sp, #4]
 80057e6:	68a2      	ldr	r2, [r4, #8]
 80057e8:	b152      	cbz	r2, 8005800 <_scanf_float+0x60>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b4e      	cmp	r3, #78	; 0x4e
 80057f0:	d864      	bhi.n	80058bc <_scanf_float+0x11c>
 80057f2:	2b40      	cmp	r3, #64	; 0x40
 80057f4:	d83c      	bhi.n	8005870 <_scanf_float+0xd0>
 80057f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80057fa:	b2c8      	uxtb	r0, r1
 80057fc:	280e      	cmp	r0, #14
 80057fe:	d93a      	bls.n	8005876 <_scanf_float+0xd6>
 8005800:	f1b9 0f00 	cmp.w	r9, #0
 8005804:	d003      	beq.n	800580e <_scanf_float+0x6e>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005812:	f1ba 0f01 	cmp.w	sl, #1
 8005816:	f200 8113 	bhi.w	8005a40 <_scanf_float+0x2a0>
 800581a:	455e      	cmp	r6, fp
 800581c:	f200 8105 	bhi.w	8005a2a <_scanf_float+0x28a>
 8005820:	2501      	movs	r5, #1
 8005822:	4628      	mov	r0, r5
 8005824:	b007      	add	sp, #28
 8005826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800582e:	2a0d      	cmp	r2, #13
 8005830:	d8e6      	bhi.n	8005800 <_scanf_float+0x60>
 8005832:	a101      	add	r1, pc, #4	; (adr r1, 8005838 <_scanf_float+0x98>)
 8005834:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005838:	08005977 	.word	0x08005977
 800583c:	08005801 	.word	0x08005801
 8005840:	08005801 	.word	0x08005801
 8005844:	08005801 	.word	0x08005801
 8005848:	080059d7 	.word	0x080059d7
 800584c:	080059af 	.word	0x080059af
 8005850:	08005801 	.word	0x08005801
 8005854:	08005801 	.word	0x08005801
 8005858:	08005985 	.word	0x08005985
 800585c:	08005801 	.word	0x08005801
 8005860:	08005801 	.word	0x08005801
 8005864:	08005801 	.word	0x08005801
 8005868:	08005801 	.word	0x08005801
 800586c:	0800593d 	.word	0x0800593d
 8005870:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005874:	e7db      	b.n	800582e <_scanf_float+0x8e>
 8005876:	290e      	cmp	r1, #14
 8005878:	d8c2      	bhi.n	8005800 <_scanf_float+0x60>
 800587a:	a001      	add	r0, pc, #4	; (adr r0, 8005880 <_scanf_float+0xe0>)
 800587c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005880:	0800592f 	.word	0x0800592f
 8005884:	08005801 	.word	0x08005801
 8005888:	0800592f 	.word	0x0800592f
 800588c:	080059c3 	.word	0x080059c3
 8005890:	08005801 	.word	0x08005801
 8005894:	080058dd 	.word	0x080058dd
 8005898:	08005919 	.word	0x08005919
 800589c:	08005919 	.word	0x08005919
 80058a0:	08005919 	.word	0x08005919
 80058a4:	08005919 	.word	0x08005919
 80058a8:	08005919 	.word	0x08005919
 80058ac:	08005919 	.word	0x08005919
 80058b0:	08005919 	.word	0x08005919
 80058b4:	08005919 	.word	0x08005919
 80058b8:	08005919 	.word	0x08005919
 80058bc:	2b6e      	cmp	r3, #110	; 0x6e
 80058be:	d809      	bhi.n	80058d4 <_scanf_float+0x134>
 80058c0:	2b60      	cmp	r3, #96	; 0x60
 80058c2:	d8b2      	bhi.n	800582a <_scanf_float+0x8a>
 80058c4:	2b54      	cmp	r3, #84	; 0x54
 80058c6:	d077      	beq.n	80059b8 <_scanf_float+0x218>
 80058c8:	2b59      	cmp	r3, #89	; 0x59
 80058ca:	d199      	bne.n	8005800 <_scanf_float+0x60>
 80058cc:	2d07      	cmp	r5, #7
 80058ce:	d197      	bne.n	8005800 <_scanf_float+0x60>
 80058d0:	2508      	movs	r5, #8
 80058d2:	e029      	b.n	8005928 <_scanf_float+0x188>
 80058d4:	2b74      	cmp	r3, #116	; 0x74
 80058d6:	d06f      	beq.n	80059b8 <_scanf_float+0x218>
 80058d8:	2b79      	cmp	r3, #121	; 0x79
 80058da:	e7f6      	b.n	80058ca <_scanf_float+0x12a>
 80058dc:	6821      	ldr	r1, [r4, #0]
 80058de:	05c8      	lsls	r0, r1, #23
 80058e0:	d51a      	bpl.n	8005918 <_scanf_float+0x178>
 80058e2:	9b02      	ldr	r3, [sp, #8]
 80058e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80058e8:	6021      	str	r1, [r4, #0]
 80058ea:	f109 0901 	add.w	r9, r9, #1
 80058ee:	b11b      	cbz	r3, 80058f8 <_scanf_float+0x158>
 80058f0:	3b01      	subs	r3, #1
 80058f2:	3201      	adds	r2, #1
 80058f4:	9302      	str	r3, [sp, #8]
 80058f6:	60a2      	str	r2, [r4, #8]
 80058f8:	68a3      	ldr	r3, [r4, #8]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	60a3      	str	r3, [r4, #8]
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	3301      	adds	r3, #1
 8005902:	6123      	str	r3, [r4, #16]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3b01      	subs	r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	607b      	str	r3, [r7, #4]
 800590c:	f340 8084 	ble.w	8005a18 <_scanf_float+0x278>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	3301      	adds	r3, #1
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	e766      	b.n	80057e6 <_scanf_float+0x46>
 8005918:	eb1a 0f05 	cmn.w	sl, r5
 800591c:	f47f af70 	bne.w	8005800 <_scanf_float+0x60>
 8005920:	6822      	ldr	r2, [r4, #0]
 8005922:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005926:	6022      	str	r2, [r4, #0]
 8005928:	f806 3b01 	strb.w	r3, [r6], #1
 800592c:	e7e4      	b.n	80058f8 <_scanf_float+0x158>
 800592e:	6822      	ldr	r2, [r4, #0]
 8005930:	0610      	lsls	r0, r2, #24
 8005932:	f57f af65 	bpl.w	8005800 <_scanf_float+0x60>
 8005936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800593a:	e7f4      	b.n	8005926 <_scanf_float+0x186>
 800593c:	f1ba 0f00 	cmp.w	sl, #0
 8005940:	d10e      	bne.n	8005960 <_scanf_float+0x1c0>
 8005942:	f1b9 0f00 	cmp.w	r9, #0
 8005946:	d10e      	bne.n	8005966 <_scanf_float+0x1c6>
 8005948:	6822      	ldr	r2, [r4, #0]
 800594a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800594e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005952:	d108      	bne.n	8005966 <_scanf_float+0x1c6>
 8005954:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005958:	6022      	str	r2, [r4, #0]
 800595a:	f04f 0a01 	mov.w	sl, #1
 800595e:	e7e3      	b.n	8005928 <_scanf_float+0x188>
 8005960:	f1ba 0f02 	cmp.w	sl, #2
 8005964:	d055      	beq.n	8005a12 <_scanf_float+0x272>
 8005966:	2d01      	cmp	r5, #1
 8005968:	d002      	beq.n	8005970 <_scanf_float+0x1d0>
 800596a:	2d04      	cmp	r5, #4
 800596c:	f47f af48 	bne.w	8005800 <_scanf_float+0x60>
 8005970:	3501      	adds	r5, #1
 8005972:	b2ed      	uxtb	r5, r5
 8005974:	e7d8      	b.n	8005928 <_scanf_float+0x188>
 8005976:	f1ba 0f01 	cmp.w	sl, #1
 800597a:	f47f af41 	bne.w	8005800 <_scanf_float+0x60>
 800597e:	f04f 0a02 	mov.w	sl, #2
 8005982:	e7d1      	b.n	8005928 <_scanf_float+0x188>
 8005984:	b97d      	cbnz	r5, 80059a6 <_scanf_float+0x206>
 8005986:	f1b9 0f00 	cmp.w	r9, #0
 800598a:	f47f af3c 	bne.w	8005806 <_scanf_float+0x66>
 800598e:	6822      	ldr	r2, [r4, #0]
 8005990:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005994:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005998:	f47f af39 	bne.w	800580e <_scanf_float+0x6e>
 800599c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80059a0:	6022      	str	r2, [r4, #0]
 80059a2:	2501      	movs	r5, #1
 80059a4:	e7c0      	b.n	8005928 <_scanf_float+0x188>
 80059a6:	2d03      	cmp	r5, #3
 80059a8:	d0e2      	beq.n	8005970 <_scanf_float+0x1d0>
 80059aa:	2d05      	cmp	r5, #5
 80059ac:	e7de      	b.n	800596c <_scanf_float+0x1cc>
 80059ae:	2d02      	cmp	r5, #2
 80059b0:	f47f af26 	bne.w	8005800 <_scanf_float+0x60>
 80059b4:	2503      	movs	r5, #3
 80059b6:	e7b7      	b.n	8005928 <_scanf_float+0x188>
 80059b8:	2d06      	cmp	r5, #6
 80059ba:	f47f af21 	bne.w	8005800 <_scanf_float+0x60>
 80059be:	2507      	movs	r5, #7
 80059c0:	e7b2      	b.n	8005928 <_scanf_float+0x188>
 80059c2:	6822      	ldr	r2, [r4, #0]
 80059c4:	0591      	lsls	r1, r2, #22
 80059c6:	f57f af1b 	bpl.w	8005800 <_scanf_float+0x60>
 80059ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80059ce:	6022      	str	r2, [r4, #0]
 80059d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80059d4:	e7a8      	b.n	8005928 <_scanf_float+0x188>
 80059d6:	6822      	ldr	r2, [r4, #0]
 80059d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80059dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80059e0:	d006      	beq.n	80059f0 <_scanf_float+0x250>
 80059e2:	0550      	lsls	r0, r2, #21
 80059e4:	f57f af0c 	bpl.w	8005800 <_scanf_float+0x60>
 80059e8:	f1b9 0f00 	cmp.w	r9, #0
 80059ec:	f43f af0f 	beq.w	800580e <_scanf_float+0x6e>
 80059f0:	0591      	lsls	r1, r2, #22
 80059f2:	bf58      	it	pl
 80059f4:	9901      	ldrpl	r1, [sp, #4]
 80059f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80059fa:	bf58      	it	pl
 80059fc:	eba9 0101 	subpl.w	r1, r9, r1
 8005a00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005a04:	bf58      	it	pl
 8005a06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005a0a:	6022      	str	r2, [r4, #0]
 8005a0c:	f04f 0900 	mov.w	r9, #0
 8005a10:	e78a      	b.n	8005928 <_scanf_float+0x188>
 8005a12:	f04f 0a03 	mov.w	sl, #3
 8005a16:	e787      	b.n	8005928 <_scanf_float+0x188>
 8005a18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005a1c:	4639      	mov	r1, r7
 8005a1e:	4640      	mov	r0, r8
 8005a20:	4798      	blx	r3
 8005a22:	2800      	cmp	r0, #0
 8005a24:	f43f aedf 	beq.w	80057e6 <_scanf_float+0x46>
 8005a28:	e6ea      	b.n	8005800 <_scanf_float+0x60>
 8005a2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a32:	463a      	mov	r2, r7
 8005a34:	4640      	mov	r0, r8
 8005a36:	4798      	blx	r3
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	6123      	str	r3, [r4, #16]
 8005a3e:	e6ec      	b.n	800581a <_scanf_float+0x7a>
 8005a40:	1e6b      	subs	r3, r5, #1
 8005a42:	2b06      	cmp	r3, #6
 8005a44:	d825      	bhi.n	8005a92 <_scanf_float+0x2f2>
 8005a46:	2d02      	cmp	r5, #2
 8005a48:	d836      	bhi.n	8005ab8 <_scanf_float+0x318>
 8005a4a:	455e      	cmp	r6, fp
 8005a4c:	f67f aee8 	bls.w	8005820 <_scanf_float+0x80>
 8005a50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a54:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a58:	463a      	mov	r2, r7
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4798      	blx	r3
 8005a5e:	6923      	ldr	r3, [r4, #16]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	6123      	str	r3, [r4, #16]
 8005a64:	e7f1      	b.n	8005a4a <_scanf_float+0x2aa>
 8005a66:	9802      	ldr	r0, [sp, #8]
 8005a68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005a70:	9002      	str	r0, [sp, #8]
 8005a72:	463a      	mov	r2, r7
 8005a74:	4640      	mov	r0, r8
 8005a76:	4798      	blx	r3
 8005a78:	6923      	ldr	r3, [r4, #16]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	6123      	str	r3, [r4, #16]
 8005a7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a82:	fa5f fa8a 	uxtb.w	sl, sl
 8005a86:	f1ba 0f02 	cmp.w	sl, #2
 8005a8a:	d1ec      	bne.n	8005a66 <_scanf_float+0x2c6>
 8005a8c:	3d03      	subs	r5, #3
 8005a8e:	b2ed      	uxtb	r5, r5
 8005a90:	1b76      	subs	r6, r6, r5
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	05da      	lsls	r2, r3, #23
 8005a96:	d52f      	bpl.n	8005af8 <_scanf_float+0x358>
 8005a98:	055b      	lsls	r3, r3, #21
 8005a9a:	d510      	bpl.n	8005abe <_scanf_float+0x31e>
 8005a9c:	455e      	cmp	r6, fp
 8005a9e:	f67f aebf 	bls.w	8005820 <_scanf_float+0x80>
 8005aa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005aa6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005aaa:	463a      	mov	r2, r7
 8005aac:	4640      	mov	r0, r8
 8005aae:	4798      	blx	r3
 8005ab0:	6923      	ldr	r3, [r4, #16]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	6123      	str	r3, [r4, #16]
 8005ab6:	e7f1      	b.n	8005a9c <_scanf_float+0x2fc>
 8005ab8:	46aa      	mov	sl, r5
 8005aba:	9602      	str	r6, [sp, #8]
 8005abc:	e7df      	b.n	8005a7e <_scanf_float+0x2de>
 8005abe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	2965      	cmp	r1, #101	; 0x65
 8005ac6:	f103 33ff 	add.w	r3, r3, #4294967295
 8005aca:	f106 35ff 	add.w	r5, r6, #4294967295
 8005ace:	6123      	str	r3, [r4, #16]
 8005ad0:	d00c      	beq.n	8005aec <_scanf_float+0x34c>
 8005ad2:	2945      	cmp	r1, #69	; 0x45
 8005ad4:	d00a      	beq.n	8005aec <_scanf_float+0x34c>
 8005ad6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ada:	463a      	mov	r2, r7
 8005adc:	4640      	mov	r0, r8
 8005ade:	4798      	blx	r3
 8005ae0:	6923      	ldr	r3, [r4, #16]
 8005ae2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	1eb5      	subs	r5, r6, #2
 8005aea:	6123      	str	r3, [r4, #16]
 8005aec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005af0:	463a      	mov	r2, r7
 8005af2:	4640      	mov	r0, r8
 8005af4:	4798      	blx	r3
 8005af6:	462e      	mov	r6, r5
 8005af8:	6825      	ldr	r5, [r4, #0]
 8005afa:	f015 0510 	ands.w	r5, r5, #16
 8005afe:	d158      	bne.n	8005bb2 <_scanf_float+0x412>
 8005b00:	7035      	strb	r5, [r6, #0]
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b0c:	d11c      	bne.n	8005b48 <_scanf_float+0x3a8>
 8005b0e:	9b01      	ldr	r3, [sp, #4]
 8005b10:	454b      	cmp	r3, r9
 8005b12:	eba3 0209 	sub.w	r2, r3, r9
 8005b16:	d124      	bne.n	8005b62 <_scanf_float+0x3c2>
 8005b18:	2200      	movs	r2, #0
 8005b1a:	4659      	mov	r1, fp
 8005b1c:	4640      	mov	r0, r8
 8005b1e:	f000 ff19 	bl	8006954 <_strtod_r>
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	6821      	ldr	r1, [r4, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f011 0f02 	tst.w	r1, #2
 8005b2c:	ec57 6b10 	vmov	r6, r7, d0
 8005b30:	f103 0204 	add.w	r2, r3, #4
 8005b34:	d020      	beq.n	8005b78 <_scanf_float+0x3d8>
 8005b36:	9903      	ldr	r1, [sp, #12]
 8005b38:	600a      	str	r2, [r1, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	e9c3 6700 	strd	r6, r7, [r3]
 8005b40:	68e3      	ldr	r3, [r4, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60e3      	str	r3, [r4, #12]
 8005b46:	e66c      	b.n	8005822 <_scanf_float+0x82>
 8005b48:	9b04      	ldr	r3, [sp, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0e4      	beq.n	8005b18 <_scanf_float+0x378>
 8005b4e:	9905      	ldr	r1, [sp, #20]
 8005b50:	230a      	movs	r3, #10
 8005b52:	462a      	mov	r2, r5
 8005b54:	3101      	adds	r1, #1
 8005b56:	4640      	mov	r0, r8
 8005b58:	f000 ff86 	bl	8006a68 <_strtol_r>
 8005b5c:	9b04      	ldr	r3, [sp, #16]
 8005b5e:	9e05      	ldr	r6, [sp, #20]
 8005b60:	1ac2      	subs	r2, r0, r3
 8005b62:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005b66:	429e      	cmp	r6, r3
 8005b68:	bf28      	it	cs
 8005b6a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005b6e:	4912      	ldr	r1, [pc, #72]	; (8005bb8 <_scanf_float+0x418>)
 8005b70:	4630      	mov	r0, r6
 8005b72:	f000 f82b 	bl	8005bcc <siprintf>
 8005b76:	e7cf      	b.n	8005b18 <_scanf_float+0x378>
 8005b78:	f011 0f04 	tst.w	r1, #4
 8005b7c:	9903      	ldr	r1, [sp, #12]
 8005b7e:	600a      	str	r2, [r1, #0]
 8005b80:	d1db      	bne.n	8005b3a <_scanf_float+0x39a>
 8005b82:	f8d3 8000 	ldr.w	r8, [r3]
 8005b86:	ee10 2a10 	vmov	r2, s0
 8005b8a:	ee10 0a10 	vmov	r0, s0
 8005b8e:	463b      	mov	r3, r7
 8005b90:	4639      	mov	r1, r7
 8005b92:	f7fa ffe3 	bl	8000b5c <__aeabi_dcmpun>
 8005b96:	b128      	cbz	r0, 8005ba4 <_scanf_float+0x404>
 8005b98:	4808      	ldr	r0, [pc, #32]	; (8005bbc <_scanf_float+0x41c>)
 8005b9a:	f000 f811 	bl	8005bc0 <nanf>
 8005b9e:	ed88 0a00 	vstr	s0, [r8]
 8005ba2:	e7cd      	b.n	8005b40 <_scanf_float+0x3a0>
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	f7fb f836 	bl	8000c18 <__aeabi_d2f>
 8005bac:	f8c8 0000 	str.w	r0, [r8]
 8005bb0:	e7c6      	b.n	8005b40 <_scanf_float+0x3a0>
 8005bb2:	2500      	movs	r5, #0
 8005bb4:	e635      	b.n	8005822 <_scanf_float+0x82>
 8005bb6:	bf00      	nop
 8005bb8:	0800a2ce 	.word	0x0800a2ce
 8005bbc:	0800a703 	.word	0x0800a703

08005bc0 <nanf>:
 8005bc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005bc8 <nanf+0x8>
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	7fc00000 	.word	0x7fc00000

08005bcc <siprintf>:
 8005bcc:	b40e      	push	{r1, r2, r3}
 8005bce:	b500      	push	{lr}
 8005bd0:	b09c      	sub	sp, #112	; 0x70
 8005bd2:	ab1d      	add	r3, sp, #116	; 0x74
 8005bd4:	9002      	str	r0, [sp, #8]
 8005bd6:	9006      	str	r0, [sp, #24]
 8005bd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bdc:	4809      	ldr	r0, [pc, #36]	; (8005c04 <siprintf+0x38>)
 8005bde:	9107      	str	r1, [sp, #28]
 8005be0:	9104      	str	r1, [sp, #16]
 8005be2:	4909      	ldr	r1, [pc, #36]	; (8005c08 <siprintf+0x3c>)
 8005be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005be8:	9105      	str	r1, [sp, #20]
 8005bea:	6800      	ldr	r0, [r0, #0]
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	a902      	add	r1, sp, #8
 8005bf0:	f002 ff54 	bl	8008a9c <_svfiprintf_r>
 8005bf4:	9b02      	ldr	r3, [sp, #8]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	b01c      	add	sp, #112	; 0x70
 8005bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c00:	b003      	add	sp, #12
 8005c02:	4770      	bx	lr
 8005c04:	20000030 	.word	0x20000030
 8005c08:	ffff0208 	.word	0xffff0208

08005c0c <siscanf>:
 8005c0c:	b40e      	push	{r1, r2, r3}
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	b09f      	sub	sp, #124	; 0x7c
 8005c12:	ac21      	add	r4, sp, #132	; 0x84
 8005c14:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005c18:	f854 2b04 	ldr.w	r2, [r4], #4
 8005c1c:	9201      	str	r2, [sp, #4]
 8005c1e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005c22:	9004      	str	r0, [sp, #16]
 8005c24:	9008      	str	r0, [sp, #32]
 8005c26:	f7fa fae5 	bl	80001f4 <strlen>
 8005c2a:	4b0c      	ldr	r3, [pc, #48]	; (8005c5c <siscanf+0x50>)
 8005c2c:	9005      	str	r0, [sp, #20]
 8005c2e:	9009      	str	r0, [sp, #36]	; 0x24
 8005c30:	930d      	str	r3, [sp, #52]	; 0x34
 8005c32:	480b      	ldr	r0, [pc, #44]	; (8005c60 <siscanf+0x54>)
 8005c34:	9a01      	ldr	r2, [sp, #4]
 8005c36:	6800      	ldr	r0, [r0, #0]
 8005c38:	9403      	str	r4, [sp, #12]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	9311      	str	r3, [sp, #68]	; 0x44
 8005c3e:	9316      	str	r3, [sp, #88]	; 0x58
 8005c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c44:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005c48:	a904      	add	r1, sp, #16
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	f003 f880 	bl	8008d50 <__ssvfiscanf_r>
 8005c50:	b01f      	add	sp, #124	; 0x7c
 8005c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c56:	b003      	add	sp, #12
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	08005c87 	.word	0x08005c87
 8005c60:	20000030 	.word	0x20000030

08005c64 <__sread>:
 8005c64:	b510      	push	{r4, lr}
 8005c66:	460c      	mov	r4, r1
 8005c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c6c:	f003 fb34 	bl	80092d8 <_read_r>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	bfab      	itete	ge
 8005c74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c76:	89a3      	ldrhlt	r3, [r4, #12]
 8005c78:	181b      	addge	r3, r3, r0
 8005c7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c7e:	bfac      	ite	ge
 8005c80:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c82:	81a3      	strhlt	r3, [r4, #12]
 8005c84:	bd10      	pop	{r4, pc}

08005c86 <__seofread>:
 8005c86:	2000      	movs	r0, #0
 8005c88:	4770      	bx	lr

08005c8a <__swrite>:
 8005c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8e:	461f      	mov	r7, r3
 8005c90:	898b      	ldrh	r3, [r1, #12]
 8005c92:	05db      	lsls	r3, r3, #23
 8005c94:	4605      	mov	r5, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	4616      	mov	r6, r2
 8005c9a:	d505      	bpl.n	8005ca8 <__swrite+0x1e>
 8005c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f002 f8f0 	bl	8007e88 <_lseek_r>
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	463b      	mov	r3, r7
 8005cb8:	4628      	mov	r0, r5
 8005cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cbe:	f000 bed5 	b.w	8006a6c <_write_r>

08005cc2 <__sseek>:
 8005cc2:	b510      	push	{r4, lr}
 8005cc4:	460c      	mov	r4, r1
 8005cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cca:	f002 f8dd 	bl	8007e88 <_lseek_r>
 8005cce:	1c43      	adds	r3, r0, #1
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	bf15      	itete	ne
 8005cd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cde:	81a3      	strheq	r3, [r4, #12]
 8005ce0:	bf18      	it	ne
 8005ce2:	81a3      	strhne	r3, [r4, #12]
 8005ce4:	bd10      	pop	{r4, pc}

08005ce6 <__sclose>:
 8005ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cea:	f000 bed1 	b.w	8006a90 <_close_r>

08005cee <strchr>:
 8005cee:	b2c9      	uxtb	r1, r1
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cf6:	b11a      	cbz	r2, 8005d00 <strchr+0x12>
 8005cf8:	428a      	cmp	r2, r1
 8005cfa:	d1f9      	bne.n	8005cf0 <strchr+0x2>
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	4770      	bx	lr
 8005d00:	2900      	cmp	r1, #0
 8005d02:	bf18      	it	ne
 8005d04:	2300      	movne	r3, #0
 8005d06:	e7f9      	b.n	8005cfc <strchr+0xe>

08005d08 <sulp>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	460d      	mov	r5, r1
 8005d0e:	ec45 4b10 	vmov	d0, r4, r5
 8005d12:	4616      	mov	r6, r2
 8005d14:	f002 fc5e 	bl	80085d4 <__ulp>
 8005d18:	ec51 0b10 	vmov	r0, r1, d0
 8005d1c:	b17e      	cbz	r6, 8005d3e <sulp+0x36>
 8005d1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005d22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dd09      	ble.n	8005d3e <sulp+0x36>
 8005d2a:	051b      	lsls	r3, r3, #20
 8005d2c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005d30:	2400      	movs	r4, #0
 8005d32:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005d36:	4622      	mov	r2, r4
 8005d38:	462b      	mov	r3, r5
 8005d3a:	f7fa fc75 	bl	8000628 <__aeabi_dmul>
 8005d3e:	bd70      	pop	{r4, r5, r6, pc}

08005d40 <_strtod_l>:
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	b0a3      	sub	sp, #140	; 0x8c
 8005d46:	461f      	mov	r7, r3
 8005d48:	2300      	movs	r3, #0
 8005d4a:	931e      	str	r3, [sp, #120]	; 0x78
 8005d4c:	4ba4      	ldr	r3, [pc, #656]	; (8005fe0 <_strtod_l+0x2a0>)
 8005d4e:	9219      	str	r2, [sp, #100]	; 0x64
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	9307      	str	r3, [sp, #28]
 8005d54:	4604      	mov	r4, r0
 8005d56:	4618      	mov	r0, r3
 8005d58:	4688      	mov	r8, r1
 8005d5a:	f7fa fa4b 	bl	80001f4 <strlen>
 8005d5e:	f04f 0a00 	mov.w	sl, #0
 8005d62:	4605      	mov	r5, r0
 8005d64:	f04f 0b00 	mov.w	fp, #0
 8005d68:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005d6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d6e:	781a      	ldrb	r2, [r3, #0]
 8005d70:	2a2b      	cmp	r2, #43	; 0x2b
 8005d72:	d04c      	beq.n	8005e0e <_strtod_l+0xce>
 8005d74:	d839      	bhi.n	8005dea <_strtod_l+0xaa>
 8005d76:	2a0d      	cmp	r2, #13
 8005d78:	d832      	bhi.n	8005de0 <_strtod_l+0xa0>
 8005d7a:	2a08      	cmp	r2, #8
 8005d7c:	d832      	bhi.n	8005de4 <_strtod_l+0xa4>
 8005d7e:	2a00      	cmp	r2, #0
 8005d80:	d03c      	beq.n	8005dfc <_strtod_l+0xbc>
 8005d82:	2300      	movs	r3, #0
 8005d84:	930e      	str	r3, [sp, #56]	; 0x38
 8005d86:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005d88:	7833      	ldrb	r3, [r6, #0]
 8005d8a:	2b30      	cmp	r3, #48	; 0x30
 8005d8c:	f040 80b4 	bne.w	8005ef8 <_strtod_l+0x1b8>
 8005d90:	7873      	ldrb	r3, [r6, #1]
 8005d92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d96:	2b58      	cmp	r3, #88	; 0x58
 8005d98:	d16c      	bne.n	8005e74 <_strtod_l+0x134>
 8005d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d9c:	9301      	str	r3, [sp, #4]
 8005d9e:	ab1e      	add	r3, sp, #120	; 0x78
 8005da0:	9702      	str	r7, [sp, #8]
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	4a8f      	ldr	r2, [pc, #572]	; (8005fe4 <_strtod_l+0x2a4>)
 8005da6:	ab1f      	add	r3, sp, #124	; 0x7c
 8005da8:	a91d      	add	r1, sp, #116	; 0x74
 8005daa:	4620      	mov	r0, r4
 8005dac:	f001 fd60 	bl	8007870 <__gethex>
 8005db0:	f010 0707 	ands.w	r7, r0, #7
 8005db4:	4605      	mov	r5, r0
 8005db6:	d005      	beq.n	8005dc4 <_strtod_l+0x84>
 8005db8:	2f06      	cmp	r7, #6
 8005dba:	d12a      	bne.n	8005e12 <_strtod_l+0xd2>
 8005dbc:	3601      	adds	r6, #1
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	961d      	str	r6, [sp, #116]	; 0x74
 8005dc2:	930e      	str	r3, [sp, #56]	; 0x38
 8005dc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f040 8596 	bne.w	80068f8 <_strtod_l+0xbb8>
 8005dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dce:	b1db      	cbz	r3, 8005e08 <_strtod_l+0xc8>
 8005dd0:	4652      	mov	r2, sl
 8005dd2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005dd6:	ec43 2b10 	vmov	d0, r2, r3
 8005dda:	b023      	add	sp, #140	; 0x8c
 8005ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de0:	2a20      	cmp	r2, #32
 8005de2:	d1ce      	bne.n	8005d82 <_strtod_l+0x42>
 8005de4:	3301      	adds	r3, #1
 8005de6:	931d      	str	r3, [sp, #116]	; 0x74
 8005de8:	e7c0      	b.n	8005d6c <_strtod_l+0x2c>
 8005dea:	2a2d      	cmp	r2, #45	; 0x2d
 8005dec:	d1c9      	bne.n	8005d82 <_strtod_l+0x42>
 8005dee:	2201      	movs	r2, #1
 8005df0:	920e      	str	r2, [sp, #56]	; 0x38
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	921d      	str	r2, [sp, #116]	; 0x74
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1c4      	bne.n	8005d86 <_strtod_l+0x46>
 8005dfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005dfe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f040 8576 	bne.w	80068f4 <_strtod_l+0xbb4>
 8005e08:	4652      	mov	r2, sl
 8005e0a:	465b      	mov	r3, fp
 8005e0c:	e7e3      	b.n	8005dd6 <_strtod_l+0x96>
 8005e0e:	2200      	movs	r2, #0
 8005e10:	e7ee      	b.n	8005df0 <_strtod_l+0xb0>
 8005e12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005e14:	b13a      	cbz	r2, 8005e26 <_strtod_l+0xe6>
 8005e16:	2135      	movs	r1, #53	; 0x35
 8005e18:	a820      	add	r0, sp, #128	; 0x80
 8005e1a:	f002 fce6 	bl	80087ea <__copybits>
 8005e1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8005e20:	4620      	mov	r0, r4
 8005e22:	f002 f8ab 	bl	8007f7c <_Bfree>
 8005e26:	3f01      	subs	r7, #1
 8005e28:	2f05      	cmp	r7, #5
 8005e2a:	d807      	bhi.n	8005e3c <_strtod_l+0xfc>
 8005e2c:	e8df f007 	tbb	[pc, r7]
 8005e30:	1d180b0e 	.word	0x1d180b0e
 8005e34:	030e      	.short	0x030e
 8005e36:	f04f 0b00 	mov.w	fp, #0
 8005e3a:	46da      	mov	sl, fp
 8005e3c:	0728      	lsls	r0, r5, #28
 8005e3e:	d5c1      	bpl.n	8005dc4 <_strtod_l+0x84>
 8005e40:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005e44:	e7be      	b.n	8005dc4 <_strtod_l+0x84>
 8005e46:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8005e4a:	e7f7      	b.n	8005e3c <_strtod_l+0xfc>
 8005e4c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8005e50:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8005e52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005e5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005e5e:	e7ed      	b.n	8005e3c <_strtod_l+0xfc>
 8005e60:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005fe8 <_strtod_l+0x2a8>
 8005e64:	f04f 0a00 	mov.w	sl, #0
 8005e68:	e7e8      	b.n	8005e3c <_strtod_l+0xfc>
 8005e6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005e6e:	f04f 3aff 	mov.w	sl, #4294967295
 8005e72:	e7e3      	b.n	8005e3c <_strtod_l+0xfc>
 8005e74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	921d      	str	r2, [sp, #116]	; 0x74
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b30      	cmp	r3, #48	; 0x30
 8005e7e:	d0f9      	beq.n	8005e74 <_strtod_l+0x134>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d09f      	beq.n	8005dc4 <_strtod_l+0x84>
 8005e84:	2301      	movs	r3, #1
 8005e86:	f04f 0900 	mov.w	r9, #0
 8005e8a:	9304      	str	r3, [sp, #16]
 8005e8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e90:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005e94:	464f      	mov	r7, r9
 8005e96:	220a      	movs	r2, #10
 8005e98:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005e9a:	7806      	ldrb	r6, [r0, #0]
 8005e9c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005ea0:	b2d9      	uxtb	r1, r3
 8005ea2:	2909      	cmp	r1, #9
 8005ea4:	d92a      	bls.n	8005efc <_strtod_l+0x1bc>
 8005ea6:	9907      	ldr	r1, [sp, #28]
 8005ea8:	462a      	mov	r2, r5
 8005eaa:	f003 fa71 	bl	8009390 <strncmp>
 8005eae:	b398      	cbz	r0, 8005f18 <_strtod_l+0x1d8>
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	4633      	mov	r3, r6
 8005eb4:	463d      	mov	r5, r7
 8005eb6:	9007      	str	r0, [sp, #28]
 8005eb8:	4602      	mov	r2, r0
 8005eba:	2b65      	cmp	r3, #101	; 0x65
 8005ebc:	d001      	beq.n	8005ec2 <_strtod_l+0x182>
 8005ebe:	2b45      	cmp	r3, #69	; 0x45
 8005ec0:	d118      	bne.n	8005ef4 <_strtod_l+0x1b4>
 8005ec2:	b91d      	cbnz	r5, 8005ecc <_strtod_l+0x18c>
 8005ec4:	9b04      	ldr	r3, [sp, #16]
 8005ec6:	4303      	orrs	r3, r0
 8005ec8:	d098      	beq.n	8005dfc <_strtod_l+0xbc>
 8005eca:	2500      	movs	r5, #0
 8005ecc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8005ed0:	f108 0301 	add.w	r3, r8, #1
 8005ed4:	931d      	str	r3, [sp, #116]	; 0x74
 8005ed6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005eda:	2b2b      	cmp	r3, #43	; 0x2b
 8005edc:	d075      	beq.n	8005fca <_strtod_l+0x28a>
 8005ede:	2b2d      	cmp	r3, #45	; 0x2d
 8005ee0:	d07b      	beq.n	8005fda <_strtod_l+0x29a>
 8005ee2:	f04f 0c00 	mov.w	ip, #0
 8005ee6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8005eea:	2909      	cmp	r1, #9
 8005eec:	f240 8082 	bls.w	8005ff4 <_strtod_l+0x2b4>
 8005ef0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8005ef4:	2600      	movs	r6, #0
 8005ef6:	e09d      	b.n	8006034 <_strtod_l+0x2f4>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e7c4      	b.n	8005e86 <_strtod_l+0x146>
 8005efc:	2f08      	cmp	r7, #8
 8005efe:	bfd8      	it	le
 8005f00:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8005f02:	f100 0001 	add.w	r0, r0, #1
 8005f06:	bfda      	itte	le
 8005f08:	fb02 3301 	mlale	r3, r2, r1, r3
 8005f0c:	9309      	strle	r3, [sp, #36]	; 0x24
 8005f0e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005f12:	3701      	adds	r7, #1
 8005f14:	901d      	str	r0, [sp, #116]	; 0x74
 8005f16:	e7bf      	b.n	8005e98 <_strtod_l+0x158>
 8005f18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f1a:	195a      	adds	r2, r3, r5
 8005f1c:	921d      	str	r2, [sp, #116]	; 0x74
 8005f1e:	5d5b      	ldrb	r3, [r3, r5]
 8005f20:	2f00      	cmp	r7, #0
 8005f22:	d037      	beq.n	8005f94 <_strtod_l+0x254>
 8005f24:	9007      	str	r0, [sp, #28]
 8005f26:	463d      	mov	r5, r7
 8005f28:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005f2c:	2a09      	cmp	r2, #9
 8005f2e:	d912      	bls.n	8005f56 <_strtod_l+0x216>
 8005f30:	2201      	movs	r2, #1
 8005f32:	e7c2      	b.n	8005eba <_strtod_l+0x17a>
 8005f34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	921d      	str	r2, [sp, #116]	; 0x74
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	2b30      	cmp	r3, #48	; 0x30
 8005f40:	d0f8      	beq.n	8005f34 <_strtod_l+0x1f4>
 8005f42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005f46:	2a08      	cmp	r2, #8
 8005f48:	f200 84db 	bhi.w	8006902 <_strtod_l+0xbc2>
 8005f4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005f4e:	9007      	str	r0, [sp, #28]
 8005f50:	2000      	movs	r0, #0
 8005f52:	920a      	str	r2, [sp, #40]	; 0x28
 8005f54:	4605      	mov	r5, r0
 8005f56:	3b30      	subs	r3, #48	; 0x30
 8005f58:	f100 0201 	add.w	r2, r0, #1
 8005f5c:	d014      	beq.n	8005f88 <_strtod_l+0x248>
 8005f5e:	9907      	ldr	r1, [sp, #28]
 8005f60:	4411      	add	r1, r2
 8005f62:	9107      	str	r1, [sp, #28]
 8005f64:	462a      	mov	r2, r5
 8005f66:	eb00 0e05 	add.w	lr, r0, r5
 8005f6a:	210a      	movs	r1, #10
 8005f6c:	4572      	cmp	r2, lr
 8005f6e:	d113      	bne.n	8005f98 <_strtod_l+0x258>
 8005f70:	182a      	adds	r2, r5, r0
 8005f72:	2a08      	cmp	r2, #8
 8005f74:	f105 0501 	add.w	r5, r5, #1
 8005f78:	4405      	add	r5, r0
 8005f7a:	dc1c      	bgt.n	8005fb6 <_strtod_l+0x276>
 8005f7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f7e:	220a      	movs	r2, #10
 8005f80:	fb02 3301 	mla	r3, r2, r1, r3
 8005f84:	9309      	str	r3, [sp, #36]	; 0x24
 8005f86:	2200      	movs	r2, #0
 8005f88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005f8a:	1c59      	adds	r1, r3, #1
 8005f8c:	911d      	str	r1, [sp, #116]	; 0x74
 8005f8e:	785b      	ldrb	r3, [r3, #1]
 8005f90:	4610      	mov	r0, r2
 8005f92:	e7c9      	b.n	8005f28 <_strtod_l+0x1e8>
 8005f94:	4638      	mov	r0, r7
 8005f96:	e7d2      	b.n	8005f3e <_strtod_l+0x1fe>
 8005f98:	2a08      	cmp	r2, #8
 8005f9a:	dc04      	bgt.n	8005fa6 <_strtod_l+0x266>
 8005f9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005f9e:	434e      	muls	r6, r1
 8005fa0:	9609      	str	r6, [sp, #36]	; 0x24
 8005fa2:	3201      	adds	r2, #1
 8005fa4:	e7e2      	b.n	8005f6c <_strtod_l+0x22c>
 8005fa6:	f102 0c01 	add.w	ip, r2, #1
 8005faa:	f1bc 0f10 	cmp.w	ip, #16
 8005fae:	bfd8      	it	le
 8005fb0:	fb01 f909 	mulle.w	r9, r1, r9
 8005fb4:	e7f5      	b.n	8005fa2 <_strtod_l+0x262>
 8005fb6:	2d10      	cmp	r5, #16
 8005fb8:	bfdc      	itt	le
 8005fba:	220a      	movle	r2, #10
 8005fbc:	fb02 3909 	mlale	r9, r2, r9, r3
 8005fc0:	e7e1      	b.n	8005f86 <_strtod_l+0x246>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9307      	str	r3, [sp, #28]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	e77c      	b.n	8005ec4 <_strtod_l+0x184>
 8005fca:	f04f 0c00 	mov.w	ip, #0
 8005fce:	f108 0302 	add.w	r3, r8, #2
 8005fd2:	931d      	str	r3, [sp, #116]	; 0x74
 8005fd4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8005fd8:	e785      	b.n	8005ee6 <_strtod_l+0x1a6>
 8005fda:	f04f 0c01 	mov.w	ip, #1
 8005fde:	e7f6      	b.n	8005fce <_strtod_l+0x28e>
 8005fe0:	0800a528 	.word	0x0800a528
 8005fe4:	0800a2d4 	.word	0x0800a2d4
 8005fe8:	7ff00000 	.word	0x7ff00000
 8005fec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005fee:	1c59      	adds	r1, r3, #1
 8005ff0:	911d      	str	r1, [sp, #116]	; 0x74
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2b30      	cmp	r3, #48	; 0x30
 8005ff6:	d0f9      	beq.n	8005fec <_strtod_l+0x2ac>
 8005ff8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8005ffc:	2908      	cmp	r1, #8
 8005ffe:	f63f af79 	bhi.w	8005ef4 <_strtod_l+0x1b4>
 8006002:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006006:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006008:	9308      	str	r3, [sp, #32]
 800600a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800600c:	1c59      	adds	r1, r3, #1
 800600e:	911d      	str	r1, [sp, #116]	; 0x74
 8006010:	785b      	ldrb	r3, [r3, #1]
 8006012:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006016:	2e09      	cmp	r6, #9
 8006018:	d937      	bls.n	800608a <_strtod_l+0x34a>
 800601a:	9e08      	ldr	r6, [sp, #32]
 800601c:	1b89      	subs	r1, r1, r6
 800601e:	2908      	cmp	r1, #8
 8006020:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006024:	dc02      	bgt.n	800602c <_strtod_l+0x2ec>
 8006026:	4576      	cmp	r6, lr
 8006028:	bfa8      	it	ge
 800602a:	4676      	movge	r6, lr
 800602c:	f1bc 0f00 	cmp.w	ip, #0
 8006030:	d000      	beq.n	8006034 <_strtod_l+0x2f4>
 8006032:	4276      	negs	r6, r6
 8006034:	2d00      	cmp	r5, #0
 8006036:	d14f      	bne.n	80060d8 <_strtod_l+0x398>
 8006038:	9904      	ldr	r1, [sp, #16]
 800603a:	4301      	orrs	r1, r0
 800603c:	f47f aec2 	bne.w	8005dc4 <_strtod_l+0x84>
 8006040:	2a00      	cmp	r2, #0
 8006042:	f47f aedb 	bne.w	8005dfc <_strtod_l+0xbc>
 8006046:	2b69      	cmp	r3, #105	; 0x69
 8006048:	d027      	beq.n	800609a <_strtod_l+0x35a>
 800604a:	dc24      	bgt.n	8006096 <_strtod_l+0x356>
 800604c:	2b49      	cmp	r3, #73	; 0x49
 800604e:	d024      	beq.n	800609a <_strtod_l+0x35a>
 8006050:	2b4e      	cmp	r3, #78	; 0x4e
 8006052:	f47f aed3 	bne.w	8005dfc <_strtod_l+0xbc>
 8006056:	499e      	ldr	r1, [pc, #632]	; (80062d0 <_strtod_l+0x590>)
 8006058:	a81d      	add	r0, sp, #116	; 0x74
 800605a:	f001 fe61 	bl	8007d20 <__match>
 800605e:	2800      	cmp	r0, #0
 8006060:	f43f aecc 	beq.w	8005dfc <_strtod_l+0xbc>
 8006064:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b28      	cmp	r3, #40	; 0x28
 800606a:	d12d      	bne.n	80060c8 <_strtod_l+0x388>
 800606c:	4999      	ldr	r1, [pc, #612]	; (80062d4 <_strtod_l+0x594>)
 800606e:	aa20      	add	r2, sp, #128	; 0x80
 8006070:	a81d      	add	r0, sp, #116	; 0x74
 8006072:	f001 fe69 	bl	8007d48 <__hexnan>
 8006076:	2805      	cmp	r0, #5
 8006078:	d126      	bne.n	80060c8 <_strtod_l+0x388>
 800607a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800607c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8006080:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006084:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006088:	e69c      	b.n	8005dc4 <_strtod_l+0x84>
 800608a:	210a      	movs	r1, #10
 800608c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006090:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006094:	e7b9      	b.n	800600a <_strtod_l+0x2ca>
 8006096:	2b6e      	cmp	r3, #110	; 0x6e
 8006098:	e7db      	b.n	8006052 <_strtod_l+0x312>
 800609a:	498f      	ldr	r1, [pc, #572]	; (80062d8 <_strtod_l+0x598>)
 800609c:	a81d      	add	r0, sp, #116	; 0x74
 800609e:	f001 fe3f 	bl	8007d20 <__match>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	f43f aeaa 	beq.w	8005dfc <_strtod_l+0xbc>
 80060a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060aa:	498c      	ldr	r1, [pc, #560]	; (80062dc <_strtod_l+0x59c>)
 80060ac:	3b01      	subs	r3, #1
 80060ae:	a81d      	add	r0, sp, #116	; 0x74
 80060b0:	931d      	str	r3, [sp, #116]	; 0x74
 80060b2:	f001 fe35 	bl	8007d20 <__match>
 80060b6:	b910      	cbnz	r0, 80060be <_strtod_l+0x37e>
 80060b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80060ba:	3301      	adds	r3, #1
 80060bc:	931d      	str	r3, [sp, #116]	; 0x74
 80060be:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80062ec <_strtod_l+0x5ac>
 80060c2:	f04f 0a00 	mov.w	sl, #0
 80060c6:	e67d      	b.n	8005dc4 <_strtod_l+0x84>
 80060c8:	4885      	ldr	r0, [pc, #532]	; (80062e0 <_strtod_l+0x5a0>)
 80060ca:	f7fe fec5 	bl	8004e58 <nan>
 80060ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 80060d2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80060d6:	e675      	b.n	8005dc4 <_strtod_l+0x84>
 80060d8:	9b07      	ldr	r3, [sp, #28]
 80060da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060dc:	1af3      	subs	r3, r6, r3
 80060de:	2f00      	cmp	r7, #0
 80060e0:	bf08      	it	eq
 80060e2:	462f      	moveq	r7, r5
 80060e4:	2d10      	cmp	r5, #16
 80060e6:	9308      	str	r3, [sp, #32]
 80060e8:	46a8      	mov	r8, r5
 80060ea:	bfa8      	it	ge
 80060ec:	f04f 0810 	movge.w	r8, #16
 80060f0:	f7fa fa20 	bl	8000534 <__aeabi_ui2d>
 80060f4:	2d09      	cmp	r5, #9
 80060f6:	4682      	mov	sl, r0
 80060f8:	468b      	mov	fp, r1
 80060fa:	dd13      	ble.n	8006124 <_strtod_l+0x3e4>
 80060fc:	4b79      	ldr	r3, [pc, #484]	; (80062e4 <_strtod_l+0x5a4>)
 80060fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006102:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006106:	f7fa fa8f 	bl	8000628 <__aeabi_dmul>
 800610a:	4682      	mov	sl, r0
 800610c:	4648      	mov	r0, r9
 800610e:	468b      	mov	fp, r1
 8006110:	f7fa fa10 	bl	8000534 <__aeabi_ui2d>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4650      	mov	r0, sl
 800611a:	4659      	mov	r1, fp
 800611c:	f7fa f8ce 	bl	80002bc <__adddf3>
 8006120:	4682      	mov	sl, r0
 8006122:	468b      	mov	fp, r1
 8006124:	2d0f      	cmp	r5, #15
 8006126:	dc38      	bgt.n	800619a <_strtod_l+0x45a>
 8006128:	9b08      	ldr	r3, [sp, #32]
 800612a:	2b00      	cmp	r3, #0
 800612c:	f43f ae4a 	beq.w	8005dc4 <_strtod_l+0x84>
 8006130:	dd24      	ble.n	800617c <_strtod_l+0x43c>
 8006132:	2b16      	cmp	r3, #22
 8006134:	dc0b      	bgt.n	800614e <_strtod_l+0x40e>
 8006136:	4d6b      	ldr	r5, [pc, #428]	; (80062e4 <_strtod_l+0x5a4>)
 8006138:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800613c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006140:	4652      	mov	r2, sl
 8006142:	465b      	mov	r3, fp
 8006144:	f7fa fa70 	bl	8000628 <__aeabi_dmul>
 8006148:	4682      	mov	sl, r0
 800614a:	468b      	mov	fp, r1
 800614c:	e63a      	b.n	8005dc4 <_strtod_l+0x84>
 800614e:	9a08      	ldr	r2, [sp, #32]
 8006150:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006154:	4293      	cmp	r3, r2
 8006156:	db20      	blt.n	800619a <_strtod_l+0x45a>
 8006158:	4c62      	ldr	r4, [pc, #392]	; (80062e4 <_strtod_l+0x5a4>)
 800615a:	f1c5 050f 	rsb	r5, r5, #15
 800615e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006162:	4652      	mov	r2, sl
 8006164:	465b      	mov	r3, fp
 8006166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800616a:	f7fa fa5d 	bl	8000628 <__aeabi_dmul>
 800616e:	9b08      	ldr	r3, [sp, #32]
 8006170:	1b5d      	subs	r5, r3, r5
 8006172:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006176:	e9d4 2300 	ldrd	r2, r3, [r4]
 800617a:	e7e3      	b.n	8006144 <_strtod_l+0x404>
 800617c:	9b08      	ldr	r3, [sp, #32]
 800617e:	3316      	adds	r3, #22
 8006180:	db0b      	blt.n	800619a <_strtod_l+0x45a>
 8006182:	9b07      	ldr	r3, [sp, #28]
 8006184:	4a57      	ldr	r2, [pc, #348]	; (80062e4 <_strtod_l+0x5a4>)
 8006186:	1b9e      	subs	r6, r3, r6
 8006188:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800618c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006190:	4650      	mov	r0, sl
 8006192:	4659      	mov	r1, fp
 8006194:	f7fa fb72 	bl	800087c <__aeabi_ddiv>
 8006198:	e7d6      	b.n	8006148 <_strtod_l+0x408>
 800619a:	9b08      	ldr	r3, [sp, #32]
 800619c:	eba5 0808 	sub.w	r8, r5, r8
 80061a0:	4498      	add	r8, r3
 80061a2:	f1b8 0f00 	cmp.w	r8, #0
 80061a6:	dd71      	ble.n	800628c <_strtod_l+0x54c>
 80061a8:	f018 030f 	ands.w	r3, r8, #15
 80061ac:	d00a      	beq.n	80061c4 <_strtod_l+0x484>
 80061ae:	494d      	ldr	r1, [pc, #308]	; (80062e4 <_strtod_l+0x5a4>)
 80061b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80061b4:	4652      	mov	r2, sl
 80061b6:	465b      	mov	r3, fp
 80061b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061bc:	f7fa fa34 	bl	8000628 <__aeabi_dmul>
 80061c0:	4682      	mov	sl, r0
 80061c2:	468b      	mov	fp, r1
 80061c4:	f038 080f 	bics.w	r8, r8, #15
 80061c8:	d04d      	beq.n	8006266 <_strtod_l+0x526>
 80061ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80061ce:	dd22      	ble.n	8006216 <_strtod_l+0x4d6>
 80061d0:	2500      	movs	r5, #0
 80061d2:	462e      	mov	r6, r5
 80061d4:	9509      	str	r5, [sp, #36]	; 0x24
 80061d6:	9507      	str	r5, [sp, #28]
 80061d8:	2322      	movs	r3, #34	; 0x22
 80061da:	f8df b110 	ldr.w	fp, [pc, #272]	; 80062ec <_strtod_l+0x5ac>
 80061de:	6023      	str	r3, [r4, #0]
 80061e0:	f04f 0a00 	mov.w	sl, #0
 80061e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f43f adec 	beq.w	8005dc4 <_strtod_l+0x84>
 80061ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80061ee:	4620      	mov	r0, r4
 80061f0:	f001 fec4 	bl	8007f7c <_Bfree>
 80061f4:	9907      	ldr	r1, [sp, #28]
 80061f6:	4620      	mov	r0, r4
 80061f8:	f001 fec0 	bl	8007f7c <_Bfree>
 80061fc:	4631      	mov	r1, r6
 80061fe:	4620      	mov	r0, r4
 8006200:	f001 febc 	bl	8007f7c <_Bfree>
 8006204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006206:	4620      	mov	r0, r4
 8006208:	f001 feb8 	bl	8007f7c <_Bfree>
 800620c:	4629      	mov	r1, r5
 800620e:	4620      	mov	r0, r4
 8006210:	f001 feb4 	bl	8007f7c <_Bfree>
 8006214:	e5d6      	b.n	8005dc4 <_strtod_l+0x84>
 8006216:	2300      	movs	r3, #0
 8006218:	ea4f 1828 	mov.w	r8, r8, asr #4
 800621c:	4650      	mov	r0, sl
 800621e:	4659      	mov	r1, fp
 8006220:	4699      	mov	r9, r3
 8006222:	f1b8 0f01 	cmp.w	r8, #1
 8006226:	dc21      	bgt.n	800626c <_strtod_l+0x52c>
 8006228:	b10b      	cbz	r3, 800622e <_strtod_l+0x4ee>
 800622a:	4682      	mov	sl, r0
 800622c:	468b      	mov	fp, r1
 800622e:	4b2e      	ldr	r3, [pc, #184]	; (80062e8 <_strtod_l+0x5a8>)
 8006230:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006234:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006238:	4652      	mov	r2, sl
 800623a:	465b      	mov	r3, fp
 800623c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006240:	f7fa f9f2 	bl	8000628 <__aeabi_dmul>
 8006244:	4b29      	ldr	r3, [pc, #164]	; (80062ec <_strtod_l+0x5ac>)
 8006246:	460a      	mov	r2, r1
 8006248:	400b      	ands	r3, r1
 800624a:	4929      	ldr	r1, [pc, #164]	; (80062f0 <_strtod_l+0x5b0>)
 800624c:	428b      	cmp	r3, r1
 800624e:	4682      	mov	sl, r0
 8006250:	d8be      	bhi.n	80061d0 <_strtod_l+0x490>
 8006252:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006256:	428b      	cmp	r3, r1
 8006258:	bf86      	itte	hi
 800625a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80062f4 <_strtod_l+0x5b4>
 800625e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006262:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006266:	2300      	movs	r3, #0
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	e081      	b.n	8006370 <_strtod_l+0x630>
 800626c:	f018 0f01 	tst.w	r8, #1
 8006270:	d007      	beq.n	8006282 <_strtod_l+0x542>
 8006272:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <_strtod_l+0x5a8>)
 8006274:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f7fa f9d4 	bl	8000628 <__aeabi_dmul>
 8006280:	2301      	movs	r3, #1
 8006282:	f109 0901 	add.w	r9, r9, #1
 8006286:	ea4f 0868 	mov.w	r8, r8, asr #1
 800628a:	e7ca      	b.n	8006222 <_strtod_l+0x4e2>
 800628c:	d0eb      	beq.n	8006266 <_strtod_l+0x526>
 800628e:	f1c8 0800 	rsb	r8, r8, #0
 8006292:	f018 020f 	ands.w	r2, r8, #15
 8006296:	d00a      	beq.n	80062ae <_strtod_l+0x56e>
 8006298:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <_strtod_l+0x5a4>)
 800629a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800629e:	4650      	mov	r0, sl
 80062a0:	4659      	mov	r1, fp
 80062a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a6:	f7fa fae9 	bl	800087c <__aeabi_ddiv>
 80062aa:	4682      	mov	sl, r0
 80062ac:	468b      	mov	fp, r1
 80062ae:	ea5f 1828 	movs.w	r8, r8, asr #4
 80062b2:	d0d8      	beq.n	8006266 <_strtod_l+0x526>
 80062b4:	f1b8 0f1f 	cmp.w	r8, #31
 80062b8:	dd1e      	ble.n	80062f8 <_strtod_l+0x5b8>
 80062ba:	2500      	movs	r5, #0
 80062bc:	462e      	mov	r6, r5
 80062be:	9509      	str	r5, [sp, #36]	; 0x24
 80062c0:	9507      	str	r5, [sp, #28]
 80062c2:	2322      	movs	r3, #34	; 0x22
 80062c4:	f04f 0a00 	mov.w	sl, #0
 80062c8:	f04f 0b00 	mov.w	fp, #0
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	e789      	b.n	80061e4 <_strtod_l+0x4a4>
 80062d0:	0800a2a9 	.word	0x0800a2a9
 80062d4:	0800a2e8 	.word	0x0800a2e8
 80062d8:	0800a2a1 	.word	0x0800a2a1
 80062dc:	0800a42c 	.word	0x0800a42c
 80062e0:	0800a703 	.word	0x0800a703
 80062e4:	0800a5c8 	.word	0x0800a5c8
 80062e8:	0800a5a0 	.word	0x0800a5a0
 80062ec:	7ff00000 	.word	0x7ff00000
 80062f0:	7ca00000 	.word	0x7ca00000
 80062f4:	7fefffff 	.word	0x7fefffff
 80062f8:	f018 0310 	ands.w	r3, r8, #16
 80062fc:	bf18      	it	ne
 80062fe:	236a      	movne	r3, #106	; 0x6a
 8006300:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80066b8 <_strtod_l+0x978>
 8006304:	9304      	str	r3, [sp, #16]
 8006306:	4650      	mov	r0, sl
 8006308:	4659      	mov	r1, fp
 800630a:	2300      	movs	r3, #0
 800630c:	f018 0f01 	tst.w	r8, #1
 8006310:	d004      	beq.n	800631c <_strtod_l+0x5dc>
 8006312:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006316:	f7fa f987 	bl	8000628 <__aeabi_dmul>
 800631a:	2301      	movs	r3, #1
 800631c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006320:	f109 0908 	add.w	r9, r9, #8
 8006324:	d1f2      	bne.n	800630c <_strtod_l+0x5cc>
 8006326:	b10b      	cbz	r3, 800632c <_strtod_l+0x5ec>
 8006328:	4682      	mov	sl, r0
 800632a:	468b      	mov	fp, r1
 800632c:	9b04      	ldr	r3, [sp, #16]
 800632e:	b1bb      	cbz	r3, 8006360 <_strtod_l+0x620>
 8006330:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006334:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006338:	2b00      	cmp	r3, #0
 800633a:	4659      	mov	r1, fp
 800633c:	dd10      	ble.n	8006360 <_strtod_l+0x620>
 800633e:	2b1f      	cmp	r3, #31
 8006340:	f340 8128 	ble.w	8006594 <_strtod_l+0x854>
 8006344:	2b34      	cmp	r3, #52	; 0x34
 8006346:	bfde      	ittt	le
 8006348:	3b20      	suble	r3, #32
 800634a:	f04f 32ff 	movle.w	r2, #4294967295
 800634e:	fa02 f303 	lslle.w	r3, r2, r3
 8006352:	f04f 0a00 	mov.w	sl, #0
 8006356:	bfcc      	ite	gt
 8006358:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800635c:	ea03 0b01 	andle.w	fp, r3, r1
 8006360:	2200      	movs	r2, #0
 8006362:	2300      	movs	r3, #0
 8006364:	4650      	mov	r0, sl
 8006366:	4659      	mov	r1, fp
 8006368:	f7fa fbc6 	bl	8000af8 <__aeabi_dcmpeq>
 800636c:	2800      	cmp	r0, #0
 800636e:	d1a4      	bne.n	80062ba <_strtod_l+0x57a>
 8006370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006376:	462b      	mov	r3, r5
 8006378:	463a      	mov	r2, r7
 800637a:	4620      	mov	r0, r4
 800637c:	f001 fe6a 	bl	8008054 <__s2b>
 8006380:	9009      	str	r0, [sp, #36]	; 0x24
 8006382:	2800      	cmp	r0, #0
 8006384:	f43f af24 	beq.w	80061d0 <_strtod_l+0x490>
 8006388:	9b07      	ldr	r3, [sp, #28]
 800638a:	1b9e      	subs	r6, r3, r6
 800638c:	9b08      	ldr	r3, [sp, #32]
 800638e:	2b00      	cmp	r3, #0
 8006390:	bfb4      	ite	lt
 8006392:	4633      	movlt	r3, r6
 8006394:	2300      	movge	r3, #0
 8006396:	9310      	str	r3, [sp, #64]	; 0x40
 8006398:	9b08      	ldr	r3, [sp, #32]
 800639a:	2500      	movs	r5, #0
 800639c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80063a0:	9318      	str	r3, [sp, #96]	; 0x60
 80063a2:	462e      	mov	r6, r5
 80063a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a6:	4620      	mov	r0, r4
 80063a8:	6859      	ldr	r1, [r3, #4]
 80063aa:	f001 fda7 	bl	8007efc <_Balloc>
 80063ae:	9007      	str	r0, [sp, #28]
 80063b0:	2800      	cmp	r0, #0
 80063b2:	f43f af11 	beq.w	80061d8 <_strtod_l+0x498>
 80063b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	3202      	adds	r2, #2
 80063bc:	f103 010c 	add.w	r1, r3, #12
 80063c0:	0092      	lsls	r2, r2, #2
 80063c2:	300c      	adds	r0, #12
 80063c4:	f001 fd8c 	bl	8007ee0 <memcpy>
 80063c8:	ec4b ab10 	vmov	d0, sl, fp
 80063cc:	aa20      	add	r2, sp, #128	; 0x80
 80063ce:	a91f      	add	r1, sp, #124	; 0x7c
 80063d0:	4620      	mov	r0, r4
 80063d2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80063d6:	f002 f979 	bl	80086cc <__d2b>
 80063da:	901e      	str	r0, [sp, #120]	; 0x78
 80063dc:	2800      	cmp	r0, #0
 80063de:	f43f aefb 	beq.w	80061d8 <_strtod_l+0x498>
 80063e2:	2101      	movs	r1, #1
 80063e4:	4620      	mov	r0, r4
 80063e6:	f001 fecf 	bl	8008188 <__i2b>
 80063ea:	4606      	mov	r6, r0
 80063ec:	2800      	cmp	r0, #0
 80063ee:	f43f aef3 	beq.w	80061d8 <_strtod_l+0x498>
 80063f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063f4:	9904      	ldr	r1, [sp, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	bfab      	itete	ge
 80063fa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80063fc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80063fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006400:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006404:	bfac      	ite	ge
 8006406:	eb03 0902 	addge.w	r9, r3, r2
 800640a:	1ad7      	sublt	r7, r2, r3
 800640c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800640e:	eba3 0801 	sub.w	r8, r3, r1
 8006412:	4490      	add	r8, r2
 8006414:	4ba3      	ldr	r3, [pc, #652]	; (80066a4 <_strtod_l+0x964>)
 8006416:	f108 38ff 	add.w	r8, r8, #4294967295
 800641a:	4598      	cmp	r8, r3
 800641c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006420:	f280 80cc 	bge.w	80065bc <_strtod_l+0x87c>
 8006424:	eba3 0308 	sub.w	r3, r3, r8
 8006428:	2b1f      	cmp	r3, #31
 800642a:	eba2 0203 	sub.w	r2, r2, r3
 800642e:	f04f 0101 	mov.w	r1, #1
 8006432:	f300 80b6 	bgt.w	80065a2 <_strtod_l+0x862>
 8006436:	fa01 f303 	lsl.w	r3, r1, r3
 800643a:	9311      	str	r3, [sp, #68]	; 0x44
 800643c:	2300      	movs	r3, #0
 800643e:	930c      	str	r3, [sp, #48]	; 0x30
 8006440:	eb09 0802 	add.w	r8, r9, r2
 8006444:	9b04      	ldr	r3, [sp, #16]
 8006446:	45c1      	cmp	r9, r8
 8006448:	4417      	add	r7, r2
 800644a:	441f      	add	r7, r3
 800644c:	464b      	mov	r3, r9
 800644e:	bfa8      	it	ge
 8006450:	4643      	movge	r3, r8
 8006452:	42bb      	cmp	r3, r7
 8006454:	bfa8      	it	ge
 8006456:	463b      	movge	r3, r7
 8006458:	2b00      	cmp	r3, #0
 800645a:	bfc2      	ittt	gt
 800645c:	eba8 0803 	subgt.w	r8, r8, r3
 8006460:	1aff      	subgt	r7, r7, r3
 8006462:	eba9 0903 	subgt.w	r9, r9, r3
 8006466:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	dd17      	ble.n	800649c <_strtod_l+0x75c>
 800646c:	4631      	mov	r1, r6
 800646e:	461a      	mov	r2, r3
 8006470:	4620      	mov	r0, r4
 8006472:	f001 ff45 	bl	8008300 <__pow5mult>
 8006476:	4606      	mov	r6, r0
 8006478:	2800      	cmp	r0, #0
 800647a:	f43f aead 	beq.w	80061d8 <_strtod_l+0x498>
 800647e:	4601      	mov	r1, r0
 8006480:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006482:	4620      	mov	r0, r4
 8006484:	f001 fe96 	bl	80081b4 <__multiply>
 8006488:	900f      	str	r0, [sp, #60]	; 0x3c
 800648a:	2800      	cmp	r0, #0
 800648c:	f43f aea4 	beq.w	80061d8 <_strtod_l+0x498>
 8006490:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006492:	4620      	mov	r0, r4
 8006494:	f001 fd72 	bl	8007f7c <_Bfree>
 8006498:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800649a:	931e      	str	r3, [sp, #120]	; 0x78
 800649c:	f1b8 0f00 	cmp.w	r8, #0
 80064a0:	f300 8091 	bgt.w	80065c6 <_strtod_l+0x886>
 80064a4:	9b08      	ldr	r3, [sp, #32]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	dd08      	ble.n	80064bc <_strtod_l+0x77c>
 80064aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80064ac:	9907      	ldr	r1, [sp, #28]
 80064ae:	4620      	mov	r0, r4
 80064b0:	f001 ff26 	bl	8008300 <__pow5mult>
 80064b4:	9007      	str	r0, [sp, #28]
 80064b6:	2800      	cmp	r0, #0
 80064b8:	f43f ae8e 	beq.w	80061d8 <_strtod_l+0x498>
 80064bc:	2f00      	cmp	r7, #0
 80064be:	dd08      	ble.n	80064d2 <_strtod_l+0x792>
 80064c0:	9907      	ldr	r1, [sp, #28]
 80064c2:	463a      	mov	r2, r7
 80064c4:	4620      	mov	r0, r4
 80064c6:	f001 ff75 	bl	80083b4 <__lshift>
 80064ca:	9007      	str	r0, [sp, #28]
 80064cc:	2800      	cmp	r0, #0
 80064ce:	f43f ae83 	beq.w	80061d8 <_strtod_l+0x498>
 80064d2:	f1b9 0f00 	cmp.w	r9, #0
 80064d6:	dd08      	ble.n	80064ea <_strtod_l+0x7aa>
 80064d8:	4631      	mov	r1, r6
 80064da:	464a      	mov	r2, r9
 80064dc:	4620      	mov	r0, r4
 80064de:	f001 ff69 	bl	80083b4 <__lshift>
 80064e2:	4606      	mov	r6, r0
 80064e4:	2800      	cmp	r0, #0
 80064e6:	f43f ae77 	beq.w	80061d8 <_strtod_l+0x498>
 80064ea:	9a07      	ldr	r2, [sp, #28]
 80064ec:	991e      	ldr	r1, [sp, #120]	; 0x78
 80064ee:	4620      	mov	r0, r4
 80064f0:	f001 ffe8 	bl	80084c4 <__mdiff>
 80064f4:	4605      	mov	r5, r0
 80064f6:	2800      	cmp	r0, #0
 80064f8:	f43f ae6e 	beq.w	80061d8 <_strtod_l+0x498>
 80064fc:	68c3      	ldr	r3, [r0, #12]
 80064fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006500:	2300      	movs	r3, #0
 8006502:	60c3      	str	r3, [r0, #12]
 8006504:	4631      	mov	r1, r6
 8006506:	f001 ffc1 	bl	800848c <__mcmp>
 800650a:	2800      	cmp	r0, #0
 800650c:	da65      	bge.n	80065da <_strtod_l+0x89a>
 800650e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006510:	ea53 030a 	orrs.w	r3, r3, sl
 8006514:	f040 8087 	bne.w	8006626 <_strtod_l+0x8e6>
 8006518:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800651c:	2b00      	cmp	r3, #0
 800651e:	f040 8082 	bne.w	8006626 <_strtod_l+0x8e6>
 8006522:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006526:	0d1b      	lsrs	r3, r3, #20
 8006528:	051b      	lsls	r3, r3, #20
 800652a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800652e:	d97a      	bls.n	8006626 <_strtod_l+0x8e6>
 8006530:	696b      	ldr	r3, [r5, #20]
 8006532:	b913      	cbnz	r3, 800653a <_strtod_l+0x7fa>
 8006534:	692b      	ldr	r3, [r5, #16]
 8006536:	2b01      	cmp	r3, #1
 8006538:	dd75      	ble.n	8006626 <_strtod_l+0x8e6>
 800653a:	4629      	mov	r1, r5
 800653c:	2201      	movs	r2, #1
 800653e:	4620      	mov	r0, r4
 8006540:	f001 ff38 	bl	80083b4 <__lshift>
 8006544:	4631      	mov	r1, r6
 8006546:	4605      	mov	r5, r0
 8006548:	f001 ffa0 	bl	800848c <__mcmp>
 800654c:	2800      	cmp	r0, #0
 800654e:	dd6a      	ble.n	8006626 <_strtod_l+0x8e6>
 8006550:	9904      	ldr	r1, [sp, #16]
 8006552:	4a55      	ldr	r2, [pc, #340]	; (80066a8 <_strtod_l+0x968>)
 8006554:	465b      	mov	r3, fp
 8006556:	2900      	cmp	r1, #0
 8006558:	f000 8085 	beq.w	8006666 <_strtod_l+0x926>
 800655c:	ea02 010b 	and.w	r1, r2, fp
 8006560:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006564:	dc7f      	bgt.n	8006666 <_strtod_l+0x926>
 8006566:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800656a:	f77f aeaa 	ble.w	80062c2 <_strtod_l+0x582>
 800656e:	4a4f      	ldr	r2, [pc, #316]	; (80066ac <_strtod_l+0x96c>)
 8006570:	2300      	movs	r3, #0
 8006572:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006576:	4650      	mov	r0, sl
 8006578:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800657c:	4659      	mov	r1, fp
 800657e:	f7fa f853 	bl	8000628 <__aeabi_dmul>
 8006582:	460b      	mov	r3, r1
 8006584:	4303      	orrs	r3, r0
 8006586:	bf08      	it	eq
 8006588:	2322      	moveq	r3, #34	; 0x22
 800658a:	4682      	mov	sl, r0
 800658c:	468b      	mov	fp, r1
 800658e:	bf08      	it	eq
 8006590:	6023      	streq	r3, [r4, #0]
 8006592:	e62b      	b.n	80061ec <_strtod_l+0x4ac>
 8006594:	f04f 32ff 	mov.w	r2, #4294967295
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	ea03 0a0a 	and.w	sl, r3, sl
 80065a0:	e6de      	b.n	8006360 <_strtod_l+0x620>
 80065a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80065a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80065aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80065ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80065b2:	fa01 f308 	lsl.w	r3, r1, r8
 80065b6:	930c      	str	r3, [sp, #48]	; 0x30
 80065b8:	9111      	str	r1, [sp, #68]	; 0x44
 80065ba:	e741      	b.n	8006440 <_strtod_l+0x700>
 80065bc:	2300      	movs	r3, #0
 80065be:	930c      	str	r3, [sp, #48]	; 0x30
 80065c0:	2301      	movs	r3, #1
 80065c2:	9311      	str	r3, [sp, #68]	; 0x44
 80065c4:	e73c      	b.n	8006440 <_strtod_l+0x700>
 80065c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80065c8:	4642      	mov	r2, r8
 80065ca:	4620      	mov	r0, r4
 80065cc:	f001 fef2 	bl	80083b4 <__lshift>
 80065d0:	901e      	str	r0, [sp, #120]	; 0x78
 80065d2:	2800      	cmp	r0, #0
 80065d4:	f47f af66 	bne.w	80064a4 <_strtod_l+0x764>
 80065d8:	e5fe      	b.n	80061d8 <_strtod_l+0x498>
 80065da:	465f      	mov	r7, fp
 80065dc:	d16e      	bne.n	80066bc <_strtod_l+0x97c>
 80065de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80065e4:	b342      	cbz	r2, 8006638 <_strtod_l+0x8f8>
 80065e6:	4a32      	ldr	r2, [pc, #200]	; (80066b0 <_strtod_l+0x970>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d128      	bne.n	800663e <_strtod_l+0x8fe>
 80065ec:	9b04      	ldr	r3, [sp, #16]
 80065ee:	4650      	mov	r0, sl
 80065f0:	b1eb      	cbz	r3, 800662e <_strtod_l+0x8ee>
 80065f2:	4a2d      	ldr	r2, [pc, #180]	; (80066a8 <_strtod_l+0x968>)
 80065f4:	403a      	ands	r2, r7
 80065f6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80065fa:	f04f 31ff 	mov.w	r1, #4294967295
 80065fe:	d819      	bhi.n	8006634 <_strtod_l+0x8f4>
 8006600:	0d12      	lsrs	r2, r2, #20
 8006602:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006606:	fa01 f303 	lsl.w	r3, r1, r3
 800660a:	4298      	cmp	r0, r3
 800660c:	d117      	bne.n	800663e <_strtod_l+0x8fe>
 800660e:	4b29      	ldr	r3, [pc, #164]	; (80066b4 <_strtod_l+0x974>)
 8006610:	429f      	cmp	r7, r3
 8006612:	d102      	bne.n	800661a <_strtod_l+0x8da>
 8006614:	3001      	adds	r0, #1
 8006616:	f43f addf 	beq.w	80061d8 <_strtod_l+0x498>
 800661a:	4b23      	ldr	r3, [pc, #140]	; (80066a8 <_strtod_l+0x968>)
 800661c:	403b      	ands	r3, r7
 800661e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006622:	f04f 0a00 	mov.w	sl, #0
 8006626:	9b04      	ldr	r3, [sp, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1a0      	bne.n	800656e <_strtod_l+0x82e>
 800662c:	e5de      	b.n	80061ec <_strtod_l+0x4ac>
 800662e:	f04f 33ff 	mov.w	r3, #4294967295
 8006632:	e7ea      	b.n	800660a <_strtod_l+0x8ca>
 8006634:	460b      	mov	r3, r1
 8006636:	e7e8      	b.n	800660a <_strtod_l+0x8ca>
 8006638:	ea53 030a 	orrs.w	r3, r3, sl
 800663c:	d088      	beq.n	8006550 <_strtod_l+0x810>
 800663e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006640:	b1db      	cbz	r3, 800667a <_strtod_l+0x93a>
 8006642:	423b      	tst	r3, r7
 8006644:	d0ef      	beq.n	8006626 <_strtod_l+0x8e6>
 8006646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006648:	9a04      	ldr	r2, [sp, #16]
 800664a:	4650      	mov	r0, sl
 800664c:	4659      	mov	r1, fp
 800664e:	b1c3      	cbz	r3, 8006682 <_strtod_l+0x942>
 8006650:	f7ff fb5a 	bl	8005d08 <sulp>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800665c:	f7f9 fe2e 	bl	80002bc <__adddf3>
 8006660:	4682      	mov	sl, r0
 8006662:	468b      	mov	fp, r1
 8006664:	e7df      	b.n	8006626 <_strtod_l+0x8e6>
 8006666:	4013      	ands	r3, r2
 8006668:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800666c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006670:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006674:	f04f 3aff 	mov.w	sl, #4294967295
 8006678:	e7d5      	b.n	8006626 <_strtod_l+0x8e6>
 800667a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800667c:	ea13 0f0a 	tst.w	r3, sl
 8006680:	e7e0      	b.n	8006644 <_strtod_l+0x904>
 8006682:	f7ff fb41 	bl	8005d08 <sulp>
 8006686:	4602      	mov	r2, r0
 8006688:	460b      	mov	r3, r1
 800668a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800668e:	f7f9 fe13 	bl	80002b8 <__aeabi_dsub>
 8006692:	2200      	movs	r2, #0
 8006694:	2300      	movs	r3, #0
 8006696:	4682      	mov	sl, r0
 8006698:	468b      	mov	fp, r1
 800669a:	f7fa fa2d 	bl	8000af8 <__aeabi_dcmpeq>
 800669e:	2800      	cmp	r0, #0
 80066a0:	d0c1      	beq.n	8006626 <_strtod_l+0x8e6>
 80066a2:	e60e      	b.n	80062c2 <_strtod_l+0x582>
 80066a4:	fffffc02 	.word	0xfffffc02
 80066a8:	7ff00000 	.word	0x7ff00000
 80066ac:	39500000 	.word	0x39500000
 80066b0:	000fffff 	.word	0x000fffff
 80066b4:	7fefffff 	.word	0x7fefffff
 80066b8:	0800a300 	.word	0x0800a300
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	f002 f860 	bl	8008784 <__ratio>
 80066c4:	ec59 8b10 	vmov	r8, r9, d0
 80066c8:	ee10 0a10 	vmov	r0, s0
 80066cc:	2200      	movs	r2, #0
 80066ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066d2:	4649      	mov	r1, r9
 80066d4:	f7fa fa24 	bl	8000b20 <__aeabi_dcmple>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d07c      	beq.n	80067d6 <_strtod_l+0xa96>
 80066dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d04c      	beq.n	800677c <_strtod_l+0xa3c>
 80066e2:	4b95      	ldr	r3, [pc, #596]	; (8006938 <_strtod_l+0xbf8>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80066ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006938 <_strtod_l+0xbf8>
 80066ee:	f04f 0800 	mov.w	r8, #0
 80066f2:	4b92      	ldr	r3, [pc, #584]	; (800693c <_strtod_l+0xbfc>)
 80066f4:	403b      	ands	r3, r7
 80066f6:	9311      	str	r3, [sp, #68]	; 0x44
 80066f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80066fa:	4b91      	ldr	r3, [pc, #580]	; (8006940 <_strtod_l+0xc00>)
 80066fc:	429a      	cmp	r2, r3
 80066fe:	f040 80b2 	bne.w	8006866 <_strtod_l+0xb26>
 8006702:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006706:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800670a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800670e:	ec4b ab10 	vmov	d0, sl, fp
 8006712:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006716:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800671a:	f001 ff5b 	bl	80085d4 <__ulp>
 800671e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006722:	ec53 2b10 	vmov	r2, r3, d0
 8006726:	f7f9 ff7f 	bl	8000628 <__aeabi_dmul>
 800672a:	4652      	mov	r2, sl
 800672c:	465b      	mov	r3, fp
 800672e:	f7f9 fdc5 	bl	80002bc <__adddf3>
 8006732:	460b      	mov	r3, r1
 8006734:	4981      	ldr	r1, [pc, #516]	; (800693c <_strtod_l+0xbfc>)
 8006736:	4a83      	ldr	r2, [pc, #524]	; (8006944 <_strtod_l+0xc04>)
 8006738:	4019      	ands	r1, r3
 800673a:	4291      	cmp	r1, r2
 800673c:	4682      	mov	sl, r0
 800673e:	d95e      	bls.n	80067fe <_strtod_l+0xabe>
 8006740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006742:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006746:	4293      	cmp	r3, r2
 8006748:	d103      	bne.n	8006752 <_strtod_l+0xa12>
 800674a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674c:	3301      	adds	r3, #1
 800674e:	f43f ad43 	beq.w	80061d8 <_strtod_l+0x498>
 8006752:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006950 <_strtod_l+0xc10>
 8006756:	f04f 3aff 	mov.w	sl, #4294967295
 800675a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800675c:	4620      	mov	r0, r4
 800675e:	f001 fc0d 	bl	8007f7c <_Bfree>
 8006762:	9907      	ldr	r1, [sp, #28]
 8006764:	4620      	mov	r0, r4
 8006766:	f001 fc09 	bl	8007f7c <_Bfree>
 800676a:	4631      	mov	r1, r6
 800676c:	4620      	mov	r0, r4
 800676e:	f001 fc05 	bl	8007f7c <_Bfree>
 8006772:	4629      	mov	r1, r5
 8006774:	4620      	mov	r0, r4
 8006776:	f001 fc01 	bl	8007f7c <_Bfree>
 800677a:	e613      	b.n	80063a4 <_strtod_l+0x664>
 800677c:	f1ba 0f00 	cmp.w	sl, #0
 8006780:	d11b      	bne.n	80067ba <_strtod_l+0xa7a>
 8006782:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006786:	b9f3      	cbnz	r3, 80067c6 <_strtod_l+0xa86>
 8006788:	4b6b      	ldr	r3, [pc, #428]	; (8006938 <_strtod_l+0xbf8>)
 800678a:	2200      	movs	r2, #0
 800678c:	4640      	mov	r0, r8
 800678e:	4649      	mov	r1, r9
 8006790:	f7fa f9bc 	bl	8000b0c <__aeabi_dcmplt>
 8006794:	b9d0      	cbnz	r0, 80067cc <_strtod_l+0xa8c>
 8006796:	4640      	mov	r0, r8
 8006798:	4649      	mov	r1, r9
 800679a:	4b6b      	ldr	r3, [pc, #428]	; (8006948 <_strtod_l+0xc08>)
 800679c:	2200      	movs	r2, #0
 800679e:	f7f9 ff43 	bl	8000628 <__aeabi_dmul>
 80067a2:	4680      	mov	r8, r0
 80067a4:	4689      	mov	r9, r1
 80067a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80067aa:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80067ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80067b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80067b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80067b8:	e79b      	b.n	80066f2 <_strtod_l+0x9b2>
 80067ba:	f1ba 0f01 	cmp.w	sl, #1
 80067be:	d102      	bne.n	80067c6 <_strtod_l+0xa86>
 80067c0:	2f00      	cmp	r7, #0
 80067c2:	f43f ad7e 	beq.w	80062c2 <_strtod_l+0x582>
 80067c6:	4b61      	ldr	r3, [pc, #388]	; (800694c <_strtod_l+0xc0c>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	e78c      	b.n	80066e6 <_strtod_l+0x9a6>
 80067cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006948 <_strtod_l+0xc08>
 80067d0:	f04f 0800 	mov.w	r8, #0
 80067d4:	e7e7      	b.n	80067a6 <_strtod_l+0xa66>
 80067d6:	4b5c      	ldr	r3, [pc, #368]	; (8006948 <_strtod_l+0xc08>)
 80067d8:	4640      	mov	r0, r8
 80067da:	4649      	mov	r1, r9
 80067dc:	2200      	movs	r2, #0
 80067de:	f7f9 ff23 	bl	8000628 <__aeabi_dmul>
 80067e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067e4:	4680      	mov	r8, r0
 80067e6:	4689      	mov	r9, r1
 80067e8:	b933      	cbnz	r3, 80067f8 <_strtod_l+0xab8>
 80067ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067ee:	9012      	str	r0, [sp, #72]	; 0x48
 80067f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80067f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80067f6:	e7dd      	b.n	80067b4 <_strtod_l+0xa74>
 80067f8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80067fc:	e7f9      	b.n	80067f2 <_strtod_l+0xab2>
 80067fe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006802:	9b04      	ldr	r3, [sp, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1a8      	bne.n	800675a <_strtod_l+0xa1a>
 8006808:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800680c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800680e:	0d1b      	lsrs	r3, r3, #20
 8006810:	051b      	lsls	r3, r3, #20
 8006812:	429a      	cmp	r2, r3
 8006814:	d1a1      	bne.n	800675a <_strtod_l+0xa1a>
 8006816:	4640      	mov	r0, r8
 8006818:	4649      	mov	r1, r9
 800681a:	f7fa fa65 	bl	8000ce8 <__aeabi_d2lz>
 800681e:	f7f9 fed5 	bl	80005cc <__aeabi_l2d>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4640      	mov	r0, r8
 8006828:	4649      	mov	r1, r9
 800682a:	f7f9 fd45 	bl	80002b8 <__aeabi_dsub>
 800682e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006830:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006834:	ea43 030a 	orr.w	r3, r3, sl
 8006838:	4313      	orrs	r3, r2
 800683a:	4680      	mov	r8, r0
 800683c:	4689      	mov	r9, r1
 800683e:	d053      	beq.n	80068e8 <_strtod_l+0xba8>
 8006840:	a335      	add	r3, pc, #212	; (adr r3, 8006918 <_strtod_l+0xbd8>)
 8006842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006846:	f7fa f961 	bl	8000b0c <__aeabi_dcmplt>
 800684a:	2800      	cmp	r0, #0
 800684c:	f47f acce 	bne.w	80061ec <_strtod_l+0x4ac>
 8006850:	a333      	add	r3, pc, #204	; (adr r3, 8006920 <_strtod_l+0xbe0>)
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	4640      	mov	r0, r8
 8006858:	4649      	mov	r1, r9
 800685a:	f7fa f975 	bl	8000b48 <__aeabi_dcmpgt>
 800685e:	2800      	cmp	r0, #0
 8006860:	f43f af7b 	beq.w	800675a <_strtod_l+0xa1a>
 8006864:	e4c2      	b.n	80061ec <_strtod_l+0x4ac>
 8006866:	9b04      	ldr	r3, [sp, #16]
 8006868:	b333      	cbz	r3, 80068b8 <_strtod_l+0xb78>
 800686a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800686c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006870:	d822      	bhi.n	80068b8 <_strtod_l+0xb78>
 8006872:	a32d      	add	r3, pc, #180	; (adr r3, 8006928 <_strtod_l+0xbe8>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	4640      	mov	r0, r8
 800687a:	4649      	mov	r1, r9
 800687c:	f7fa f950 	bl	8000b20 <__aeabi_dcmple>
 8006880:	b1a0      	cbz	r0, 80068ac <_strtod_l+0xb6c>
 8006882:	4649      	mov	r1, r9
 8006884:	4640      	mov	r0, r8
 8006886:	f7fa f9a7 	bl	8000bd8 <__aeabi_d2uiz>
 800688a:	2801      	cmp	r0, #1
 800688c:	bf38      	it	cc
 800688e:	2001      	movcc	r0, #1
 8006890:	f7f9 fe50 	bl	8000534 <__aeabi_ui2d>
 8006894:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006896:	4680      	mov	r8, r0
 8006898:	4689      	mov	r9, r1
 800689a:	bb13      	cbnz	r3, 80068e2 <_strtod_l+0xba2>
 800689c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068a0:	9014      	str	r0, [sp, #80]	; 0x50
 80068a2:	9315      	str	r3, [sp, #84]	; 0x54
 80068a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80068a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80068ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80068b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	930d      	str	r3, [sp, #52]	; 0x34
 80068b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068bc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80068c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80068c4:	f001 fe86 	bl	80085d4 <__ulp>
 80068c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068cc:	ec53 2b10 	vmov	r2, r3, d0
 80068d0:	f7f9 feaa 	bl	8000628 <__aeabi_dmul>
 80068d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80068d8:	f7f9 fcf0 	bl	80002bc <__adddf3>
 80068dc:	4682      	mov	sl, r0
 80068de:	468b      	mov	fp, r1
 80068e0:	e78f      	b.n	8006802 <_strtod_l+0xac2>
 80068e2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80068e6:	e7dd      	b.n	80068a4 <_strtod_l+0xb64>
 80068e8:	a311      	add	r3, pc, #68	; (adr r3, 8006930 <_strtod_l+0xbf0>)
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f7fa f90d 	bl	8000b0c <__aeabi_dcmplt>
 80068f2:	e7b4      	b.n	800685e <_strtod_l+0xb1e>
 80068f4:	2300      	movs	r3, #0
 80068f6:	930e      	str	r3, [sp, #56]	; 0x38
 80068f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80068fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	f7ff ba65 	b.w	8005dcc <_strtod_l+0x8c>
 8006902:	2b65      	cmp	r3, #101	; 0x65
 8006904:	f43f ab5d 	beq.w	8005fc2 <_strtod_l+0x282>
 8006908:	2b45      	cmp	r3, #69	; 0x45
 800690a:	f43f ab5a 	beq.w	8005fc2 <_strtod_l+0x282>
 800690e:	2201      	movs	r2, #1
 8006910:	f7ff bb92 	b.w	8006038 <_strtod_l+0x2f8>
 8006914:	f3af 8000 	nop.w
 8006918:	94a03595 	.word	0x94a03595
 800691c:	3fdfffff 	.word	0x3fdfffff
 8006920:	35afe535 	.word	0x35afe535
 8006924:	3fe00000 	.word	0x3fe00000
 8006928:	ffc00000 	.word	0xffc00000
 800692c:	41dfffff 	.word	0x41dfffff
 8006930:	94a03595 	.word	0x94a03595
 8006934:	3fcfffff 	.word	0x3fcfffff
 8006938:	3ff00000 	.word	0x3ff00000
 800693c:	7ff00000 	.word	0x7ff00000
 8006940:	7fe00000 	.word	0x7fe00000
 8006944:	7c9fffff 	.word	0x7c9fffff
 8006948:	3fe00000 	.word	0x3fe00000
 800694c:	bff00000 	.word	0xbff00000
 8006950:	7fefffff 	.word	0x7fefffff

08006954 <_strtod_r>:
 8006954:	4b01      	ldr	r3, [pc, #4]	; (800695c <_strtod_r+0x8>)
 8006956:	f7ff b9f3 	b.w	8005d40 <_strtod_l>
 800695a:	bf00      	nop
 800695c:	20000098 	.word	0x20000098

08006960 <_strtol_l.isra.0>:
 8006960:	2b01      	cmp	r3, #1
 8006962:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006966:	d001      	beq.n	800696c <_strtol_l.isra.0+0xc>
 8006968:	2b24      	cmp	r3, #36	; 0x24
 800696a:	d906      	bls.n	800697a <_strtol_l.isra.0+0x1a>
 800696c:	f7fe fa7c 	bl	8004e68 <__errno>
 8006970:	2316      	movs	r3, #22
 8006972:	6003      	str	r3, [r0, #0]
 8006974:	2000      	movs	r0, #0
 8006976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697a:	4f3a      	ldr	r7, [pc, #232]	; (8006a64 <_strtol_l.isra.0+0x104>)
 800697c:	468e      	mov	lr, r1
 800697e:	4676      	mov	r6, lr
 8006980:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006984:	5de5      	ldrb	r5, [r4, r7]
 8006986:	f015 0508 	ands.w	r5, r5, #8
 800698a:	d1f8      	bne.n	800697e <_strtol_l.isra.0+0x1e>
 800698c:	2c2d      	cmp	r4, #45	; 0x2d
 800698e:	d134      	bne.n	80069fa <_strtol_l.isra.0+0x9a>
 8006990:	f89e 4000 	ldrb.w	r4, [lr]
 8006994:	f04f 0801 	mov.w	r8, #1
 8006998:	f106 0e02 	add.w	lr, r6, #2
 800699c:	2b00      	cmp	r3, #0
 800699e:	d05c      	beq.n	8006a5a <_strtol_l.isra.0+0xfa>
 80069a0:	2b10      	cmp	r3, #16
 80069a2:	d10c      	bne.n	80069be <_strtol_l.isra.0+0x5e>
 80069a4:	2c30      	cmp	r4, #48	; 0x30
 80069a6:	d10a      	bne.n	80069be <_strtol_l.isra.0+0x5e>
 80069a8:	f89e 4000 	ldrb.w	r4, [lr]
 80069ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80069b0:	2c58      	cmp	r4, #88	; 0x58
 80069b2:	d14d      	bne.n	8006a50 <_strtol_l.isra.0+0xf0>
 80069b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80069b8:	2310      	movs	r3, #16
 80069ba:	f10e 0e02 	add.w	lr, lr, #2
 80069be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80069c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80069c6:	2600      	movs	r6, #0
 80069c8:	fbbc f9f3 	udiv	r9, ip, r3
 80069cc:	4635      	mov	r5, r6
 80069ce:	fb03 ca19 	mls	sl, r3, r9, ip
 80069d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80069d6:	2f09      	cmp	r7, #9
 80069d8:	d818      	bhi.n	8006a0c <_strtol_l.isra.0+0xac>
 80069da:	463c      	mov	r4, r7
 80069dc:	42a3      	cmp	r3, r4
 80069de:	dd24      	ble.n	8006a2a <_strtol_l.isra.0+0xca>
 80069e0:	2e00      	cmp	r6, #0
 80069e2:	db1f      	blt.n	8006a24 <_strtol_l.isra.0+0xc4>
 80069e4:	45a9      	cmp	r9, r5
 80069e6:	d31d      	bcc.n	8006a24 <_strtol_l.isra.0+0xc4>
 80069e8:	d101      	bne.n	80069ee <_strtol_l.isra.0+0x8e>
 80069ea:	45a2      	cmp	sl, r4
 80069ec:	db1a      	blt.n	8006a24 <_strtol_l.isra.0+0xc4>
 80069ee:	fb05 4503 	mla	r5, r5, r3, r4
 80069f2:	2601      	movs	r6, #1
 80069f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80069f8:	e7eb      	b.n	80069d2 <_strtol_l.isra.0+0x72>
 80069fa:	2c2b      	cmp	r4, #43	; 0x2b
 80069fc:	bf08      	it	eq
 80069fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006a02:	46a8      	mov	r8, r5
 8006a04:	bf08      	it	eq
 8006a06:	f106 0e02 	addeq.w	lr, r6, #2
 8006a0a:	e7c7      	b.n	800699c <_strtol_l.isra.0+0x3c>
 8006a0c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006a10:	2f19      	cmp	r7, #25
 8006a12:	d801      	bhi.n	8006a18 <_strtol_l.isra.0+0xb8>
 8006a14:	3c37      	subs	r4, #55	; 0x37
 8006a16:	e7e1      	b.n	80069dc <_strtol_l.isra.0+0x7c>
 8006a18:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006a1c:	2f19      	cmp	r7, #25
 8006a1e:	d804      	bhi.n	8006a2a <_strtol_l.isra.0+0xca>
 8006a20:	3c57      	subs	r4, #87	; 0x57
 8006a22:	e7db      	b.n	80069dc <_strtol_l.isra.0+0x7c>
 8006a24:	f04f 36ff 	mov.w	r6, #4294967295
 8006a28:	e7e4      	b.n	80069f4 <_strtol_l.isra.0+0x94>
 8006a2a:	2e00      	cmp	r6, #0
 8006a2c:	da05      	bge.n	8006a3a <_strtol_l.isra.0+0xda>
 8006a2e:	2322      	movs	r3, #34	; 0x22
 8006a30:	6003      	str	r3, [r0, #0]
 8006a32:	4665      	mov	r5, ip
 8006a34:	b942      	cbnz	r2, 8006a48 <_strtol_l.isra.0+0xe8>
 8006a36:	4628      	mov	r0, r5
 8006a38:	e79d      	b.n	8006976 <_strtol_l.isra.0+0x16>
 8006a3a:	f1b8 0f00 	cmp.w	r8, #0
 8006a3e:	d000      	beq.n	8006a42 <_strtol_l.isra.0+0xe2>
 8006a40:	426d      	negs	r5, r5
 8006a42:	2a00      	cmp	r2, #0
 8006a44:	d0f7      	beq.n	8006a36 <_strtol_l.isra.0+0xd6>
 8006a46:	b10e      	cbz	r6, 8006a4c <_strtol_l.isra.0+0xec>
 8006a48:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006a4c:	6011      	str	r1, [r2, #0]
 8006a4e:	e7f2      	b.n	8006a36 <_strtol_l.isra.0+0xd6>
 8006a50:	2430      	movs	r4, #48	; 0x30
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1b3      	bne.n	80069be <_strtol_l.isra.0+0x5e>
 8006a56:	2308      	movs	r3, #8
 8006a58:	e7b1      	b.n	80069be <_strtol_l.isra.0+0x5e>
 8006a5a:	2c30      	cmp	r4, #48	; 0x30
 8006a5c:	d0a4      	beq.n	80069a8 <_strtol_l.isra.0+0x48>
 8006a5e:	230a      	movs	r3, #10
 8006a60:	e7ad      	b.n	80069be <_strtol_l.isra.0+0x5e>
 8006a62:	bf00      	nop
 8006a64:	0800a329 	.word	0x0800a329

08006a68 <_strtol_r>:
 8006a68:	f7ff bf7a 	b.w	8006960 <_strtol_l.isra.0>

08006a6c <_write_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d07      	ldr	r5, [pc, #28]	; (8006a8c <_write_r+0x20>)
 8006a70:	4604      	mov	r4, r0
 8006a72:	4608      	mov	r0, r1
 8006a74:	4611      	mov	r1, r2
 8006a76:	2200      	movs	r2, #0
 8006a78:	602a      	str	r2, [r5, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f7fb fd3d 	bl	80024fa <_write>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d102      	bne.n	8006a8a <_write_r+0x1e>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	b103      	cbz	r3, 8006a8a <_write_r+0x1e>
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	20007f10 	.word	0x20007f10

08006a90 <_close_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	4d06      	ldr	r5, [pc, #24]	; (8006aac <_close_r+0x1c>)
 8006a94:	2300      	movs	r3, #0
 8006a96:	4604      	mov	r4, r0
 8006a98:	4608      	mov	r0, r1
 8006a9a:	602b      	str	r3, [r5, #0]
 8006a9c:	f7fb fd49 	bl	8002532 <_close>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	d102      	bne.n	8006aaa <_close_r+0x1a>
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	b103      	cbz	r3, 8006aaa <_close_r+0x1a>
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	20007f10 	.word	0x20007f10

08006ab0 <quorem>:
 8006ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	6903      	ldr	r3, [r0, #16]
 8006ab6:	690c      	ldr	r4, [r1, #16]
 8006ab8:	42a3      	cmp	r3, r4
 8006aba:	4607      	mov	r7, r0
 8006abc:	f2c0 8081 	blt.w	8006bc2 <quorem+0x112>
 8006ac0:	3c01      	subs	r4, #1
 8006ac2:	f101 0814 	add.w	r8, r1, #20
 8006ac6:	f100 0514 	add.w	r5, r0, #20
 8006aca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ad4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	429a      	cmp	r2, r3
 8006adc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ae0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ae4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ae8:	d331      	bcc.n	8006b4e <quorem+0x9e>
 8006aea:	f04f 0e00 	mov.w	lr, #0
 8006aee:	4640      	mov	r0, r8
 8006af0:	46ac      	mov	ip, r5
 8006af2:	46f2      	mov	sl, lr
 8006af4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006af8:	b293      	uxth	r3, r2
 8006afa:	fb06 e303 	mla	r3, r6, r3, lr
 8006afe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	ebaa 0303 	sub.w	r3, sl, r3
 8006b08:	0c12      	lsrs	r2, r2, #16
 8006b0a:	f8dc a000 	ldr.w	sl, [ip]
 8006b0e:	fb06 e202 	mla	r2, r6, r2, lr
 8006b12:	fa13 f38a 	uxtah	r3, r3, sl
 8006b16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006b1a:	fa1f fa82 	uxth.w	sl, r2
 8006b1e:	f8dc 2000 	ldr.w	r2, [ip]
 8006b22:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006b26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b30:	4581      	cmp	r9, r0
 8006b32:	f84c 3b04 	str.w	r3, [ip], #4
 8006b36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b3a:	d2db      	bcs.n	8006af4 <quorem+0x44>
 8006b3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b40:	b92b      	cbnz	r3, 8006b4e <quorem+0x9e>
 8006b42:	9b01      	ldr	r3, [sp, #4]
 8006b44:	3b04      	subs	r3, #4
 8006b46:	429d      	cmp	r5, r3
 8006b48:	461a      	mov	r2, r3
 8006b4a:	d32e      	bcc.n	8006baa <quorem+0xfa>
 8006b4c:	613c      	str	r4, [r7, #16]
 8006b4e:	4638      	mov	r0, r7
 8006b50:	f001 fc9c 	bl	800848c <__mcmp>
 8006b54:	2800      	cmp	r0, #0
 8006b56:	db24      	blt.n	8006ba2 <quorem+0xf2>
 8006b58:	3601      	adds	r6, #1
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f04f 0c00 	mov.w	ip, #0
 8006b60:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b64:	f8d0 e000 	ldr.w	lr, [r0]
 8006b68:	b293      	uxth	r3, r2
 8006b6a:	ebac 0303 	sub.w	r3, ip, r3
 8006b6e:	0c12      	lsrs	r2, r2, #16
 8006b70:	fa13 f38e 	uxtah	r3, r3, lr
 8006b74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006b78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b82:	45c1      	cmp	r9, r8
 8006b84:	f840 3b04 	str.w	r3, [r0], #4
 8006b88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006b8c:	d2e8      	bcs.n	8006b60 <quorem+0xb0>
 8006b8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b96:	b922      	cbnz	r2, 8006ba2 <quorem+0xf2>
 8006b98:	3b04      	subs	r3, #4
 8006b9a:	429d      	cmp	r5, r3
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	d30a      	bcc.n	8006bb6 <quorem+0x106>
 8006ba0:	613c      	str	r4, [r7, #16]
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	b003      	add	sp, #12
 8006ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006baa:	6812      	ldr	r2, [r2, #0]
 8006bac:	3b04      	subs	r3, #4
 8006bae:	2a00      	cmp	r2, #0
 8006bb0:	d1cc      	bne.n	8006b4c <quorem+0x9c>
 8006bb2:	3c01      	subs	r4, #1
 8006bb4:	e7c7      	b.n	8006b46 <quorem+0x96>
 8006bb6:	6812      	ldr	r2, [r2, #0]
 8006bb8:	3b04      	subs	r3, #4
 8006bba:	2a00      	cmp	r2, #0
 8006bbc:	d1f0      	bne.n	8006ba0 <quorem+0xf0>
 8006bbe:	3c01      	subs	r4, #1
 8006bc0:	e7eb      	b.n	8006b9a <quorem+0xea>
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	e7ee      	b.n	8006ba4 <quorem+0xf4>
	...

08006bc8 <_dtoa_r>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	ed2d 8b02 	vpush	{d8}
 8006bd0:	ec57 6b10 	vmov	r6, r7, d0
 8006bd4:	b095      	sub	sp, #84	; 0x54
 8006bd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006bd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006bdc:	9105      	str	r1, [sp, #20]
 8006bde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006be2:	4604      	mov	r4, r0
 8006be4:	9209      	str	r2, [sp, #36]	; 0x24
 8006be6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006be8:	b975      	cbnz	r5, 8006c08 <_dtoa_r+0x40>
 8006bea:	2010      	movs	r0, #16
 8006bec:	f001 f95e 	bl	8007eac <malloc>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	6260      	str	r0, [r4, #36]	; 0x24
 8006bf4:	b920      	cbnz	r0, 8006c00 <_dtoa_r+0x38>
 8006bf6:	4bb2      	ldr	r3, [pc, #712]	; (8006ec0 <_dtoa_r+0x2f8>)
 8006bf8:	21ea      	movs	r1, #234	; 0xea
 8006bfa:	48b2      	ldr	r0, [pc, #712]	; (8006ec4 <_dtoa_r+0x2fc>)
 8006bfc:	f002 fca0 	bl	8009540 <__assert_func>
 8006c00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c04:	6005      	str	r5, [r0, #0]
 8006c06:	60c5      	str	r5, [r0, #12]
 8006c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c0a:	6819      	ldr	r1, [r3, #0]
 8006c0c:	b151      	cbz	r1, 8006c24 <_dtoa_r+0x5c>
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	604a      	str	r2, [r1, #4]
 8006c12:	2301      	movs	r3, #1
 8006c14:	4093      	lsls	r3, r2
 8006c16:	608b      	str	r3, [r1, #8]
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f001 f9af 	bl	8007f7c <_Bfree>
 8006c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	1e3b      	subs	r3, r7, #0
 8006c26:	bfb9      	ittee	lt
 8006c28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006c2c:	9303      	strlt	r3, [sp, #12]
 8006c2e:	2300      	movge	r3, #0
 8006c30:	f8c8 3000 	strge.w	r3, [r8]
 8006c34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006c38:	4ba3      	ldr	r3, [pc, #652]	; (8006ec8 <_dtoa_r+0x300>)
 8006c3a:	bfbc      	itt	lt
 8006c3c:	2201      	movlt	r2, #1
 8006c3e:	f8c8 2000 	strlt.w	r2, [r8]
 8006c42:	ea33 0309 	bics.w	r3, r3, r9
 8006c46:	d11b      	bne.n	8006c80 <_dtoa_r+0xb8>
 8006c48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c4e:	6013      	str	r3, [r2, #0]
 8006c50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c54:	4333      	orrs	r3, r6
 8006c56:	f000 857a 	beq.w	800774e <_dtoa_r+0xb86>
 8006c5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c5c:	b963      	cbnz	r3, 8006c78 <_dtoa_r+0xb0>
 8006c5e:	4b9b      	ldr	r3, [pc, #620]	; (8006ecc <_dtoa_r+0x304>)
 8006c60:	e024      	b.n	8006cac <_dtoa_r+0xe4>
 8006c62:	4b9b      	ldr	r3, [pc, #620]	; (8006ed0 <_dtoa_r+0x308>)
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	3308      	adds	r3, #8
 8006c68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c6a:	6013      	str	r3, [r2, #0]
 8006c6c:	9800      	ldr	r0, [sp, #0]
 8006c6e:	b015      	add	sp, #84	; 0x54
 8006c70:	ecbd 8b02 	vpop	{d8}
 8006c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c78:	4b94      	ldr	r3, [pc, #592]	; (8006ecc <_dtoa_r+0x304>)
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	3303      	adds	r3, #3
 8006c7e:	e7f3      	b.n	8006c68 <_dtoa_r+0xa0>
 8006c80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c84:	2200      	movs	r2, #0
 8006c86:	ec51 0b17 	vmov	r0, r1, d7
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006c90:	f7f9 ff32 	bl	8000af8 <__aeabi_dcmpeq>
 8006c94:	4680      	mov	r8, r0
 8006c96:	b158      	cbz	r0, 8006cb0 <_dtoa_r+0xe8>
 8006c98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8551 	beq.w	8007748 <_dtoa_r+0xb80>
 8006ca6:	488b      	ldr	r0, [pc, #556]	; (8006ed4 <_dtoa_r+0x30c>)
 8006ca8:	6018      	str	r0, [r3, #0]
 8006caa:	1e43      	subs	r3, r0, #1
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	e7dd      	b.n	8006c6c <_dtoa_r+0xa4>
 8006cb0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006cb4:	aa12      	add	r2, sp, #72	; 0x48
 8006cb6:	a913      	add	r1, sp, #76	; 0x4c
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f001 fd07 	bl	80086cc <__d2b>
 8006cbe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006cc2:	4683      	mov	fp, r0
 8006cc4:	2d00      	cmp	r5, #0
 8006cc6:	d07c      	beq.n	8006dc2 <_dtoa_r+0x1fa>
 8006cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cd2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006cd6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006cda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006cde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006ce2:	4b7d      	ldr	r3, [pc, #500]	; (8006ed8 <_dtoa_r+0x310>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	4639      	mov	r1, r7
 8006cea:	f7f9 fae5 	bl	80002b8 <__aeabi_dsub>
 8006cee:	a36e      	add	r3, pc, #440	; (adr r3, 8006ea8 <_dtoa_r+0x2e0>)
 8006cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf4:	f7f9 fc98 	bl	8000628 <__aeabi_dmul>
 8006cf8:	a36d      	add	r3, pc, #436	; (adr r3, 8006eb0 <_dtoa_r+0x2e8>)
 8006cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfe:	f7f9 fadd 	bl	80002bc <__adddf3>
 8006d02:	4606      	mov	r6, r0
 8006d04:	4628      	mov	r0, r5
 8006d06:	460f      	mov	r7, r1
 8006d08:	f7f9 fc24 	bl	8000554 <__aeabi_i2d>
 8006d0c:	a36a      	add	r3, pc, #424	; (adr r3, 8006eb8 <_dtoa_r+0x2f0>)
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	f7f9 fc89 	bl	8000628 <__aeabi_dmul>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	4639      	mov	r1, r7
 8006d1e:	f7f9 facd 	bl	80002bc <__adddf3>
 8006d22:	4606      	mov	r6, r0
 8006d24:	460f      	mov	r7, r1
 8006d26:	f7f9 ff2f 	bl	8000b88 <__aeabi_d2iz>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	4682      	mov	sl, r0
 8006d2e:	2300      	movs	r3, #0
 8006d30:	4630      	mov	r0, r6
 8006d32:	4639      	mov	r1, r7
 8006d34:	f7f9 feea 	bl	8000b0c <__aeabi_dcmplt>
 8006d38:	b148      	cbz	r0, 8006d4e <_dtoa_r+0x186>
 8006d3a:	4650      	mov	r0, sl
 8006d3c:	f7f9 fc0a 	bl	8000554 <__aeabi_i2d>
 8006d40:	4632      	mov	r2, r6
 8006d42:	463b      	mov	r3, r7
 8006d44:	f7f9 fed8 	bl	8000af8 <__aeabi_dcmpeq>
 8006d48:	b908      	cbnz	r0, 8006d4e <_dtoa_r+0x186>
 8006d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d4e:	f1ba 0f16 	cmp.w	sl, #22
 8006d52:	d854      	bhi.n	8006dfe <_dtoa_r+0x236>
 8006d54:	4b61      	ldr	r3, [pc, #388]	; (8006edc <_dtoa_r+0x314>)
 8006d56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d62:	f7f9 fed3 	bl	8000b0c <__aeabi_dcmplt>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d04b      	beq.n	8006e02 <_dtoa_r+0x23a>
 8006d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d6e:	2300      	movs	r3, #0
 8006d70:	930e      	str	r3, [sp, #56]	; 0x38
 8006d72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d74:	1b5d      	subs	r5, r3, r5
 8006d76:	1e6b      	subs	r3, r5, #1
 8006d78:	9304      	str	r3, [sp, #16]
 8006d7a:	bf43      	ittte	mi
 8006d7c:	2300      	movmi	r3, #0
 8006d7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006d82:	9304      	strmi	r3, [sp, #16]
 8006d84:	f04f 0800 	movpl.w	r8, #0
 8006d88:	f1ba 0f00 	cmp.w	sl, #0
 8006d8c:	db3b      	blt.n	8006e06 <_dtoa_r+0x23e>
 8006d8e:	9b04      	ldr	r3, [sp, #16]
 8006d90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006d94:	4453      	add	r3, sl
 8006d96:	9304      	str	r3, [sp, #16]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	9306      	str	r3, [sp, #24]
 8006d9c:	9b05      	ldr	r3, [sp, #20]
 8006d9e:	2b09      	cmp	r3, #9
 8006da0:	d869      	bhi.n	8006e76 <_dtoa_r+0x2ae>
 8006da2:	2b05      	cmp	r3, #5
 8006da4:	bfc4      	itt	gt
 8006da6:	3b04      	subgt	r3, #4
 8006da8:	9305      	strgt	r3, [sp, #20]
 8006daa:	9b05      	ldr	r3, [sp, #20]
 8006dac:	f1a3 0302 	sub.w	r3, r3, #2
 8006db0:	bfcc      	ite	gt
 8006db2:	2500      	movgt	r5, #0
 8006db4:	2501      	movle	r5, #1
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d869      	bhi.n	8006e8e <_dtoa_r+0x2c6>
 8006dba:	e8df f003 	tbb	[pc, r3]
 8006dbe:	4e2c      	.short	0x4e2c
 8006dc0:	5a4c      	.short	0x5a4c
 8006dc2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006dc6:	441d      	add	r5, r3
 8006dc8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	bfc1      	itttt	gt
 8006dd0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006dd4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006dd8:	fa09 f303 	lslgt.w	r3, r9, r3
 8006ddc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006de0:	bfda      	itte	le
 8006de2:	f1c3 0320 	rsble	r3, r3, #32
 8006de6:	fa06 f003 	lslle.w	r0, r6, r3
 8006dea:	4318      	orrgt	r0, r3
 8006dec:	f7f9 fba2 	bl	8000534 <__aeabi_ui2d>
 8006df0:	2301      	movs	r3, #1
 8006df2:	4606      	mov	r6, r0
 8006df4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006df8:	3d01      	subs	r5, #1
 8006dfa:	9310      	str	r3, [sp, #64]	; 0x40
 8006dfc:	e771      	b.n	8006ce2 <_dtoa_r+0x11a>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e7b6      	b.n	8006d70 <_dtoa_r+0x1a8>
 8006e02:	900e      	str	r0, [sp, #56]	; 0x38
 8006e04:	e7b5      	b.n	8006d72 <_dtoa_r+0x1aa>
 8006e06:	f1ca 0300 	rsb	r3, sl, #0
 8006e0a:	9306      	str	r3, [sp, #24]
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	eba8 080a 	sub.w	r8, r8, sl
 8006e12:	930d      	str	r3, [sp, #52]	; 0x34
 8006e14:	e7c2      	b.n	8006d9c <_dtoa_r+0x1d4>
 8006e16:	2300      	movs	r3, #0
 8006e18:	9308      	str	r3, [sp, #32]
 8006e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	dc39      	bgt.n	8006e94 <_dtoa_r+0x2cc>
 8006e20:	f04f 0901 	mov.w	r9, #1
 8006e24:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e28:	464b      	mov	r3, r9
 8006e2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006e2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006e30:	2200      	movs	r2, #0
 8006e32:	6042      	str	r2, [r0, #4]
 8006e34:	2204      	movs	r2, #4
 8006e36:	f102 0614 	add.w	r6, r2, #20
 8006e3a:	429e      	cmp	r6, r3
 8006e3c:	6841      	ldr	r1, [r0, #4]
 8006e3e:	d92f      	bls.n	8006ea0 <_dtoa_r+0x2d8>
 8006e40:	4620      	mov	r0, r4
 8006e42:	f001 f85b 	bl	8007efc <_Balloc>
 8006e46:	9000      	str	r0, [sp, #0]
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d14b      	bne.n	8006ee4 <_dtoa_r+0x31c>
 8006e4c:	4b24      	ldr	r3, [pc, #144]	; (8006ee0 <_dtoa_r+0x318>)
 8006e4e:	4602      	mov	r2, r0
 8006e50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006e54:	e6d1      	b.n	8006bfa <_dtoa_r+0x32>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e7de      	b.n	8006e18 <_dtoa_r+0x250>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	9308      	str	r3, [sp, #32]
 8006e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e60:	eb0a 0903 	add.w	r9, sl, r3
 8006e64:	f109 0301 	add.w	r3, r9, #1
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	bfb8      	it	lt
 8006e6e:	2301      	movlt	r3, #1
 8006e70:	e7dd      	b.n	8006e2e <_dtoa_r+0x266>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e7f2      	b.n	8006e5c <_dtoa_r+0x294>
 8006e76:	2501      	movs	r5, #1
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9305      	str	r3, [sp, #20]
 8006e7c:	9508      	str	r5, [sp, #32]
 8006e7e:	f04f 39ff 	mov.w	r9, #4294967295
 8006e82:	2200      	movs	r2, #0
 8006e84:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e88:	2312      	movs	r3, #18
 8006e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8006e8c:	e7cf      	b.n	8006e2e <_dtoa_r+0x266>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	9308      	str	r3, [sp, #32]
 8006e92:	e7f4      	b.n	8006e7e <_dtoa_r+0x2b6>
 8006e94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006e98:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e9c:	464b      	mov	r3, r9
 8006e9e:	e7c6      	b.n	8006e2e <_dtoa_r+0x266>
 8006ea0:	3101      	adds	r1, #1
 8006ea2:	6041      	str	r1, [r0, #4]
 8006ea4:	0052      	lsls	r2, r2, #1
 8006ea6:	e7c6      	b.n	8006e36 <_dtoa_r+0x26e>
 8006ea8:	636f4361 	.word	0x636f4361
 8006eac:	3fd287a7 	.word	0x3fd287a7
 8006eb0:	8b60c8b3 	.word	0x8b60c8b3
 8006eb4:	3fc68a28 	.word	0x3fc68a28
 8006eb8:	509f79fb 	.word	0x509f79fb
 8006ebc:	3fd34413 	.word	0x3fd34413
 8006ec0:	0800a436 	.word	0x0800a436
 8006ec4:	0800a44d 	.word	0x0800a44d
 8006ec8:	7ff00000 	.word	0x7ff00000
 8006ecc:	0800a432 	.word	0x0800a432
 8006ed0:	0800a429 	.word	0x0800a429
 8006ed4:	0800a6b2 	.word	0x0800a6b2
 8006ed8:	3ff80000 	.word	0x3ff80000
 8006edc:	0800a5c8 	.word	0x0800a5c8
 8006ee0:	0800a4ac 	.word	0x0800a4ac
 8006ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ee6:	9a00      	ldr	r2, [sp, #0]
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	9b01      	ldr	r3, [sp, #4]
 8006eec:	2b0e      	cmp	r3, #14
 8006eee:	f200 80ad 	bhi.w	800704c <_dtoa_r+0x484>
 8006ef2:	2d00      	cmp	r5, #0
 8006ef4:	f000 80aa 	beq.w	800704c <_dtoa_r+0x484>
 8006ef8:	f1ba 0f00 	cmp.w	sl, #0
 8006efc:	dd36      	ble.n	8006f6c <_dtoa_r+0x3a4>
 8006efe:	4ac3      	ldr	r2, [pc, #780]	; (800720c <_dtoa_r+0x644>)
 8006f00:	f00a 030f 	and.w	r3, sl, #15
 8006f04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f08:	ed93 7b00 	vldr	d7, [r3]
 8006f0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006f10:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006f14:	eeb0 8a47 	vmov.f32	s16, s14
 8006f18:	eef0 8a67 	vmov.f32	s17, s15
 8006f1c:	d016      	beq.n	8006f4c <_dtoa_r+0x384>
 8006f1e:	4bbc      	ldr	r3, [pc, #752]	; (8007210 <_dtoa_r+0x648>)
 8006f20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f28:	f7f9 fca8 	bl	800087c <__aeabi_ddiv>
 8006f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f30:	f007 070f 	and.w	r7, r7, #15
 8006f34:	2503      	movs	r5, #3
 8006f36:	4eb6      	ldr	r6, [pc, #728]	; (8007210 <_dtoa_r+0x648>)
 8006f38:	b957      	cbnz	r7, 8006f50 <_dtoa_r+0x388>
 8006f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f3e:	ec53 2b18 	vmov	r2, r3, d8
 8006f42:	f7f9 fc9b 	bl	800087c <__aeabi_ddiv>
 8006f46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f4a:	e029      	b.n	8006fa0 <_dtoa_r+0x3d8>
 8006f4c:	2502      	movs	r5, #2
 8006f4e:	e7f2      	b.n	8006f36 <_dtoa_r+0x36e>
 8006f50:	07f9      	lsls	r1, r7, #31
 8006f52:	d508      	bpl.n	8006f66 <_dtoa_r+0x39e>
 8006f54:	ec51 0b18 	vmov	r0, r1, d8
 8006f58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f5c:	f7f9 fb64 	bl	8000628 <__aeabi_dmul>
 8006f60:	ec41 0b18 	vmov	d8, r0, r1
 8006f64:	3501      	adds	r5, #1
 8006f66:	107f      	asrs	r7, r7, #1
 8006f68:	3608      	adds	r6, #8
 8006f6a:	e7e5      	b.n	8006f38 <_dtoa_r+0x370>
 8006f6c:	f000 80a6 	beq.w	80070bc <_dtoa_r+0x4f4>
 8006f70:	f1ca 0600 	rsb	r6, sl, #0
 8006f74:	4ba5      	ldr	r3, [pc, #660]	; (800720c <_dtoa_r+0x644>)
 8006f76:	4fa6      	ldr	r7, [pc, #664]	; (8007210 <_dtoa_r+0x648>)
 8006f78:	f006 020f 	and.w	r2, r6, #15
 8006f7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f88:	f7f9 fb4e 	bl	8000628 <__aeabi_dmul>
 8006f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f90:	1136      	asrs	r6, r6, #4
 8006f92:	2300      	movs	r3, #0
 8006f94:	2502      	movs	r5, #2
 8006f96:	2e00      	cmp	r6, #0
 8006f98:	f040 8085 	bne.w	80070a6 <_dtoa_r+0x4de>
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1d2      	bne.n	8006f46 <_dtoa_r+0x37e>
 8006fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 808c 	beq.w	80070c0 <_dtoa_r+0x4f8>
 8006fa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fac:	4b99      	ldr	r3, [pc, #612]	; (8007214 <_dtoa_r+0x64c>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	f7f9 fdaa 	bl	8000b0c <__aeabi_dcmplt>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	f000 8081 	beq.w	80070c0 <_dtoa_r+0x4f8>
 8006fbe:	9b01      	ldr	r3, [sp, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d07d      	beq.n	80070c0 <_dtoa_r+0x4f8>
 8006fc4:	f1b9 0f00 	cmp.w	r9, #0
 8006fc8:	dd3c      	ble.n	8007044 <_dtoa_r+0x47c>
 8006fca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006fce:	9307      	str	r3, [sp, #28]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	4b91      	ldr	r3, [pc, #580]	; (8007218 <_dtoa_r+0x650>)
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	4639      	mov	r1, r7
 8006fd8:	f7f9 fb26 	bl	8000628 <__aeabi_dmul>
 8006fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fe0:	3501      	adds	r5, #1
 8006fe2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006fe6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fea:	4628      	mov	r0, r5
 8006fec:	f7f9 fab2 	bl	8000554 <__aeabi_i2d>
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	f7f9 fb18 	bl	8000628 <__aeabi_dmul>
 8006ff8:	4b88      	ldr	r3, [pc, #544]	; (800721c <_dtoa_r+0x654>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f7f9 f95e 	bl	80002bc <__adddf3>
 8007000:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007008:	9303      	str	r3, [sp, #12]
 800700a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800700c:	2b00      	cmp	r3, #0
 800700e:	d15c      	bne.n	80070ca <_dtoa_r+0x502>
 8007010:	4b83      	ldr	r3, [pc, #524]	; (8007220 <_dtoa_r+0x658>)
 8007012:	2200      	movs	r2, #0
 8007014:	4630      	mov	r0, r6
 8007016:	4639      	mov	r1, r7
 8007018:	f7f9 f94e 	bl	80002b8 <__aeabi_dsub>
 800701c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007020:	4606      	mov	r6, r0
 8007022:	460f      	mov	r7, r1
 8007024:	f7f9 fd90 	bl	8000b48 <__aeabi_dcmpgt>
 8007028:	2800      	cmp	r0, #0
 800702a:	f040 8296 	bne.w	800755a <_dtoa_r+0x992>
 800702e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007032:	4630      	mov	r0, r6
 8007034:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007038:	4639      	mov	r1, r7
 800703a:	f7f9 fd67 	bl	8000b0c <__aeabi_dcmplt>
 800703e:	2800      	cmp	r0, #0
 8007040:	f040 8288 	bne.w	8007554 <_dtoa_r+0x98c>
 8007044:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007048:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800704c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800704e:	2b00      	cmp	r3, #0
 8007050:	f2c0 8158 	blt.w	8007304 <_dtoa_r+0x73c>
 8007054:	f1ba 0f0e 	cmp.w	sl, #14
 8007058:	f300 8154 	bgt.w	8007304 <_dtoa_r+0x73c>
 800705c:	4b6b      	ldr	r3, [pc, #428]	; (800720c <_dtoa_r+0x644>)
 800705e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007062:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	f280 80e3 	bge.w	8007234 <_dtoa_r+0x66c>
 800706e:	9b01      	ldr	r3, [sp, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f300 80df 	bgt.w	8007234 <_dtoa_r+0x66c>
 8007076:	f040 826d 	bne.w	8007554 <_dtoa_r+0x98c>
 800707a:	4b69      	ldr	r3, [pc, #420]	; (8007220 <_dtoa_r+0x658>)
 800707c:	2200      	movs	r2, #0
 800707e:	4640      	mov	r0, r8
 8007080:	4649      	mov	r1, r9
 8007082:	f7f9 fad1 	bl	8000628 <__aeabi_dmul>
 8007086:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800708a:	f7f9 fd53 	bl	8000b34 <__aeabi_dcmpge>
 800708e:	9e01      	ldr	r6, [sp, #4]
 8007090:	4637      	mov	r7, r6
 8007092:	2800      	cmp	r0, #0
 8007094:	f040 8243 	bne.w	800751e <_dtoa_r+0x956>
 8007098:	9d00      	ldr	r5, [sp, #0]
 800709a:	2331      	movs	r3, #49	; 0x31
 800709c:	f805 3b01 	strb.w	r3, [r5], #1
 80070a0:	f10a 0a01 	add.w	sl, sl, #1
 80070a4:	e23f      	b.n	8007526 <_dtoa_r+0x95e>
 80070a6:	07f2      	lsls	r2, r6, #31
 80070a8:	d505      	bpl.n	80070b6 <_dtoa_r+0x4ee>
 80070aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ae:	f7f9 fabb 	bl	8000628 <__aeabi_dmul>
 80070b2:	3501      	adds	r5, #1
 80070b4:	2301      	movs	r3, #1
 80070b6:	1076      	asrs	r6, r6, #1
 80070b8:	3708      	adds	r7, #8
 80070ba:	e76c      	b.n	8006f96 <_dtoa_r+0x3ce>
 80070bc:	2502      	movs	r5, #2
 80070be:	e76f      	b.n	8006fa0 <_dtoa_r+0x3d8>
 80070c0:	9b01      	ldr	r3, [sp, #4]
 80070c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80070c6:	930c      	str	r3, [sp, #48]	; 0x30
 80070c8:	e78d      	b.n	8006fe6 <_dtoa_r+0x41e>
 80070ca:	9900      	ldr	r1, [sp, #0]
 80070cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80070ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070d0:	4b4e      	ldr	r3, [pc, #312]	; (800720c <_dtoa_r+0x644>)
 80070d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070d6:	4401      	add	r1, r0
 80070d8:	9102      	str	r1, [sp, #8]
 80070da:	9908      	ldr	r1, [sp, #32]
 80070dc:	eeb0 8a47 	vmov.f32	s16, s14
 80070e0:	eef0 8a67 	vmov.f32	s17, s15
 80070e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070ec:	2900      	cmp	r1, #0
 80070ee:	d045      	beq.n	800717c <_dtoa_r+0x5b4>
 80070f0:	494c      	ldr	r1, [pc, #304]	; (8007224 <_dtoa_r+0x65c>)
 80070f2:	2000      	movs	r0, #0
 80070f4:	f7f9 fbc2 	bl	800087c <__aeabi_ddiv>
 80070f8:	ec53 2b18 	vmov	r2, r3, d8
 80070fc:	f7f9 f8dc 	bl	80002b8 <__aeabi_dsub>
 8007100:	9d00      	ldr	r5, [sp, #0]
 8007102:	ec41 0b18 	vmov	d8, r0, r1
 8007106:	4639      	mov	r1, r7
 8007108:	4630      	mov	r0, r6
 800710a:	f7f9 fd3d 	bl	8000b88 <__aeabi_d2iz>
 800710e:	900c      	str	r0, [sp, #48]	; 0x30
 8007110:	f7f9 fa20 	bl	8000554 <__aeabi_i2d>
 8007114:	4602      	mov	r2, r0
 8007116:	460b      	mov	r3, r1
 8007118:	4630      	mov	r0, r6
 800711a:	4639      	mov	r1, r7
 800711c:	f7f9 f8cc 	bl	80002b8 <__aeabi_dsub>
 8007120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007122:	3330      	adds	r3, #48	; 0x30
 8007124:	f805 3b01 	strb.w	r3, [r5], #1
 8007128:	ec53 2b18 	vmov	r2, r3, d8
 800712c:	4606      	mov	r6, r0
 800712e:	460f      	mov	r7, r1
 8007130:	f7f9 fcec 	bl	8000b0c <__aeabi_dcmplt>
 8007134:	2800      	cmp	r0, #0
 8007136:	d165      	bne.n	8007204 <_dtoa_r+0x63c>
 8007138:	4632      	mov	r2, r6
 800713a:	463b      	mov	r3, r7
 800713c:	4935      	ldr	r1, [pc, #212]	; (8007214 <_dtoa_r+0x64c>)
 800713e:	2000      	movs	r0, #0
 8007140:	f7f9 f8ba 	bl	80002b8 <__aeabi_dsub>
 8007144:	ec53 2b18 	vmov	r2, r3, d8
 8007148:	f7f9 fce0 	bl	8000b0c <__aeabi_dcmplt>
 800714c:	2800      	cmp	r0, #0
 800714e:	f040 80b9 	bne.w	80072c4 <_dtoa_r+0x6fc>
 8007152:	9b02      	ldr	r3, [sp, #8]
 8007154:	429d      	cmp	r5, r3
 8007156:	f43f af75 	beq.w	8007044 <_dtoa_r+0x47c>
 800715a:	4b2f      	ldr	r3, [pc, #188]	; (8007218 <_dtoa_r+0x650>)
 800715c:	ec51 0b18 	vmov	r0, r1, d8
 8007160:	2200      	movs	r2, #0
 8007162:	f7f9 fa61 	bl	8000628 <__aeabi_dmul>
 8007166:	4b2c      	ldr	r3, [pc, #176]	; (8007218 <_dtoa_r+0x650>)
 8007168:	ec41 0b18 	vmov	d8, r0, r1
 800716c:	2200      	movs	r2, #0
 800716e:	4630      	mov	r0, r6
 8007170:	4639      	mov	r1, r7
 8007172:	f7f9 fa59 	bl	8000628 <__aeabi_dmul>
 8007176:	4606      	mov	r6, r0
 8007178:	460f      	mov	r7, r1
 800717a:	e7c4      	b.n	8007106 <_dtoa_r+0x53e>
 800717c:	ec51 0b17 	vmov	r0, r1, d7
 8007180:	f7f9 fa52 	bl	8000628 <__aeabi_dmul>
 8007184:	9b02      	ldr	r3, [sp, #8]
 8007186:	9d00      	ldr	r5, [sp, #0]
 8007188:	930c      	str	r3, [sp, #48]	; 0x30
 800718a:	ec41 0b18 	vmov	d8, r0, r1
 800718e:	4639      	mov	r1, r7
 8007190:	4630      	mov	r0, r6
 8007192:	f7f9 fcf9 	bl	8000b88 <__aeabi_d2iz>
 8007196:	9011      	str	r0, [sp, #68]	; 0x44
 8007198:	f7f9 f9dc 	bl	8000554 <__aeabi_i2d>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 f888 	bl	80002b8 <__aeabi_dsub>
 80071a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80071aa:	3330      	adds	r3, #48	; 0x30
 80071ac:	f805 3b01 	strb.w	r3, [r5], #1
 80071b0:	9b02      	ldr	r3, [sp, #8]
 80071b2:	429d      	cmp	r5, r3
 80071b4:	4606      	mov	r6, r0
 80071b6:	460f      	mov	r7, r1
 80071b8:	f04f 0200 	mov.w	r2, #0
 80071bc:	d134      	bne.n	8007228 <_dtoa_r+0x660>
 80071be:	4b19      	ldr	r3, [pc, #100]	; (8007224 <_dtoa_r+0x65c>)
 80071c0:	ec51 0b18 	vmov	r0, r1, d8
 80071c4:	f7f9 f87a 	bl	80002bc <__adddf3>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4630      	mov	r0, r6
 80071ce:	4639      	mov	r1, r7
 80071d0:	f7f9 fcba 	bl	8000b48 <__aeabi_dcmpgt>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d175      	bne.n	80072c4 <_dtoa_r+0x6fc>
 80071d8:	ec53 2b18 	vmov	r2, r3, d8
 80071dc:	4911      	ldr	r1, [pc, #68]	; (8007224 <_dtoa_r+0x65c>)
 80071de:	2000      	movs	r0, #0
 80071e0:	f7f9 f86a 	bl	80002b8 <__aeabi_dsub>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4630      	mov	r0, r6
 80071ea:	4639      	mov	r1, r7
 80071ec:	f7f9 fc8e 	bl	8000b0c <__aeabi_dcmplt>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	f43f af27 	beq.w	8007044 <_dtoa_r+0x47c>
 80071f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071f8:	1e6b      	subs	r3, r5, #1
 80071fa:	930c      	str	r3, [sp, #48]	; 0x30
 80071fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007200:	2b30      	cmp	r3, #48	; 0x30
 8007202:	d0f8      	beq.n	80071f6 <_dtoa_r+0x62e>
 8007204:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007208:	e04a      	b.n	80072a0 <_dtoa_r+0x6d8>
 800720a:	bf00      	nop
 800720c:	0800a5c8 	.word	0x0800a5c8
 8007210:	0800a5a0 	.word	0x0800a5a0
 8007214:	3ff00000 	.word	0x3ff00000
 8007218:	40240000 	.word	0x40240000
 800721c:	401c0000 	.word	0x401c0000
 8007220:	40140000 	.word	0x40140000
 8007224:	3fe00000 	.word	0x3fe00000
 8007228:	4baf      	ldr	r3, [pc, #700]	; (80074e8 <_dtoa_r+0x920>)
 800722a:	f7f9 f9fd 	bl	8000628 <__aeabi_dmul>
 800722e:	4606      	mov	r6, r0
 8007230:	460f      	mov	r7, r1
 8007232:	e7ac      	b.n	800718e <_dtoa_r+0x5c6>
 8007234:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007238:	9d00      	ldr	r5, [sp, #0]
 800723a:	4642      	mov	r2, r8
 800723c:	464b      	mov	r3, r9
 800723e:	4630      	mov	r0, r6
 8007240:	4639      	mov	r1, r7
 8007242:	f7f9 fb1b 	bl	800087c <__aeabi_ddiv>
 8007246:	f7f9 fc9f 	bl	8000b88 <__aeabi_d2iz>
 800724a:	9002      	str	r0, [sp, #8]
 800724c:	f7f9 f982 	bl	8000554 <__aeabi_i2d>
 8007250:	4642      	mov	r2, r8
 8007252:	464b      	mov	r3, r9
 8007254:	f7f9 f9e8 	bl	8000628 <__aeabi_dmul>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4630      	mov	r0, r6
 800725e:	4639      	mov	r1, r7
 8007260:	f7f9 f82a 	bl	80002b8 <__aeabi_dsub>
 8007264:	9e02      	ldr	r6, [sp, #8]
 8007266:	9f01      	ldr	r7, [sp, #4]
 8007268:	3630      	adds	r6, #48	; 0x30
 800726a:	f805 6b01 	strb.w	r6, [r5], #1
 800726e:	9e00      	ldr	r6, [sp, #0]
 8007270:	1bae      	subs	r6, r5, r6
 8007272:	42b7      	cmp	r7, r6
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	d137      	bne.n	80072ea <_dtoa_r+0x722>
 800727a:	f7f9 f81f 	bl	80002bc <__adddf3>
 800727e:	4642      	mov	r2, r8
 8007280:	464b      	mov	r3, r9
 8007282:	4606      	mov	r6, r0
 8007284:	460f      	mov	r7, r1
 8007286:	f7f9 fc5f 	bl	8000b48 <__aeabi_dcmpgt>
 800728a:	b9c8      	cbnz	r0, 80072c0 <_dtoa_r+0x6f8>
 800728c:	4642      	mov	r2, r8
 800728e:	464b      	mov	r3, r9
 8007290:	4630      	mov	r0, r6
 8007292:	4639      	mov	r1, r7
 8007294:	f7f9 fc30 	bl	8000af8 <__aeabi_dcmpeq>
 8007298:	b110      	cbz	r0, 80072a0 <_dtoa_r+0x6d8>
 800729a:	9b02      	ldr	r3, [sp, #8]
 800729c:	07d9      	lsls	r1, r3, #31
 800729e:	d40f      	bmi.n	80072c0 <_dtoa_r+0x6f8>
 80072a0:	4620      	mov	r0, r4
 80072a2:	4659      	mov	r1, fp
 80072a4:	f000 fe6a 	bl	8007f7c <_Bfree>
 80072a8:	2300      	movs	r3, #0
 80072aa:	702b      	strb	r3, [r5, #0]
 80072ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072ae:	f10a 0001 	add.w	r0, sl, #1
 80072b2:	6018      	str	r0, [r3, #0]
 80072b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f43f acd8 	beq.w	8006c6c <_dtoa_r+0xa4>
 80072bc:	601d      	str	r5, [r3, #0]
 80072be:	e4d5      	b.n	8006c6c <_dtoa_r+0xa4>
 80072c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80072c4:	462b      	mov	r3, r5
 80072c6:	461d      	mov	r5, r3
 80072c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072cc:	2a39      	cmp	r2, #57	; 0x39
 80072ce:	d108      	bne.n	80072e2 <_dtoa_r+0x71a>
 80072d0:	9a00      	ldr	r2, [sp, #0]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d1f7      	bne.n	80072c6 <_dtoa_r+0x6fe>
 80072d6:	9a07      	ldr	r2, [sp, #28]
 80072d8:	9900      	ldr	r1, [sp, #0]
 80072da:	3201      	adds	r2, #1
 80072dc:	9207      	str	r2, [sp, #28]
 80072de:	2230      	movs	r2, #48	; 0x30
 80072e0:	700a      	strb	r2, [r1, #0]
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	3201      	adds	r2, #1
 80072e6:	701a      	strb	r2, [r3, #0]
 80072e8:	e78c      	b.n	8007204 <_dtoa_r+0x63c>
 80072ea:	4b7f      	ldr	r3, [pc, #508]	; (80074e8 <_dtoa_r+0x920>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	f7f9 f99b 	bl	8000628 <__aeabi_dmul>
 80072f2:	2200      	movs	r2, #0
 80072f4:	2300      	movs	r3, #0
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	f7f9 fbfd 	bl	8000af8 <__aeabi_dcmpeq>
 80072fe:	2800      	cmp	r0, #0
 8007300:	d09b      	beq.n	800723a <_dtoa_r+0x672>
 8007302:	e7cd      	b.n	80072a0 <_dtoa_r+0x6d8>
 8007304:	9a08      	ldr	r2, [sp, #32]
 8007306:	2a00      	cmp	r2, #0
 8007308:	f000 80c4 	beq.w	8007494 <_dtoa_r+0x8cc>
 800730c:	9a05      	ldr	r2, [sp, #20]
 800730e:	2a01      	cmp	r2, #1
 8007310:	f300 80a8 	bgt.w	8007464 <_dtoa_r+0x89c>
 8007314:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007316:	2a00      	cmp	r2, #0
 8007318:	f000 80a0 	beq.w	800745c <_dtoa_r+0x894>
 800731c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007320:	9e06      	ldr	r6, [sp, #24]
 8007322:	4645      	mov	r5, r8
 8007324:	9a04      	ldr	r2, [sp, #16]
 8007326:	2101      	movs	r1, #1
 8007328:	441a      	add	r2, r3
 800732a:	4620      	mov	r0, r4
 800732c:	4498      	add	r8, r3
 800732e:	9204      	str	r2, [sp, #16]
 8007330:	f000 ff2a 	bl	8008188 <__i2b>
 8007334:	4607      	mov	r7, r0
 8007336:	2d00      	cmp	r5, #0
 8007338:	dd0b      	ble.n	8007352 <_dtoa_r+0x78a>
 800733a:	9b04      	ldr	r3, [sp, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	dd08      	ble.n	8007352 <_dtoa_r+0x78a>
 8007340:	42ab      	cmp	r3, r5
 8007342:	9a04      	ldr	r2, [sp, #16]
 8007344:	bfa8      	it	ge
 8007346:	462b      	movge	r3, r5
 8007348:	eba8 0803 	sub.w	r8, r8, r3
 800734c:	1aed      	subs	r5, r5, r3
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	9304      	str	r3, [sp, #16]
 8007352:	9b06      	ldr	r3, [sp, #24]
 8007354:	b1fb      	cbz	r3, 8007396 <_dtoa_r+0x7ce>
 8007356:	9b08      	ldr	r3, [sp, #32]
 8007358:	2b00      	cmp	r3, #0
 800735a:	f000 809f 	beq.w	800749c <_dtoa_r+0x8d4>
 800735e:	2e00      	cmp	r6, #0
 8007360:	dd11      	ble.n	8007386 <_dtoa_r+0x7be>
 8007362:	4639      	mov	r1, r7
 8007364:	4632      	mov	r2, r6
 8007366:	4620      	mov	r0, r4
 8007368:	f000 ffca 	bl	8008300 <__pow5mult>
 800736c:	465a      	mov	r2, fp
 800736e:	4601      	mov	r1, r0
 8007370:	4607      	mov	r7, r0
 8007372:	4620      	mov	r0, r4
 8007374:	f000 ff1e 	bl	80081b4 <__multiply>
 8007378:	4659      	mov	r1, fp
 800737a:	9007      	str	r0, [sp, #28]
 800737c:	4620      	mov	r0, r4
 800737e:	f000 fdfd 	bl	8007f7c <_Bfree>
 8007382:	9b07      	ldr	r3, [sp, #28]
 8007384:	469b      	mov	fp, r3
 8007386:	9b06      	ldr	r3, [sp, #24]
 8007388:	1b9a      	subs	r2, r3, r6
 800738a:	d004      	beq.n	8007396 <_dtoa_r+0x7ce>
 800738c:	4659      	mov	r1, fp
 800738e:	4620      	mov	r0, r4
 8007390:	f000 ffb6 	bl	8008300 <__pow5mult>
 8007394:	4683      	mov	fp, r0
 8007396:	2101      	movs	r1, #1
 8007398:	4620      	mov	r0, r4
 800739a:	f000 fef5 	bl	8008188 <__i2b>
 800739e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	4606      	mov	r6, r0
 80073a4:	dd7c      	ble.n	80074a0 <_dtoa_r+0x8d8>
 80073a6:	461a      	mov	r2, r3
 80073a8:	4601      	mov	r1, r0
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 ffa8 	bl	8008300 <__pow5mult>
 80073b0:	9b05      	ldr	r3, [sp, #20]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	4606      	mov	r6, r0
 80073b6:	dd76      	ble.n	80074a6 <_dtoa_r+0x8de>
 80073b8:	2300      	movs	r3, #0
 80073ba:	9306      	str	r3, [sp, #24]
 80073bc:	6933      	ldr	r3, [r6, #16]
 80073be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80073c2:	6918      	ldr	r0, [r3, #16]
 80073c4:	f000 fe90 	bl	80080e8 <__hi0bits>
 80073c8:	f1c0 0020 	rsb	r0, r0, #32
 80073cc:	9b04      	ldr	r3, [sp, #16]
 80073ce:	4418      	add	r0, r3
 80073d0:	f010 001f 	ands.w	r0, r0, #31
 80073d4:	f000 8086 	beq.w	80074e4 <_dtoa_r+0x91c>
 80073d8:	f1c0 0320 	rsb	r3, r0, #32
 80073dc:	2b04      	cmp	r3, #4
 80073de:	dd7f      	ble.n	80074e0 <_dtoa_r+0x918>
 80073e0:	f1c0 001c 	rsb	r0, r0, #28
 80073e4:	9b04      	ldr	r3, [sp, #16]
 80073e6:	4403      	add	r3, r0
 80073e8:	4480      	add	r8, r0
 80073ea:	4405      	add	r5, r0
 80073ec:	9304      	str	r3, [sp, #16]
 80073ee:	f1b8 0f00 	cmp.w	r8, #0
 80073f2:	dd05      	ble.n	8007400 <_dtoa_r+0x838>
 80073f4:	4659      	mov	r1, fp
 80073f6:	4642      	mov	r2, r8
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 ffdb 	bl	80083b4 <__lshift>
 80073fe:	4683      	mov	fp, r0
 8007400:	9b04      	ldr	r3, [sp, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	dd05      	ble.n	8007412 <_dtoa_r+0x84a>
 8007406:	4631      	mov	r1, r6
 8007408:	461a      	mov	r2, r3
 800740a:	4620      	mov	r0, r4
 800740c:	f000 ffd2 	bl	80083b4 <__lshift>
 8007410:	4606      	mov	r6, r0
 8007412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007414:	2b00      	cmp	r3, #0
 8007416:	d069      	beq.n	80074ec <_dtoa_r+0x924>
 8007418:	4631      	mov	r1, r6
 800741a:	4658      	mov	r0, fp
 800741c:	f001 f836 	bl	800848c <__mcmp>
 8007420:	2800      	cmp	r0, #0
 8007422:	da63      	bge.n	80074ec <_dtoa_r+0x924>
 8007424:	2300      	movs	r3, #0
 8007426:	4659      	mov	r1, fp
 8007428:	220a      	movs	r2, #10
 800742a:	4620      	mov	r0, r4
 800742c:	f000 fdc8 	bl	8007fc0 <__multadd>
 8007430:	9b08      	ldr	r3, [sp, #32]
 8007432:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007436:	4683      	mov	fp, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 818f 	beq.w	800775c <_dtoa_r+0xb94>
 800743e:	4639      	mov	r1, r7
 8007440:	2300      	movs	r3, #0
 8007442:	220a      	movs	r2, #10
 8007444:	4620      	mov	r0, r4
 8007446:	f000 fdbb 	bl	8007fc0 <__multadd>
 800744a:	f1b9 0f00 	cmp.w	r9, #0
 800744e:	4607      	mov	r7, r0
 8007450:	f300 808e 	bgt.w	8007570 <_dtoa_r+0x9a8>
 8007454:	9b05      	ldr	r3, [sp, #20]
 8007456:	2b02      	cmp	r3, #2
 8007458:	dc50      	bgt.n	80074fc <_dtoa_r+0x934>
 800745a:	e089      	b.n	8007570 <_dtoa_r+0x9a8>
 800745c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800745e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007462:	e75d      	b.n	8007320 <_dtoa_r+0x758>
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	1e5e      	subs	r6, r3, #1
 8007468:	9b06      	ldr	r3, [sp, #24]
 800746a:	42b3      	cmp	r3, r6
 800746c:	bfbf      	itttt	lt
 800746e:	9b06      	ldrlt	r3, [sp, #24]
 8007470:	9606      	strlt	r6, [sp, #24]
 8007472:	1af2      	sublt	r2, r6, r3
 8007474:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007476:	bfb6      	itet	lt
 8007478:	189b      	addlt	r3, r3, r2
 800747a:	1b9e      	subge	r6, r3, r6
 800747c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	bfb8      	it	lt
 8007482:	2600      	movlt	r6, #0
 8007484:	2b00      	cmp	r3, #0
 8007486:	bfb5      	itete	lt
 8007488:	eba8 0503 	sublt.w	r5, r8, r3
 800748c:	9b01      	ldrge	r3, [sp, #4]
 800748e:	2300      	movlt	r3, #0
 8007490:	4645      	movge	r5, r8
 8007492:	e747      	b.n	8007324 <_dtoa_r+0x75c>
 8007494:	9e06      	ldr	r6, [sp, #24]
 8007496:	9f08      	ldr	r7, [sp, #32]
 8007498:	4645      	mov	r5, r8
 800749a:	e74c      	b.n	8007336 <_dtoa_r+0x76e>
 800749c:	9a06      	ldr	r2, [sp, #24]
 800749e:	e775      	b.n	800738c <_dtoa_r+0x7c4>
 80074a0:	9b05      	ldr	r3, [sp, #20]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	dc18      	bgt.n	80074d8 <_dtoa_r+0x910>
 80074a6:	9b02      	ldr	r3, [sp, #8]
 80074a8:	b9b3      	cbnz	r3, 80074d8 <_dtoa_r+0x910>
 80074aa:	9b03      	ldr	r3, [sp, #12]
 80074ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074b0:	b9a3      	cbnz	r3, 80074dc <_dtoa_r+0x914>
 80074b2:	9b03      	ldr	r3, [sp, #12]
 80074b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074b8:	0d1b      	lsrs	r3, r3, #20
 80074ba:	051b      	lsls	r3, r3, #20
 80074bc:	b12b      	cbz	r3, 80074ca <_dtoa_r+0x902>
 80074be:	9b04      	ldr	r3, [sp, #16]
 80074c0:	3301      	adds	r3, #1
 80074c2:	9304      	str	r3, [sp, #16]
 80074c4:	f108 0801 	add.w	r8, r8, #1
 80074c8:	2301      	movs	r3, #1
 80074ca:	9306      	str	r3, [sp, #24]
 80074cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f47f af74 	bne.w	80073bc <_dtoa_r+0x7f4>
 80074d4:	2001      	movs	r0, #1
 80074d6:	e779      	b.n	80073cc <_dtoa_r+0x804>
 80074d8:	2300      	movs	r3, #0
 80074da:	e7f6      	b.n	80074ca <_dtoa_r+0x902>
 80074dc:	9b02      	ldr	r3, [sp, #8]
 80074de:	e7f4      	b.n	80074ca <_dtoa_r+0x902>
 80074e0:	d085      	beq.n	80073ee <_dtoa_r+0x826>
 80074e2:	4618      	mov	r0, r3
 80074e4:	301c      	adds	r0, #28
 80074e6:	e77d      	b.n	80073e4 <_dtoa_r+0x81c>
 80074e8:	40240000 	.word	0x40240000
 80074ec:	9b01      	ldr	r3, [sp, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	dc38      	bgt.n	8007564 <_dtoa_r+0x99c>
 80074f2:	9b05      	ldr	r3, [sp, #20]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	dd35      	ble.n	8007564 <_dtoa_r+0x99c>
 80074f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80074fc:	f1b9 0f00 	cmp.w	r9, #0
 8007500:	d10d      	bne.n	800751e <_dtoa_r+0x956>
 8007502:	4631      	mov	r1, r6
 8007504:	464b      	mov	r3, r9
 8007506:	2205      	movs	r2, #5
 8007508:	4620      	mov	r0, r4
 800750a:	f000 fd59 	bl	8007fc0 <__multadd>
 800750e:	4601      	mov	r1, r0
 8007510:	4606      	mov	r6, r0
 8007512:	4658      	mov	r0, fp
 8007514:	f000 ffba 	bl	800848c <__mcmp>
 8007518:	2800      	cmp	r0, #0
 800751a:	f73f adbd 	bgt.w	8007098 <_dtoa_r+0x4d0>
 800751e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007520:	9d00      	ldr	r5, [sp, #0]
 8007522:	ea6f 0a03 	mvn.w	sl, r3
 8007526:	f04f 0800 	mov.w	r8, #0
 800752a:	4631      	mov	r1, r6
 800752c:	4620      	mov	r0, r4
 800752e:	f000 fd25 	bl	8007f7c <_Bfree>
 8007532:	2f00      	cmp	r7, #0
 8007534:	f43f aeb4 	beq.w	80072a0 <_dtoa_r+0x6d8>
 8007538:	f1b8 0f00 	cmp.w	r8, #0
 800753c:	d005      	beq.n	800754a <_dtoa_r+0x982>
 800753e:	45b8      	cmp	r8, r7
 8007540:	d003      	beq.n	800754a <_dtoa_r+0x982>
 8007542:	4641      	mov	r1, r8
 8007544:	4620      	mov	r0, r4
 8007546:	f000 fd19 	bl	8007f7c <_Bfree>
 800754a:	4639      	mov	r1, r7
 800754c:	4620      	mov	r0, r4
 800754e:	f000 fd15 	bl	8007f7c <_Bfree>
 8007552:	e6a5      	b.n	80072a0 <_dtoa_r+0x6d8>
 8007554:	2600      	movs	r6, #0
 8007556:	4637      	mov	r7, r6
 8007558:	e7e1      	b.n	800751e <_dtoa_r+0x956>
 800755a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800755c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007560:	4637      	mov	r7, r6
 8007562:	e599      	b.n	8007098 <_dtoa_r+0x4d0>
 8007564:	9b08      	ldr	r3, [sp, #32]
 8007566:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	f000 80fd 	beq.w	800776a <_dtoa_r+0xba2>
 8007570:	2d00      	cmp	r5, #0
 8007572:	dd05      	ble.n	8007580 <_dtoa_r+0x9b8>
 8007574:	4639      	mov	r1, r7
 8007576:	462a      	mov	r2, r5
 8007578:	4620      	mov	r0, r4
 800757a:	f000 ff1b 	bl	80083b4 <__lshift>
 800757e:	4607      	mov	r7, r0
 8007580:	9b06      	ldr	r3, [sp, #24]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d05c      	beq.n	8007640 <_dtoa_r+0xa78>
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	4620      	mov	r0, r4
 800758a:	f000 fcb7 	bl	8007efc <_Balloc>
 800758e:	4605      	mov	r5, r0
 8007590:	b928      	cbnz	r0, 800759e <_dtoa_r+0x9d6>
 8007592:	4b80      	ldr	r3, [pc, #512]	; (8007794 <_dtoa_r+0xbcc>)
 8007594:	4602      	mov	r2, r0
 8007596:	f240 21ea 	movw	r1, #746	; 0x2ea
 800759a:	f7ff bb2e 	b.w	8006bfa <_dtoa_r+0x32>
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	3202      	adds	r2, #2
 80075a2:	0092      	lsls	r2, r2, #2
 80075a4:	f107 010c 	add.w	r1, r7, #12
 80075a8:	300c      	adds	r0, #12
 80075aa:	f000 fc99 	bl	8007ee0 <memcpy>
 80075ae:	2201      	movs	r2, #1
 80075b0:	4629      	mov	r1, r5
 80075b2:	4620      	mov	r0, r4
 80075b4:	f000 fefe 	bl	80083b4 <__lshift>
 80075b8:	9b00      	ldr	r3, [sp, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	9b00      	ldr	r3, [sp, #0]
 80075c0:	444b      	add	r3, r9
 80075c2:	9307      	str	r3, [sp, #28]
 80075c4:	9b02      	ldr	r3, [sp, #8]
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	46b8      	mov	r8, r7
 80075cc:	9306      	str	r3, [sp, #24]
 80075ce:	4607      	mov	r7, r0
 80075d0:	9b01      	ldr	r3, [sp, #4]
 80075d2:	4631      	mov	r1, r6
 80075d4:	3b01      	subs	r3, #1
 80075d6:	4658      	mov	r0, fp
 80075d8:	9302      	str	r3, [sp, #8]
 80075da:	f7ff fa69 	bl	8006ab0 <quorem>
 80075de:	4603      	mov	r3, r0
 80075e0:	3330      	adds	r3, #48	; 0x30
 80075e2:	9004      	str	r0, [sp, #16]
 80075e4:	4641      	mov	r1, r8
 80075e6:	4658      	mov	r0, fp
 80075e8:	9308      	str	r3, [sp, #32]
 80075ea:	f000 ff4f 	bl	800848c <__mcmp>
 80075ee:	463a      	mov	r2, r7
 80075f0:	4681      	mov	r9, r0
 80075f2:	4631      	mov	r1, r6
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 ff65 	bl	80084c4 <__mdiff>
 80075fa:	68c2      	ldr	r2, [r0, #12]
 80075fc:	9b08      	ldr	r3, [sp, #32]
 80075fe:	4605      	mov	r5, r0
 8007600:	bb02      	cbnz	r2, 8007644 <_dtoa_r+0xa7c>
 8007602:	4601      	mov	r1, r0
 8007604:	4658      	mov	r0, fp
 8007606:	f000 ff41 	bl	800848c <__mcmp>
 800760a:	9b08      	ldr	r3, [sp, #32]
 800760c:	4602      	mov	r2, r0
 800760e:	4629      	mov	r1, r5
 8007610:	4620      	mov	r0, r4
 8007612:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007616:	f000 fcb1 	bl	8007f7c <_Bfree>
 800761a:	9b05      	ldr	r3, [sp, #20]
 800761c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800761e:	9d01      	ldr	r5, [sp, #4]
 8007620:	ea43 0102 	orr.w	r1, r3, r2
 8007624:	9b06      	ldr	r3, [sp, #24]
 8007626:	430b      	orrs	r3, r1
 8007628:	9b08      	ldr	r3, [sp, #32]
 800762a:	d10d      	bne.n	8007648 <_dtoa_r+0xa80>
 800762c:	2b39      	cmp	r3, #57	; 0x39
 800762e:	d029      	beq.n	8007684 <_dtoa_r+0xabc>
 8007630:	f1b9 0f00 	cmp.w	r9, #0
 8007634:	dd01      	ble.n	800763a <_dtoa_r+0xa72>
 8007636:	9b04      	ldr	r3, [sp, #16]
 8007638:	3331      	adds	r3, #49	; 0x31
 800763a:	9a02      	ldr	r2, [sp, #8]
 800763c:	7013      	strb	r3, [r2, #0]
 800763e:	e774      	b.n	800752a <_dtoa_r+0x962>
 8007640:	4638      	mov	r0, r7
 8007642:	e7b9      	b.n	80075b8 <_dtoa_r+0x9f0>
 8007644:	2201      	movs	r2, #1
 8007646:	e7e2      	b.n	800760e <_dtoa_r+0xa46>
 8007648:	f1b9 0f00 	cmp.w	r9, #0
 800764c:	db06      	blt.n	800765c <_dtoa_r+0xa94>
 800764e:	9905      	ldr	r1, [sp, #20]
 8007650:	ea41 0909 	orr.w	r9, r1, r9
 8007654:	9906      	ldr	r1, [sp, #24]
 8007656:	ea59 0101 	orrs.w	r1, r9, r1
 800765a:	d120      	bne.n	800769e <_dtoa_r+0xad6>
 800765c:	2a00      	cmp	r2, #0
 800765e:	ddec      	ble.n	800763a <_dtoa_r+0xa72>
 8007660:	4659      	mov	r1, fp
 8007662:	2201      	movs	r2, #1
 8007664:	4620      	mov	r0, r4
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	f000 fea4 	bl	80083b4 <__lshift>
 800766c:	4631      	mov	r1, r6
 800766e:	4683      	mov	fp, r0
 8007670:	f000 ff0c 	bl	800848c <__mcmp>
 8007674:	2800      	cmp	r0, #0
 8007676:	9b01      	ldr	r3, [sp, #4]
 8007678:	dc02      	bgt.n	8007680 <_dtoa_r+0xab8>
 800767a:	d1de      	bne.n	800763a <_dtoa_r+0xa72>
 800767c:	07da      	lsls	r2, r3, #31
 800767e:	d5dc      	bpl.n	800763a <_dtoa_r+0xa72>
 8007680:	2b39      	cmp	r3, #57	; 0x39
 8007682:	d1d8      	bne.n	8007636 <_dtoa_r+0xa6e>
 8007684:	9a02      	ldr	r2, [sp, #8]
 8007686:	2339      	movs	r3, #57	; 0x39
 8007688:	7013      	strb	r3, [r2, #0]
 800768a:	462b      	mov	r3, r5
 800768c:	461d      	mov	r5, r3
 800768e:	3b01      	subs	r3, #1
 8007690:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007694:	2a39      	cmp	r2, #57	; 0x39
 8007696:	d050      	beq.n	800773a <_dtoa_r+0xb72>
 8007698:	3201      	adds	r2, #1
 800769a:	701a      	strb	r2, [r3, #0]
 800769c:	e745      	b.n	800752a <_dtoa_r+0x962>
 800769e:	2a00      	cmp	r2, #0
 80076a0:	dd03      	ble.n	80076aa <_dtoa_r+0xae2>
 80076a2:	2b39      	cmp	r3, #57	; 0x39
 80076a4:	d0ee      	beq.n	8007684 <_dtoa_r+0xabc>
 80076a6:	3301      	adds	r3, #1
 80076a8:	e7c7      	b.n	800763a <_dtoa_r+0xa72>
 80076aa:	9a01      	ldr	r2, [sp, #4]
 80076ac:	9907      	ldr	r1, [sp, #28]
 80076ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80076b2:	428a      	cmp	r2, r1
 80076b4:	d02a      	beq.n	800770c <_dtoa_r+0xb44>
 80076b6:	4659      	mov	r1, fp
 80076b8:	2300      	movs	r3, #0
 80076ba:	220a      	movs	r2, #10
 80076bc:	4620      	mov	r0, r4
 80076be:	f000 fc7f 	bl	8007fc0 <__multadd>
 80076c2:	45b8      	cmp	r8, r7
 80076c4:	4683      	mov	fp, r0
 80076c6:	f04f 0300 	mov.w	r3, #0
 80076ca:	f04f 020a 	mov.w	r2, #10
 80076ce:	4641      	mov	r1, r8
 80076d0:	4620      	mov	r0, r4
 80076d2:	d107      	bne.n	80076e4 <_dtoa_r+0xb1c>
 80076d4:	f000 fc74 	bl	8007fc0 <__multadd>
 80076d8:	4680      	mov	r8, r0
 80076da:	4607      	mov	r7, r0
 80076dc:	9b01      	ldr	r3, [sp, #4]
 80076de:	3301      	adds	r3, #1
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	e775      	b.n	80075d0 <_dtoa_r+0xa08>
 80076e4:	f000 fc6c 	bl	8007fc0 <__multadd>
 80076e8:	4639      	mov	r1, r7
 80076ea:	4680      	mov	r8, r0
 80076ec:	2300      	movs	r3, #0
 80076ee:	220a      	movs	r2, #10
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fc65 	bl	8007fc0 <__multadd>
 80076f6:	4607      	mov	r7, r0
 80076f8:	e7f0      	b.n	80076dc <_dtoa_r+0xb14>
 80076fa:	f1b9 0f00 	cmp.w	r9, #0
 80076fe:	9a00      	ldr	r2, [sp, #0]
 8007700:	bfcc      	ite	gt
 8007702:	464d      	movgt	r5, r9
 8007704:	2501      	movle	r5, #1
 8007706:	4415      	add	r5, r2
 8007708:	f04f 0800 	mov.w	r8, #0
 800770c:	4659      	mov	r1, fp
 800770e:	2201      	movs	r2, #1
 8007710:	4620      	mov	r0, r4
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	f000 fe4e 	bl	80083b4 <__lshift>
 8007718:	4631      	mov	r1, r6
 800771a:	4683      	mov	fp, r0
 800771c:	f000 feb6 	bl	800848c <__mcmp>
 8007720:	2800      	cmp	r0, #0
 8007722:	dcb2      	bgt.n	800768a <_dtoa_r+0xac2>
 8007724:	d102      	bne.n	800772c <_dtoa_r+0xb64>
 8007726:	9b01      	ldr	r3, [sp, #4]
 8007728:	07db      	lsls	r3, r3, #31
 800772a:	d4ae      	bmi.n	800768a <_dtoa_r+0xac2>
 800772c:	462b      	mov	r3, r5
 800772e:	461d      	mov	r5, r3
 8007730:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007734:	2a30      	cmp	r2, #48	; 0x30
 8007736:	d0fa      	beq.n	800772e <_dtoa_r+0xb66>
 8007738:	e6f7      	b.n	800752a <_dtoa_r+0x962>
 800773a:	9a00      	ldr	r2, [sp, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d1a5      	bne.n	800768c <_dtoa_r+0xac4>
 8007740:	f10a 0a01 	add.w	sl, sl, #1
 8007744:	2331      	movs	r3, #49	; 0x31
 8007746:	e779      	b.n	800763c <_dtoa_r+0xa74>
 8007748:	4b13      	ldr	r3, [pc, #76]	; (8007798 <_dtoa_r+0xbd0>)
 800774a:	f7ff baaf 	b.w	8006cac <_dtoa_r+0xe4>
 800774e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007750:	2b00      	cmp	r3, #0
 8007752:	f47f aa86 	bne.w	8006c62 <_dtoa_r+0x9a>
 8007756:	4b11      	ldr	r3, [pc, #68]	; (800779c <_dtoa_r+0xbd4>)
 8007758:	f7ff baa8 	b.w	8006cac <_dtoa_r+0xe4>
 800775c:	f1b9 0f00 	cmp.w	r9, #0
 8007760:	dc03      	bgt.n	800776a <_dtoa_r+0xba2>
 8007762:	9b05      	ldr	r3, [sp, #20]
 8007764:	2b02      	cmp	r3, #2
 8007766:	f73f aec9 	bgt.w	80074fc <_dtoa_r+0x934>
 800776a:	9d00      	ldr	r5, [sp, #0]
 800776c:	4631      	mov	r1, r6
 800776e:	4658      	mov	r0, fp
 8007770:	f7ff f99e 	bl	8006ab0 <quorem>
 8007774:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007778:	f805 3b01 	strb.w	r3, [r5], #1
 800777c:	9a00      	ldr	r2, [sp, #0]
 800777e:	1aaa      	subs	r2, r5, r2
 8007780:	4591      	cmp	r9, r2
 8007782:	ddba      	ble.n	80076fa <_dtoa_r+0xb32>
 8007784:	4659      	mov	r1, fp
 8007786:	2300      	movs	r3, #0
 8007788:	220a      	movs	r2, #10
 800778a:	4620      	mov	r0, r4
 800778c:	f000 fc18 	bl	8007fc0 <__multadd>
 8007790:	4683      	mov	fp, r0
 8007792:	e7eb      	b.n	800776c <_dtoa_r+0xba4>
 8007794:	0800a4ac 	.word	0x0800a4ac
 8007798:	0800a6b1 	.word	0x0800a6b1
 800779c:	0800a429 	.word	0x0800a429

080077a0 <rshift>:
 80077a0:	6903      	ldr	r3, [r0, #16]
 80077a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80077a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 80077ae:	f100 0414 	add.w	r4, r0, #20
 80077b2:	dd45      	ble.n	8007840 <rshift+0xa0>
 80077b4:	f011 011f 	ands.w	r1, r1, #31
 80077b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80077bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80077c0:	d10c      	bne.n	80077dc <rshift+0x3c>
 80077c2:	f100 0710 	add.w	r7, r0, #16
 80077c6:	4629      	mov	r1, r5
 80077c8:	42b1      	cmp	r1, r6
 80077ca:	d334      	bcc.n	8007836 <rshift+0x96>
 80077cc:	1a9b      	subs	r3, r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	1eea      	subs	r2, r5, #3
 80077d2:	4296      	cmp	r6, r2
 80077d4:	bf38      	it	cc
 80077d6:	2300      	movcc	r3, #0
 80077d8:	4423      	add	r3, r4
 80077da:	e015      	b.n	8007808 <rshift+0x68>
 80077dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80077e0:	f1c1 0820 	rsb	r8, r1, #32
 80077e4:	40cf      	lsrs	r7, r1
 80077e6:	f105 0e04 	add.w	lr, r5, #4
 80077ea:	46a1      	mov	r9, r4
 80077ec:	4576      	cmp	r6, lr
 80077ee:	46f4      	mov	ip, lr
 80077f0:	d815      	bhi.n	800781e <rshift+0x7e>
 80077f2:	1a9b      	subs	r3, r3, r2
 80077f4:	009a      	lsls	r2, r3, #2
 80077f6:	3a04      	subs	r2, #4
 80077f8:	3501      	adds	r5, #1
 80077fa:	42ae      	cmp	r6, r5
 80077fc:	bf38      	it	cc
 80077fe:	2200      	movcc	r2, #0
 8007800:	18a3      	adds	r3, r4, r2
 8007802:	50a7      	str	r7, [r4, r2]
 8007804:	b107      	cbz	r7, 8007808 <rshift+0x68>
 8007806:	3304      	adds	r3, #4
 8007808:	1b1a      	subs	r2, r3, r4
 800780a:	42a3      	cmp	r3, r4
 800780c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007810:	bf08      	it	eq
 8007812:	2300      	moveq	r3, #0
 8007814:	6102      	str	r2, [r0, #16]
 8007816:	bf08      	it	eq
 8007818:	6143      	streq	r3, [r0, #20]
 800781a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800781e:	f8dc c000 	ldr.w	ip, [ip]
 8007822:	fa0c fc08 	lsl.w	ip, ip, r8
 8007826:	ea4c 0707 	orr.w	r7, ip, r7
 800782a:	f849 7b04 	str.w	r7, [r9], #4
 800782e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007832:	40cf      	lsrs	r7, r1
 8007834:	e7da      	b.n	80077ec <rshift+0x4c>
 8007836:	f851 cb04 	ldr.w	ip, [r1], #4
 800783a:	f847 cf04 	str.w	ip, [r7, #4]!
 800783e:	e7c3      	b.n	80077c8 <rshift+0x28>
 8007840:	4623      	mov	r3, r4
 8007842:	e7e1      	b.n	8007808 <rshift+0x68>

08007844 <__hexdig_fun>:
 8007844:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007848:	2b09      	cmp	r3, #9
 800784a:	d802      	bhi.n	8007852 <__hexdig_fun+0xe>
 800784c:	3820      	subs	r0, #32
 800784e:	b2c0      	uxtb	r0, r0
 8007850:	4770      	bx	lr
 8007852:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007856:	2b05      	cmp	r3, #5
 8007858:	d801      	bhi.n	800785e <__hexdig_fun+0x1a>
 800785a:	3847      	subs	r0, #71	; 0x47
 800785c:	e7f7      	b.n	800784e <__hexdig_fun+0xa>
 800785e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007862:	2b05      	cmp	r3, #5
 8007864:	d801      	bhi.n	800786a <__hexdig_fun+0x26>
 8007866:	3827      	subs	r0, #39	; 0x27
 8007868:	e7f1      	b.n	800784e <__hexdig_fun+0xa>
 800786a:	2000      	movs	r0, #0
 800786c:	4770      	bx	lr
	...

08007870 <__gethex>:
 8007870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007874:	ed2d 8b02 	vpush	{d8}
 8007878:	b089      	sub	sp, #36	; 0x24
 800787a:	ee08 0a10 	vmov	s16, r0
 800787e:	9304      	str	r3, [sp, #16]
 8007880:	4bbc      	ldr	r3, [pc, #752]	; (8007b74 <__gethex+0x304>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	4618      	mov	r0, r3
 8007888:	468b      	mov	fp, r1
 800788a:	4690      	mov	r8, r2
 800788c:	f7f8 fcb2 	bl	80001f4 <strlen>
 8007890:	9b01      	ldr	r3, [sp, #4]
 8007892:	f8db 2000 	ldr.w	r2, [fp]
 8007896:	4403      	add	r3, r0
 8007898:	4682      	mov	sl, r0
 800789a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800789e:	9305      	str	r3, [sp, #20]
 80078a0:	1c93      	adds	r3, r2, #2
 80078a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80078a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80078aa:	32fe      	adds	r2, #254	; 0xfe
 80078ac:	18d1      	adds	r1, r2, r3
 80078ae:	461f      	mov	r7, r3
 80078b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80078b4:	9100      	str	r1, [sp, #0]
 80078b6:	2830      	cmp	r0, #48	; 0x30
 80078b8:	d0f8      	beq.n	80078ac <__gethex+0x3c>
 80078ba:	f7ff ffc3 	bl	8007844 <__hexdig_fun>
 80078be:	4604      	mov	r4, r0
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d13a      	bne.n	800793a <__gethex+0xca>
 80078c4:	9901      	ldr	r1, [sp, #4]
 80078c6:	4652      	mov	r2, sl
 80078c8:	4638      	mov	r0, r7
 80078ca:	f001 fd61 	bl	8009390 <strncmp>
 80078ce:	4605      	mov	r5, r0
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d168      	bne.n	80079a6 <__gethex+0x136>
 80078d4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80078d8:	eb07 060a 	add.w	r6, r7, sl
 80078dc:	f7ff ffb2 	bl	8007844 <__hexdig_fun>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	d062      	beq.n	80079aa <__gethex+0x13a>
 80078e4:	4633      	mov	r3, r6
 80078e6:	7818      	ldrb	r0, [r3, #0]
 80078e8:	2830      	cmp	r0, #48	; 0x30
 80078ea:	461f      	mov	r7, r3
 80078ec:	f103 0301 	add.w	r3, r3, #1
 80078f0:	d0f9      	beq.n	80078e6 <__gethex+0x76>
 80078f2:	f7ff ffa7 	bl	8007844 <__hexdig_fun>
 80078f6:	2301      	movs	r3, #1
 80078f8:	fab0 f480 	clz	r4, r0
 80078fc:	0964      	lsrs	r4, r4, #5
 80078fe:	4635      	mov	r5, r6
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	463a      	mov	r2, r7
 8007904:	4616      	mov	r6, r2
 8007906:	3201      	adds	r2, #1
 8007908:	7830      	ldrb	r0, [r6, #0]
 800790a:	f7ff ff9b 	bl	8007844 <__hexdig_fun>
 800790e:	2800      	cmp	r0, #0
 8007910:	d1f8      	bne.n	8007904 <__gethex+0x94>
 8007912:	9901      	ldr	r1, [sp, #4]
 8007914:	4652      	mov	r2, sl
 8007916:	4630      	mov	r0, r6
 8007918:	f001 fd3a 	bl	8009390 <strncmp>
 800791c:	b980      	cbnz	r0, 8007940 <__gethex+0xd0>
 800791e:	b94d      	cbnz	r5, 8007934 <__gethex+0xc4>
 8007920:	eb06 050a 	add.w	r5, r6, sl
 8007924:	462a      	mov	r2, r5
 8007926:	4616      	mov	r6, r2
 8007928:	3201      	adds	r2, #1
 800792a:	7830      	ldrb	r0, [r6, #0]
 800792c:	f7ff ff8a 	bl	8007844 <__hexdig_fun>
 8007930:	2800      	cmp	r0, #0
 8007932:	d1f8      	bne.n	8007926 <__gethex+0xb6>
 8007934:	1bad      	subs	r5, r5, r6
 8007936:	00ad      	lsls	r5, r5, #2
 8007938:	e004      	b.n	8007944 <__gethex+0xd4>
 800793a:	2400      	movs	r4, #0
 800793c:	4625      	mov	r5, r4
 800793e:	e7e0      	b.n	8007902 <__gethex+0x92>
 8007940:	2d00      	cmp	r5, #0
 8007942:	d1f7      	bne.n	8007934 <__gethex+0xc4>
 8007944:	7833      	ldrb	r3, [r6, #0]
 8007946:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800794a:	2b50      	cmp	r3, #80	; 0x50
 800794c:	d13b      	bne.n	80079c6 <__gethex+0x156>
 800794e:	7873      	ldrb	r3, [r6, #1]
 8007950:	2b2b      	cmp	r3, #43	; 0x2b
 8007952:	d02c      	beq.n	80079ae <__gethex+0x13e>
 8007954:	2b2d      	cmp	r3, #45	; 0x2d
 8007956:	d02e      	beq.n	80079b6 <__gethex+0x146>
 8007958:	1c71      	adds	r1, r6, #1
 800795a:	f04f 0900 	mov.w	r9, #0
 800795e:	7808      	ldrb	r0, [r1, #0]
 8007960:	f7ff ff70 	bl	8007844 <__hexdig_fun>
 8007964:	1e43      	subs	r3, r0, #1
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b18      	cmp	r3, #24
 800796a:	d82c      	bhi.n	80079c6 <__gethex+0x156>
 800796c:	f1a0 0210 	sub.w	r2, r0, #16
 8007970:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007974:	f7ff ff66 	bl	8007844 <__hexdig_fun>
 8007978:	1e43      	subs	r3, r0, #1
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b18      	cmp	r3, #24
 800797e:	d91d      	bls.n	80079bc <__gethex+0x14c>
 8007980:	f1b9 0f00 	cmp.w	r9, #0
 8007984:	d000      	beq.n	8007988 <__gethex+0x118>
 8007986:	4252      	negs	r2, r2
 8007988:	4415      	add	r5, r2
 800798a:	f8cb 1000 	str.w	r1, [fp]
 800798e:	b1e4      	cbz	r4, 80079ca <__gethex+0x15a>
 8007990:	9b00      	ldr	r3, [sp, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	bf14      	ite	ne
 8007996:	2700      	movne	r7, #0
 8007998:	2706      	moveq	r7, #6
 800799a:	4638      	mov	r0, r7
 800799c:	b009      	add	sp, #36	; 0x24
 800799e:	ecbd 8b02 	vpop	{d8}
 80079a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a6:	463e      	mov	r6, r7
 80079a8:	4625      	mov	r5, r4
 80079aa:	2401      	movs	r4, #1
 80079ac:	e7ca      	b.n	8007944 <__gethex+0xd4>
 80079ae:	f04f 0900 	mov.w	r9, #0
 80079b2:	1cb1      	adds	r1, r6, #2
 80079b4:	e7d3      	b.n	800795e <__gethex+0xee>
 80079b6:	f04f 0901 	mov.w	r9, #1
 80079ba:	e7fa      	b.n	80079b2 <__gethex+0x142>
 80079bc:	230a      	movs	r3, #10
 80079be:	fb03 0202 	mla	r2, r3, r2, r0
 80079c2:	3a10      	subs	r2, #16
 80079c4:	e7d4      	b.n	8007970 <__gethex+0x100>
 80079c6:	4631      	mov	r1, r6
 80079c8:	e7df      	b.n	800798a <__gethex+0x11a>
 80079ca:	1bf3      	subs	r3, r6, r7
 80079cc:	3b01      	subs	r3, #1
 80079ce:	4621      	mov	r1, r4
 80079d0:	2b07      	cmp	r3, #7
 80079d2:	dc0b      	bgt.n	80079ec <__gethex+0x17c>
 80079d4:	ee18 0a10 	vmov	r0, s16
 80079d8:	f000 fa90 	bl	8007efc <_Balloc>
 80079dc:	4604      	mov	r4, r0
 80079de:	b940      	cbnz	r0, 80079f2 <__gethex+0x182>
 80079e0:	4b65      	ldr	r3, [pc, #404]	; (8007b78 <__gethex+0x308>)
 80079e2:	4602      	mov	r2, r0
 80079e4:	21de      	movs	r1, #222	; 0xde
 80079e6:	4865      	ldr	r0, [pc, #404]	; (8007b7c <__gethex+0x30c>)
 80079e8:	f001 fdaa 	bl	8009540 <__assert_func>
 80079ec:	3101      	adds	r1, #1
 80079ee:	105b      	asrs	r3, r3, #1
 80079f0:	e7ee      	b.n	80079d0 <__gethex+0x160>
 80079f2:	f100 0914 	add.w	r9, r0, #20
 80079f6:	f04f 0b00 	mov.w	fp, #0
 80079fa:	f1ca 0301 	rsb	r3, sl, #1
 80079fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8007a02:	f8cd b000 	str.w	fp, [sp]
 8007a06:	9306      	str	r3, [sp, #24]
 8007a08:	42b7      	cmp	r7, r6
 8007a0a:	d340      	bcc.n	8007a8e <__gethex+0x21e>
 8007a0c:	9802      	ldr	r0, [sp, #8]
 8007a0e:	9b00      	ldr	r3, [sp, #0]
 8007a10:	f840 3b04 	str.w	r3, [r0], #4
 8007a14:	eba0 0009 	sub.w	r0, r0, r9
 8007a18:	1080      	asrs	r0, r0, #2
 8007a1a:	0146      	lsls	r6, r0, #5
 8007a1c:	6120      	str	r0, [r4, #16]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 fb62 	bl	80080e8 <__hi0bits>
 8007a24:	1a30      	subs	r0, r6, r0
 8007a26:	f8d8 6000 	ldr.w	r6, [r8]
 8007a2a:	42b0      	cmp	r0, r6
 8007a2c:	dd63      	ble.n	8007af6 <__gethex+0x286>
 8007a2e:	1b87      	subs	r7, r0, r6
 8007a30:	4639      	mov	r1, r7
 8007a32:	4620      	mov	r0, r4
 8007a34:	f000 fefc 	bl	8008830 <__any_on>
 8007a38:	4682      	mov	sl, r0
 8007a3a:	b1a8      	cbz	r0, 8007a68 <__gethex+0x1f8>
 8007a3c:	1e7b      	subs	r3, r7, #1
 8007a3e:	1159      	asrs	r1, r3, #5
 8007a40:	f003 021f 	and.w	r2, r3, #31
 8007a44:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007a48:	f04f 0a01 	mov.w	sl, #1
 8007a4c:	fa0a f202 	lsl.w	r2, sl, r2
 8007a50:	420a      	tst	r2, r1
 8007a52:	d009      	beq.n	8007a68 <__gethex+0x1f8>
 8007a54:	4553      	cmp	r3, sl
 8007a56:	dd05      	ble.n	8007a64 <__gethex+0x1f4>
 8007a58:	1eb9      	subs	r1, r7, #2
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fee8 	bl	8008830 <__any_on>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d145      	bne.n	8007af0 <__gethex+0x280>
 8007a64:	f04f 0a02 	mov.w	sl, #2
 8007a68:	4639      	mov	r1, r7
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f7ff fe98 	bl	80077a0 <rshift>
 8007a70:	443d      	add	r5, r7
 8007a72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a76:	42ab      	cmp	r3, r5
 8007a78:	da4c      	bge.n	8007b14 <__gethex+0x2a4>
 8007a7a:	ee18 0a10 	vmov	r0, s16
 8007a7e:	4621      	mov	r1, r4
 8007a80:	f000 fa7c 	bl	8007f7c <_Bfree>
 8007a84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a86:	2300      	movs	r3, #0
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	27a3      	movs	r7, #163	; 0xa3
 8007a8c:	e785      	b.n	800799a <__gethex+0x12a>
 8007a8e:	1e73      	subs	r3, r6, #1
 8007a90:	9a05      	ldr	r2, [sp, #20]
 8007a92:	9303      	str	r3, [sp, #12]
 8007a94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d019      	beq.n	8007ad0 <__gethex+0x260>
 8007a9c:	f1bb 0f20 	cmp.w	fp, #32
 8007aa0:	d107      	bne.n	8007ab2 <__gethex+0x242>
 8007aa2:	9b02      	ldr	r3, [sp, #8]
 8007aa4:	9a00      	ldr	r2, [sp, #0]
 8007aa6:	f843 2b04 	str.w	r2, [r3], #4
 8007aaa:	9302      	str	r3, [sp, #8]
 8007aac:	2300      	movs	r3, #0
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	469b      	mov	fp, r3
 8007ab2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007ab6:	f7ff fec5 	bl	8007844 <__hexdig_fun>
 8007aba:	9b00      	ldr	r3, [sp, #0]
 8007abc:	f000 000f 	and.w	r0, r0, #15
 8007ac0:	fa00 f00b 	lsl.w	r0, r0, fp
 8007ac4:	4303      	orrs	r3, r0
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	f10b 0b04 	add.w	fp, fp, #4
 8007acc:	9b03      	ldr	r3, [sp, #12]
 8007ace:	e00d      	b.n	8007aec <__gethex+0x27c>
 8007ad0:	9b03      	ldr	r3, [sp, #12]
 8007ad2:	9a06      	ldr	r2, [sp, #24]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	42bb      	cmp	r3, r7
 8007ad8:	d3e0      	bcc.n	8007a9c <__gethex+0x22c>
 8007ada:	4618      	mov	r0, r3
 8007adc:	9901      	ldr	r1, [sp, #4]
 8007ade:	9307      	str	r3, [sp, #28]
 8007ae0:	4652      	mov	r2, sl
 8007ae2:	f001 fc55 	bl	8009390 <strncmp>
 8007ae6:	9b07      	ldr	r3, [sp, #28]
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d1d7      	bne.n	8007a9c <__gethex+0x22c>
 8007aec:	461e      	mov	r6, r3
 8007aee:	e78b      	b.n	8007a08 <__gethex+0x198>
 8007af0:	f04f 0a03 	mov.w	sl, #3
 8007af4:	e7b8      	b.n	8007a68 <__gethex+0x1f8>
 8007af6:	da0a      	bge.n	8007b0e <__gethex+0x29e>
 8007af8:	1a37      	subs	r7, r6, r0
 8007afa:	4621      	mov	r1, r4
 8007afc:	ee18 0a10 	vmov	r0, s16
 8007b00:	463a      	mov	r2, r7
 8007b02:	f000 fc57 	bl	80083b4 <__lshift>
 8007b06:	1bed      	subs	r5, r5, r7
 8007b08:	4604      	mov	r4, r0
 8007b0a:	f100 0914 	add.w	r9, r0, #20
 8007b0e:	f04f 0a00 	mov.w	sl, #0
 8007b12:	e7ae      	b.n	8007a72 <__gethex+0x202>
 8007b14:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007b18:	42a8      	cmp	r0, r5
 8007b1a:	dd72      	ble.n	8007c02 <__gethex+0x392>
 8007b1c:	1b45      	subs	r5, r0, r5
 8007b1e:	42ae      	cmp	r6, r5
 8007b20:	dc36      	bgt.n	8007b90 <__gethex+0x320>
 8007b22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d02a      	beq.n	8007b80 <__gethex+0x310>
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d02c      	beq.n	8007b88 <__gethex+0x318>
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d115      	bne.n	8007b5e <__gethex+0x2ee>
 8007b32:	42ae      	cmp	r6, r5
 8007b34:	d113      	bne.n	8007b5e <__gethex+0x2ee>
 8007b36:	2e01      	cmp	r6, #1
 8007b38:	d10b      	bne.n	8007b52 <__gethex+0x2e2>
 8007b3a:	9a04      	ldr	r2, [sp, #16]
 8007b3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007b40:	6013      	str	r3, [r2, #0]
 8007b42:	2301      	movs	r3, #1
 8007b44:	6123      	str	r3, [r4, #16]
 8007b46:	f8c9 3000 	str.w	r3, [r9]
 8007b4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b4c:	2762      	movs	r7, #98	; 0x62
 8007b4e:	601c      	str	r4, [r3, #0]
 8007b50:	e723      	b.n	800799a <__gethex+0x12a>
 8007b52:	1e71      	subs	r1, r6, #1
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 fe6b 	bl	8008830 <__any_on>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d1ed      	bne.n	8007b3a <__gethex+0x2ca>
 8007b5e:	ee18 0a10 	vmov	r0, s16
 8007b62:	4621      	mov	r1, r4
 8007b64:	f000 fa0a 	bl	8007f7c <_Bfree>
 8007b68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	2750      	movs	r7, #80	; 0x50
 8007b70:	e713      	b.n	800799a <__gethex+0x12a>
 8007b72:	bf00      	nop
 8007b74:	0800a528 	.word	0x0800a528
 8007b78:	0800a4ac 	.word	0x0800a4ac
 8007b7c:	0800a4bd 	.word	0x0800a4bd
 8007b80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1eb      	bne.n	8007b5e <__gethex+0x2ee>
 8007b86:	e7d8      	b.n	8007b3a <__gethex+0x2ca>
 8007b88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1d5      	bne.n	8007b3a <__gethex+0x2ca>
 8007b8e:	e7e6      	b.n	8007b5e <__gethex+0x2ee>
 8007b90:	1e6f      	subs	r7, r5, #1
 8007b92:	f1ba 0f00 	cmp.w	sl, #0
 8007b96:	d131      	bne.n	8007bfc <__gethex+0x38c>
 8007b98:	b127      	cbz	r7, 8007ba4 <__gethex+0x334>
 8007b9a:	4639      	mov	r1, r7
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f000 fe47 	bl	8008830 <__any_on>
 8007ba2:	4682      	mov	sl, r0
 8007ba4:	117b      	asrs	r3, r7, #5
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007bac:	f007 071f 	and.w	r7, r7, #31
 8007bb0:	fa01 f707 	lsl.w	r7, r1, r7
 8007bb4:	421f      	tst	r7, r3
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	4620      	mov	r0, r4
 8007bba:	bf18      	it	ne
 8007bbc:	f04a 0a02 	orrne.w	sl, sl, #2
 8007bc0:	1b76      	subs	r6, r6, r5
 8007bc2:	f7ff fded 	bl	80077a0 <rshift>
 8007bc6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007bca:	2702      	movs	r7, #2
 8007bcc:	f1ba 0f00 	cmp.w	sl, #0
 8007bd0:	d048      	beq.n	8007c64 <__gethex+0x3f4>
 8007bd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d015      	beq.n	8007c06 <__gethex+0x396>
 8007bda:	2b03      	cmp	r3, #3
 8007bdc:	d017      	beq.n	8007c0e <__gethex+0x39e>
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d109      	bne.n	8007bf6 <__gethex+0x386>
 8007be2:	f01a 0f02 	tst.w	sl, #2
 8007be6:	d006      	beq.n	8007bf6 <__gethex+0x386>
 8007be8:	f8d9 0000 	ldr.w	r0, [r9]
 8007bec:	ea4a 0a00 	orr.w	sl, sl, r0
 8007bf0:	f01a 0f01 	tst.w	sl, #1
 8007bf4:	d10e      	bne.n	8007c14 <__gethex+0x3a4>
 8007bf6:	f047 0710 	orr.w	r7, r7, #16
 8007bfa:	e033      	b.n	8007c64 <__gethex+0x3f4>
 8007bfc:	f04f 0a01 	mov.w	sl, #1
 8007c00:	e7d0      	b.n	8007ba4 <__gethex+0x334>
 8007c02:	2701      	movs	r7, #1
 8007c04:	e7e2      	b.n	8007bcc <__gethex+0x35c>
 8007c06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c08:	f1c3 0301 	rsb	r3, r3, #1
 8007c0c:	9315      	str	r3, [sp, #84]	; 0x54
 8007c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0f0      	beq.n	8007bf6 <__gethex+0x386>
 8007c14:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007c18:	f104 0314 	add.w	r3, r4, #20
 8007c1c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007c20:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007c24:	f04f 0c00 	mov.w	ip, #0
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c2e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007c32:	d01c      	beq.n	8007c6e <__gethex+0x3fe>
 8007c34:	3201      	adds	r2, #1
 8007c36:	6002      	str	r2, [r0, #0]
 8007c38:	2f02      	cmp	r7, #2
 8007c3a:	f104 0314 	add.w	r3, r4, #20
 8007c3e:	d13f      	bne.n	8007cc0 <__gethex+0x450>
 8007c40:	f8d8 2000 	ldr.w	r2, [r8]
 8007c44:	3a01      	subs	r2, #1
 8007c46:	42b2      	cmp	r2, r6
 8007c48:	d10a      	bne.n	8007c60 <__gethex+0x3f0>
 8007c4a:	1171      	asrs	r1, r6, #5
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c52:	f006 061f 	and.w	r6, r6, #31
 8007c56:	fa02 f606 	lsl.w	r6, r2, r6
 8007c5a:	421e      	tst	r6, r3
 8007c5c:	bf18      	it	ne
 8007c5e:	4617      	movne	r7, r2
 8007c60:	f047 0720 	orr.w	r7, r7, #32
 8007c64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007c66:	601c      	str	r4, [r3, #0]
 8007c68:	9b04      	ldr	r3, [sp, #16]
 8007c6a:	601d      	str	r5, [r3, #0]
 8007c6c:	e695      	b.n	800799a <__gethex+0x12a>
 8007c6e:	4299      	cmp	r1, r3
 8007c70:	f843 cc04 	str.w	ip, [r3, #-4]
 8007c74:	d8d8      	bhi.n	8007c28 <__gethex+0x3b8>
 8007c76:	68a3      	ldr	r3, [r4, #8]
 8007c78:	459b      	cmp	fp, r3
 8007c7a:	db19      	blt.n	8007cb0 <__gethex+0x440>
 8007c7c:	6861      	ldr	r1, [r4, #4]
 8007c7e:	ee18 0a10 	vmov	r0, s16
 8007c82:	3101      	adds	r1, #1
 8007c84:	f000 f93a 	bl	8007efc <_Balloc>
 8007c88:	4681      	mov	r9, r0
 8007c8a:	b918      	cbnz	r0, 8007c94 <__gethex+0x424>
 8007c8c:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <__gethex+0x488>)
 8007c8e:	4602      	mov	r2, r0
 8007c90:	2184      	movs	r1, #132	; 0x84
 8007c92:	e6a8      	b.n	80079e6 <__gethex+0x176>
 8007c94:	6922      	ldr	r2, [r4, #16]
 8007c96:	3202      	adds	r2, #2
 8007c98:	f104 010c 	add.w	r1, r4, #12
 8007c9c:	0092      	lsls	r2, r2, #2
 8007c9e:	300c      	adds	r0, #12
 8007ca0:	f000 f91e 	bl	8007ee0 <memcpy>
 8007ca4:	4621      	mov	r1, r4
 8007ca6:	ee18 0a10 	vmov	r0, s16
 8007caa:	f000 f967 	bl	8007f7c <_Bfree>
 8007cae:	464c      	mov	r4, r9
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007cb8:	6122      	str	r2, [r4, #16]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	615a      	str	r2, [r3, #20]
 8007cbe:	e7bb      	b.n	8007c38 <__gethex+0x3c8>
 8007cc0:	6922      	ldr	r2, [r4, #16]
 8007cc2:	455a      	cmp	r2, fp
 8007cc4:	dd0b      	ble.n	8007cde <__gethex+0x46e>
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f7ff fd69 	bl	80077a0 <rshift>
 8007cce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007cd2:	3501      	adds	r5, #1
 8007cd4:	42ab      	cmp	r3, r5
 8007cd6:	f6ff aed0 	blt.w	8007a7a <__gethex+0x20a>
 8007cda:	2701      	movs	r7, #1
 8007cdc:	e7c0      	b.n	8007c60 <__gethex+0x3f0>
 8007cde:	f016 061f 	ands.w	r6, r6, #31
 8007ce2:	d0fa      	beq.n	8007cda <__gethex+0x46a>
 8007ce4:	449a      	add	sl, r3
 8007ce6:	f1c6 0620 	rsb	r6, r6, #32
 8007cea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007cee:	f000 f9fb 	bl	80080e8 <__hi0bits>
 8007cf2:	42b0      	cmp	r0, r6
 8007cf4:	dbe7      	blt.n	8007cc6 <__gethex+0x456>
 8007cf6:	e7f0      	b.n	8007cda <__gethex+0x46a>
 8007cf8:	0800a4ac 	.word	0x0800a4ac

08007cfc <L_shift>:
 8007cfc:	f1c2 0208 	rsb	r2, r2, #8
 8007d00:	0092      	lsls	r2, r2, #2
 8007d02:	b570      	push	{r4, r5, r6, lr}
 8007d04:	f1c2 0620 	rsb	r6, r2, #32
 8007d08:	6843      	ldr	r3, [r0, #4]
 8007d0a:	6804      	ldr	r4, [r0, #0]
 8007d0c:	fa03 f506 	lsl.w	r5, r3, r6
 8007d10:	432c      	orrs	r4, r5
 8007d12:	40d3      	lsrs	r3, r2
 8007d14:	6004      	str	r4, [r0, #0]
 8007d16:	f840 3f04 	str.w	r3, [r0, #4]!
 8007d1a:	4288      	cmp	r0, r1
 8007d1c:	d3f4      	bcc.n	8007d08 <L_shift+0xc>
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}

08007d20 <__match>:
 8007d20:	b530      	push	{r4, r5, lr}
 8007d22:	6803      	ldr	r3, [r0, #0]
 8007d24:	3301      	adds	r3, #1
 8007d26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d2a:	b914      	cbnz	r4, 8007d32 <__match+0x12>
 8007d2c:	6003      	str	r3, [r0, #0]
 8007d2e:	2001      	movs	r0, #1
 8007d30:	bd30      	pop	{r4, r5, pc}
 8007d32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d36:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007d3a:	2d19      	cmp	r5, #25
 8007d3c:	bf98      	it	ls
 8007d3e:	3220      	addls	r2, #32
 8007d40:	42a2      	cmp	r2, r4
 8007d42:	d0f0      	beq.n	8007d26 <__match+0x6>
 8007d44:	2000      	movs	r0, #0
 8007d46:	e7f3      	b.n	8007d30 <__match+0x10>

08007d48 <__hexnan>:
 8007d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	680b      	ldr	r3, [r1, #0]
 8007d4e:	6801      	ldr	r1, [r0, #0]
 8007d50:	115e      	asrs	r6, r3, #5
 8007d52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007d56:	f013 031f 	ands.w	r3, r3, #31
 8007d5a:	b087      	sub	sp, #28
 8007d5c:	bf18      	it	ne
 8007d5e:	3604      	addne	r6, #4
 8007d60:	2500      	movs	r5, #0
 8007d62:	1f37      	subs	r7, r6, #4
 8007d64:	4682      	mov	sl, r0
 8007d66:	4690      	mov	r8, r2
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8007d6e:	46b9      	mov	r9, r7
 8007d70:	463c      	mov	r4, r7
 8007d72:	9502      	str	r5, [sp, #8]
 8007d74:	46ab      	mov	fp, r5
 8007d76:	784a      	ldrb	r2, [r1, #1]
 8007d78:	1c4b      	adds	r3, r1, #1
 8007d7a:	9303      	str	r3, [sp, #12]
 8007d7c:	b342      	cbz	r2, 8007dd0 <__hexnan+0x88>
 8007d7e:	4610      	mov	r0, r2
 8007d80:	9105      	str	r1, [sp, #20]
 8007d82:	9204      	str	r2, [sp, #16]
 8007d84:	f7ff fd5e 	bl	8007844 <__hexdig_fun>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d14f      	bne.n	8007e2c <__hexnan+0xe4>
 8007d8c:	9a04      	ldr	r2, [sp, #16]
 8007d8e:	9905      	ldr	r1, [sp, #20]
 8007d90:	2a20      	cmp	r2, #32
 8007d92:	d818      	bhi.n	8007dc6 <__hexnan+0x7e>
 8007d94:	9b02      	ldr	r3, [sp, #8]
 8007d96:	459b      	cmp	fp, r3
 8007d98:	dd13      	ble.n	8007dc2 <__hexnan+0x7a>
 8007d9a:	454c      	cmp	r4, r9
 8007d9c:	d206      	bcs.n	8007dac <__hexnan+0x64>
 8007d9e:	2d07      	cmp	r5, #7
 8007da0:	dc04      	bgt.n	8007dac <__hexnan+0x64>
 8007da2:	462a      	mov	r2, r5
 8007da4:	4649      	mov	r1, r9
 8007da6:	4620      	mov	r0, r4
 8007da8:	f7ff ffa8 	bl	8007cfc <L_shift>
 8007dac:	4544      	cmp	r4, r8
 8007dae:	d950      	bls.n	8007e52 <__hexnan+0x10a>
 8007db0:	2300      	movs	r3, #0
 8007db2:	f1a4 0904 	sub.w	r9, r4, #4
 8007db6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007dba:	f8cd b008 	str.w	fp, [sp, #8]
 8007dbe:	464c      	mov	r4, r9
 8007dc0:	461d      	mov	r5, r3
 8007dc2:	9903      	ldr	r1, [sp, #12]
 8007dc4:	e7d7      	b.n	8007d76 <__hexnan+0x2e>
 8007dc6:	2a29      	cmp	r2, #41	; 0x29
 8007dc8:	d156      	bne.n	8007e78 <__hexnan+0x130>
 8007dca:	3102      	adds	r1, #2
 8007dcc:	f8ca 1000 	str.w	r1, [sl]
 8007dd0:	f1bb 0f00 	cmp.w	fp, #0
 8007dd4:	d050      	beq.n	8007e78 <__hexnan+0x130>
 8007dd6:	454c      	cmp	r4, r9
 8007dd8:	d206      	bcs.n	8007de8 <__hexnan+0xa0>
 8007dda:	2d07      	cmp	r5, #7
 8007ddc:	dc04      	bgt.n	8007de8 <__hexnan+0xa0>
 8007dde:	462a      	mov	r2, r5
 8007de0:	4649      	mov	r1, r9
 8007de2:	4620      	mov	r0, r4
 8007de4:	f7ff ff8a 	bl	8007cfc <L_shift>
 8007de8:	4544      	cmp	r4, r8
 8007dea:	d934      	bls.n	8007e56 <__hexnan+0x10e>
 8007dec:	f1a8 0204 	sub.w	r2, r8, #4
 8007df0:	4623      	mov	r3, r4
 8007df2:	f853 1b04 	ldr.w	r1, [r3], #4
 8007df6:	f842 1f04 	str.w	r1, [r2, #4]!
 8007dfa:	429f      	cmp	r7, r3
 8007dfc:	d2f9      	bcs.n	8007df2 <__hexnan+0xaa>
 8007dfe:	1b3b      	subs	r3, r7, r4
 8007e00:	f023 0303 	bic.w	r3, r3, #3
 8007e04:	3304      	adds	r3, #4
 8007e06:	3401      	adds	r4, #1
 8007e08:	3e03      	subs	r6, #3
 8007e0a:	42b4      	cmp	r4, r6
 8007e0c:	bf88      	it	hi
 8007e0e:	2304      	movhi	r3, #4
 8007e10:	4443      	add	r3, r8
 8007e12:	2200      	movs	r2, #0
 8007e14:	f843 2b04 	str.w	r2, [r3], #4
 8007e18:	429f      	cmp	r7, r3
 8007e1a:	d2fb      	bcs.n	8007e14 <__hexnan+0xcc>
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	b91b      	cbnz	r3, 8007e28 <__hexnan+0xe0>
 8007e20:	4547      	cmp	r7, r8
 8007e22:	d127      	bne.n	8007e74 <__hexnan+0x12c>
 8007e24:	2301      	movs	r3, #1
 8007e26:	603b      	str	r3, [r7, #0]
 8007e28:	2005      	movs	r0, #5
 8007e2a:	e026      	b.n	8007e7a <__hexnan+0x132>
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	2d08      	cmp	r5, #8
 8007e30:	f10b 0b01 	add.w	fp, fp, #1
 8007e34:	dd06      	ble.n	8007e44 <__hexnan+0xfc>
 8007e36:	4544      	cmp	r4, r8
 8007e38:	d9c3      	bls.n	8007dc2 <__hexnan+0x7a>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e40:	2501      	movs	r5, #1
 8007e42:	3c04      	subs	r4, #4
 8007e44:	6822      	ldr	r2, [r4, #0]
 8007e46:	f000 000f 	and.w	r0, r0, #15
 8007e4a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007e4e:	6022      	str	r2, [r4, #0]
 8007e50:	e7b7      	b.n	8007dc2 <__hexnan+0x7a>
 8007e52:	2508      	movs	r5, #8
 8007e54:	e7b5      	b.n	8007dc2 <__hexnan+0x7a>
 8007e56:	9b01      	ldr	r3, [sp, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0df      	beq.n	8007e1c <__hexnan+0xd4>
 8007e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e60:	f1c3 0320 	rsb	r3, r3, #32
 8007e64:	fa22 f303 	lsr.w	r3, r2, r3
 8007e68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e6c:	401a      	ands	r2, r3
 8007e6e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007e72:	e7d3      	b.n	8007e1c <__hexnan+0xd4>
 8007e74:	3f04      	subs	r7, #4
 8007e76:	e7d1      	b.n	8007e1c <__hexnan+0xd4>
 8007e78:	2004      	movs	r0, #4
 8007e7a:	b007      	add	sp, #28
 8007e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e80 <_localeconv_r>:
 8007e80:	4800      	ldr	r0, [pc, #0]	; (8007e84 <_localeconv_r+0x4>)
 8007e82:	4770      	bx	lr
 8007e84:	20000188 	.word	0x20000188

08007e88 <_lseek_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4d07      	ldr	r5, [pc, #28]	; (8007ea8 <_lseek_r+0x20>)
 8007e8c:	4604      	mov	r4, r0
 8007e8e:	4608      	mov	r0, r1
 8007e90:	4611      	mov	r1, r2
 8007e92:	2200      	movs	r2, #0
 8007e94:	602a      	str	r2, [r5, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f7fa fb72 	bl	8002580 <_lseek>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_lseek_r+0x1e>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_lseek_r+0x1e>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	20007f10 	.word	0x20007f10

08007eac <malloc>:
 8007eac:	4b02      	ldr	r3, [pc, #8]	; (8007eb8 <malloc+0xc>)
 8007eae:	4601      	mov	r1, r0
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	f000 bd3d 	b.w	8008930 <_malloc_r>
 8007eb6:	bf00      	nop
 8007eb8:	20000030 	.word	0x20000030

08007ebc <__ascii_mbtowc>:
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	b901      	cbnz	r1, 8007ec2 <__ascii_mbtowc+0x6>
 8007ec0:	a901      	add	r1, sp, #4
 8007ec2:	b142      	cbz	r2, 8007ed6 <__ascii_mbtowc+0x1a>
 8007ec4:	b14b      	cbz	r3, 8007eda <__ascii_mbtowc+0x1e>
 8007ec6:	7813      	ldrb	r3, [r2, #0]
 8007ec8:	600b      	str	r3, [r1, #0]
 8007eca:	7812      	ldrb	r2, [r2, #0]
 8007ecc:	1e10      	subs	r0, r2, #0
 8007ece:	bf18      	it	ne
 8007ed0:	2001      	movne	r0, #1
 8007ed2:	b002      	add	sp, #8
 8007ed4:	4770      	bx	lr
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	e7fb      	b.n	8007ed2 <__ascii_mbtowc+0x16>
 8007eda:	f06f 0001 	mvn.w	r0, #1
 8007ede:	e7f8      	b.n	8007ed2 <__ascii_mbtowc+0x16>

08007ee0 <memcpy>:
 8007ee0:	440a      	add	r2, r1
 8007ee2:	4291      	cmp	r1, r2
 8007ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ee8:	d100      	bne.n	8007eec <memcpy+0xc>
 8007eea:	4770      	bx	lr
 8007eec:	b510      	push	{r4, lr}
 8007eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ef6:	4291      	cmp	r1, r2
 8007ef8:	d1f9      	bne.n	8007eee <memcpy+0xe>
 8007efa:	bd10      	pop	{r4, pc}

08007efc <_Balloc>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f00:	4604      	mov	r4, r0
 8007f02:	460d      	mov	r5, r1
 8007f04:	b976      	cbnz	r6, 8007f24 <_Balloc+0x28>
 8007f06:	2010      	movs	r0, #16
 8007f08:	f7ff ffd0 	bl	8007eac <malloc>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	6260      	str	r0, [r4, #36]	; 0x24
 8007f10:	b920      	cbnz	r0, 8007f1c <_Balloc+0x20>
 8007f12:	4b18      	ldr	r3, [pc, #96]	; (8007f74 <_Balloc+0x78>)
 8007f14:	4818      	ldr	r0, [pc, #96]	; (8007f78 <_Balloc+0x7c>)
 8007f16:	2166      	movs	r1, #102	; 0x66
 8007f18:	f001 fb12 	bl	8009540 <__assert_func>
 8007f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f20:	6006      	str	r6, [r0, #0]
 8007f22:	60c6      	str	r6, [r0, #12]
 8007f24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007f26:	68f3      	ldr	r3, [r6, #12]
 8007f28:	b183      	cbz	r3, 8007f4c <_Balloc+0x50>
 8007f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f32:	b9b8      	cbnz	r0, 8007f64 <_Balloc+0x68>
 8007f34:	2101      	movs	r1, #1
 8007f36:	fa01 f605 	lsl.w	r6, r1, r5
 8007f3a:	1d72      	adds	r2, r6, #5
 8007f3c:	0092      	lsls	r2, r2, #2
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 fc97 	bl	8008872 <_calloc_r>
 8007f44:	b160      	cbz	r0, 8007f60 <_Balloc+0x64>
 8007f46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f4a:	e00e      	b.n	8007f6a <_Balloc+0x6e>
 8007f4c:	2221      	movs	r2, #33	; 0x21
 8007f4e:	2104      	movs	r1, #4
 8007f50:	4620      	mov	r0, r4
 8007f52:	f000 fc8e 	bl	8008872 <_calloc_r>
 8007f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f58:	60f0      	str	r0, [r6, #12]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e4      	bne.n	8007f2a <_Balloc+0x2e>
 8007f60:	2000      	movs	r0, #0
 8007f62:	bd70      	pop	{r4, r5, r6, pc}
 8007f64:	6802      	ldr	r2, [r0, #0]
 8007f66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f70:	e7f7      	b.n	8007f62 <_Balloc+0x66>
 8007f72:	bf00      	nop
 8007f74:	0800a436 	.word	0x0800a436
 8007f78:	0800a53c 	.word	0x0800a53c

08007f7c <_Bfree>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007f80:	4605      	mov	r5, r0
 8007f82:	460c      	mov	r4, r1
 8007f84:	b976      	cbnz	r6, 8007fa4 <_Bfree+0x28>
 8007f86:	2010      	movs	r0, #16
 8007f88:	f7ff ff90 	bl	8007eac <malloc>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	6268      	str	r0, [r5, #36]	; 0x24
 8007f90:	b920      	cbnz	r0, 8007f9c <_Bfree+0x20>
 8007f92:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <_Bfree+0x3c>)
 8007f94:	4809      	ldr	r0, [pc, #36]	; (8007fbc <_Bfree+0x40>)
 8007f96:	218a      	movs	r1, #138	; 0x8a
 8007f98:	f001 fad2 	bl	8009540 <__assert_func>
 8007f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fa0:	6006      	str	r6, [r0, #0]
 8007fa2:	60c6      	str	r6, [r0, #12]
 8007fa4:	b13c      	cbz	r4, 8007fb6 <_Bfree+0x3a>
 8007fa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007fa8:	6862      	ldr	r2, [r4, #4]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fb0:	6021      	str	r1, [r4, #0]
 8007fb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
 8007fb8:	0800a436 	.word	0x0800a436
 8007fbc:	0800a53c 	.word	0x0800a53c

08007fc0 <__multadd>:
 8007fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc4:	690e      	ldr	r6, [r1, #16]
 8007fc6:	4607      	mov	r7, r0
 8007fc8:	4698      	mov	r8, r3
 8007fca:	460c      	mov	r4, r1
 8007fcc:	f101 0014 	add.w	r0, r1, #20
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	6805      	ldr	r5, [r0, #0]
 8007fd4:	b2a9      	uxth	r1, r5
 8007fd6:	fb02 8101 	mla	r1, r2, r1, r8
 8007fda:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007fde:	0c2d      	lsrs	r5, r5, #16
 8007fe0:	fb02 c505 	mla	r5, r2, r5, ip
 8007fe4:	b289      	uxth	r1, r1
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007fec:	429e      	cmp	r6, r3
 8007fee:	f840 1b04 	str.w	r1, [r0], #4
 8007ff2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007ff6:	dcec      	bgt.n	8007fd2 <__multadd+0x12>
 8007ff8:	f1b8 0f00 	cmp.w	r8, #0
 8007ffc:	d022      	beq.n	8008044 <__multadd+0x84>
 8007ffe:	68a3      	ldr	r3, [r4, #8]
 8008000:	42b3      	cmp	r3, r6
 8008002:	dc19      	bgt.n	8008038 <__multadd+0x78>
 8008004:	6861      	ldr	r1, [r4, #4]
 8008006:	4638      	mov	r0, r7
 8008008:	3101      	adds	r1, #1
 800800a:	f7ff ff77 	bl	8007efc <_Balloc>
 800800e:	4605      	mov	r5, r0
 8008010:	b928      	cbnz	r0, 800801e <__multadd+0x5e>
 8008012:	4602      	mov	r2, r0
 8008014:	4b0d      	ldr	r3, [pc, #52]	; (800804c <__multadd+0x8c>)
 8008016:	480e      	ldr	r0, [pc, #56]	; (8008050 <__multadd+0x90>)
 8008018:	21b5      	movs	r1, #181	; 0xb5
 800801a:	f001 fa91 	bl	8009540 <__assert_func>
 800801e:	6922      	ldr	r2, [r4, #16]
 8008020:	3202      	adds	r2, #2
 8008022:	f104 010c 	add.w	r1, r4, #12
 8008026:	0092      	lsls	r2, r2, #2
 8008028:	300c      	adds	r0, #12
 800802a:	f7ff ff59 	bl	8007ee0 <memcpy>
 800802e:	4621      	mov	r1, r4
 8008030:	4638      	mov	r0, r7
 8008032:	f7ff ffa3 	bl	8007f7c <_Bfree>
 8008036:	462c      	mov	r4, r5
 8008038:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800803c:	3601      	adds	r6, #1
 800803e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008042:	6126      	str	r6, [r4, #16]
 8008044:	4620      	mov	r0, r4
 8008046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800804a:	bf00      	nop
 800804c:	0800a4ac 	.word	0x0800a4ac
 8008050:	0800a53c 	.word	0x0800a53c

08008054 <__s2b>:
 8008054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008058:	460c      	mov	r4, r1
 800805a:	4615      	mov	r5, r2
 800805c:	461f      	mov	r7, r3
 800805e:	2209      	movs	r2, #9
 8008060:	3308      	adds	r3, #8
 8008062:	4606      	mov	r6, r0
 8008064:	fb93 f3f2 	sdiv	r3, r3, r2
 8008068:	2100      	movs	r1, #0
 800806a:	2201      	movs	r2, #1
 800806c:	429a      	cmp	r2, r3
 800806e:	db09      	blt.n	8008084 <__s2b+0x30>
 8008070:	4630      	mov	r0, r6
 8008072:	f7ff ff43 	bl	8007efc <_Balloc>
 8008076:	b940      	cbnz	r0, 800808a <__s2b+0x36>
 8008078:	4602      	mov	r2, r0
 800807a:	4b19      	ldr	r3, [pc, #100]	; (80080e0 <__s2b+0x8c>)
 800807c:	4819      	ldr	r0, [pc, #100]	; (80080e4 <__s2b+0x90>)
 800807e:	21ce      	movs	r1, #206	; 0xce
 8008080:	f001 fa5e 	bl	8009540 <__assert_func>
 8008084:	0052      	lsls	r2, r2, #1
 8008086:	3101      	adds	r1, #1
 8008088:	e7f0      	b.n	800806c <__s2b+0x18>
 800808a:	9b08      	ldr	r3, [sp, #32]
 800808c:	6143      	str	r3, [r0, #20]
 800808e:	2d09      	cmp	r5, #9
 8008090:	f04f 0301 	mov.w	r3, #1
 8008094:	6103      	str	r3, [r0, #16]
 8008096:	dd16      	ble.n	80080c6 <__s2b+0x72>
 8008098:	f104 0909 	add.w	r9, r4, #9
 800809c:	46c8      	mov	r8, r9
 800809e:	442c      	add	r4, r5
 80080a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080a4:	4601      	mov	r1, r0
 80080a6:	3b30      	subs	r3, #48	; 0x30
 80080a8:	220a      	movs	r2, #10
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff ff88 	bl	8007fc0 <__multadd>
 80080b0:	45a0      	cmp	r8, r4
 80080b2:	d1f5      	bne.n	80080a0 <__s2b+0x4c>
 80080b4:	f1a5 0408 	sub.w	r4, r5, #8
 80080b8:	444c      	add	r4, r9
 80080ba:	1b2d      	subs	r5, r5, r4
 80080bc:	1963      	adds	r3, r4, r5
 80080be:	42bb      	cmp	r3, r7
 80080c0:	db04      	blt.n	80080cc <__s2b+0x78>
 80080c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080c6:	340a      	adds	r4, #10
 80080c8:	2509      	movs	r5, #9
 80080ca:	e7f6      	b.n	80080ba <__s2b+0x66>
 80080cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080d0:	4601      	mov	r1, r0
 80080d2:	3b30      	subs	r3, #48	; 0x30
 80080d4:	220a      	movs	r2, #10
 80080d6:	4630      	mov	r0, r6
 80080d8:	f7ff ff72 	bl	8007fc0 <__multadd>
 80080dc:	e7ee      	b.n	80080bc <__s2b+0x68>
 80080de:	bf00      	nop
 80080e0:	0800a4ac 	.word	0x0800a4ac
 80080e4:	0800a53c 	.word	0x0800a53c

080080e8 <__hi0bits>:
 80080e8:	0c03      	lsrs	r3, r0, #16
 80080ea:	041b      	lsls	r3, r3, #16
 80080ec:	b9d3      	cbnz	r3, 8008124 <__hi0bits+0x3c>
 80080ee:	0400      	lsls	r0, r0, #16
 80080f0:	2310      	movs	r3, #16
 80080f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80080f6:	bf04      	itt	eq
 80080f8:	0200      	lsleq	r0, r0, #8
 80080fa:	3308      	addeq	r3, #8
 80080fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008100:	bf04      	itt	eq
 8008102:	0100      	lsleq	r0, r0, #4
 8008104:	3304      	addeq	r3, #4
 8008106:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800810a:	bf04      	itt	eq
 800810c:	0080      	lsleq	r0, r0, #2
 800810e:	3302      	addeq	r3, #2
 8008110:	2800      	cmp	r0, #0
 8008112:	db05      	blt.n	8008120 <__hi0bits+0x38>
 8008114:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008118:	f103 0301 	add.w	r3, r3, #1
 800811c:	bf08      	it	eq
 800811e:	2320      	moveq	r3, #32
 8008120:	4618      	mov	r0, r3
 8008122:	4770      	bx	lr
 8008124:	2300      	movs	r3, #0
 8008126:	e7e4      	b.n	80080f2 <__hi0bits+0xa>

08008128 <__lo0bits>:
 8008128:	6803      	ldr	r3, [r0, #0]
 800812a:	f013 0207 	ands.w	r2, r3, #7
 800812e:	4601      	mov	r1, r0
 8008130:	d00b      	beq.n	800814a <__lo0bits+0x22>
 8008132:	07da      	lsls	r2, r3, #31
 8008134:	d424      	bmi.n	8008180 <__lo0bits+0x58>
 8008136:	0798      	lsls	r0, r3, #30
 8008138:	bf49      	itett	mi
 800813a:	085b      	lsrmi	r3, r3, #1
 800813c:	089b      	lsrpl	r3, r3, #2
 800813e:	2001      	movmi	r0, #1
 8008140:	600b      	strmi	r3, [r1, #0]
 8008142:	bf5c      	itt	pl
 8008144:	600b      	strpl	r3, [r1, #0]
 8008146:	2002      	movpl	r0, #2
 8008148:	4770      	bx	lr
 800814a:	b298      	uxth	r0, r3
 800814c:	b9b0      	cbnz	r0, 800817c <__lo0bits+0x54>
 800814e:	0c1b      	lsrs	r3, r3, #16
 8008150:	2010      	movs	r0, #16
 8008152:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008156:	bf04      	itt	eq
 8008158:	0a1b      	lsreq	r3, r3, #8
 800815a:	3008      	addeq	r0, #8
 800815c:	071a      	lsls	r2, r3, #28
 800815e:	bf04      	itt	eq
 8008160:	091b      	lsreq	r3, r3, #4
 8008162:	3004      	addeq	r0, #4
 8008164:	079a      	lsls	r2, r3, #30
 8008166:	bf04      	itt	eq
 8008168:	089b      	lsreq	r3, r3, #2
 800816a:	3002      	addeq	r0, #2
 800816c:	07da      	lsls	r2, r3, #31
 800816e:	d403      	bmi.n	8008178 <__lo0bits+0x50>
 8008170:	085b      	lsrs	r3, r3, #1
 8008172:	f100 0001 	add.w	r0, r0, #1
 8008176:	d005      	beq.n	8008184 <__lo0bits+0x5c>
 8008178:	600b      	str	r3, [r1, #0]
 800817a:	4770      	bx	lr
 800817c:	4610      	mov	r0, r2
 800817e:	e7e8      	b.n	8008152 <__lo0bits+0x2a>
 8008180:	2000      	movs	r0, #0
 8008182:	4770      	bx	lr
 8008184:	2020      	movs	r0, #32
 8008186:	4770      	bx	lr

08008188 <__i2b>:
 8008188:	b510      	push	{r4, lr}
 800818a:	460c      	mov	r4, r1
 800818c:	2101      	movs	r1, #1
 800818e:	f7ff feb5 	bl	8007efc <_Balloc>
 8008192:	4602      	mov	r2, r0
 8008194:	b928      	cbnz	r0, 80081a2 <__i2b+0x1a>
 8008196:	4b05      	ldr	r3, [pc, #20]	; (80081ac <__i2b+0x24>)
 8008198:	4805      	ldr	r0, [pc, #20]	; (80081b0 <__i2b+0x28>)
 800819a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800819e:	f001 f9cf 	bl	8009540 <__assert_func>
 80081a2:	2301      	movs	r3, #1
 80081a4:	6144      	str	r4, [r0, #20]
 80081a6:	6103      	str	r3, [r0, #16]
 80081a8:	bd10      	pop	{r4, pc}
 80081aa:	bf00      	nop
 80081ac:	0800a4ac 	.word	0x0800a4ac
 80081b0:	0800a53c 	.word	0x0800a53c

080081b4 <__multiply>:
 80081b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081b8:	4614      	mov	r4, r2
 80081ba:	690a      	ldr	r2, [r1, #16]
 80081bc:	6923      	ldr	r3, [r4, #16]
 80081be:	429a      	cmp	r2, r3
 80081c0:	bfb8      	it	lt
 80081c2:	460b      	movlt	r3, r1
 80081c4:	460d      	mov	r5, r1
 80081c6:	bfbc      	itt	lt
 80081c8:	4625      	movlt	r5, r4
 80081ca:	461c      	movlt	r4, r3
 80081cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80081d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80081d4:	68ab      	ldr	r3, [r5, #8]
 80081d6:	6869      	ldr	r1, [r5, #4]
 80081d8:	eb0a 0709 	add.w	r7, sl, r9
 80081dc:	42bb      	cmp	r3, r7
 80081de:	b085      	sub	sp, #20
 80081e0:	bfb8      	it	lt
 80081e2:	3101      	addlt	r1, #1
 80081e4:	f7ff fe8a 	bl	8007efc <_Balloc>
 80081e8:	b930      	cbnz	r0, 80081f8 <__multiply+0x44>
 80081ea:	4602      	mov	r2, r0
 80081ec:	4b42      	ldr	r3, [pc, #264]	; (80082f8 <__multiply+0x144>)
 80081ee:	4843      	ldr	r0, [pc, #268]	; (80082fc <__multiply+0x148>)
 80081f0:	f240 115d 	movw	r1, #349	; 0x15d
 80081f4:	f001 f9a4 	bl	8009540 <__assert_func>
 80081f8:	f100 0614 	add.w	r6, r0, #20
 80081fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008200:	4633      	mov	r3, r6
 8008202:	2200      	movs	r2, #0
 8008204:	4543      	cmp	r3, r8
 8008206:	d31e      	bcc.n	8008246 <__multiply+0x92>
 8008208:	f105 0c14 	add.w	ip, r5, #20
 800820c:	f104 0314 	add.w	r3, r4, #20
 8008210:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008214:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008218:	9202      	str	r2, [sp, #8]
 800821a:	ebac 0205 	sub.w	r2, ip, r5
 800821e:	3a15      	subs	r2, #21
 8008220:	f022 0203 	bic.w	r2, r2, #3
 8008224:	3204      	adds	r2, #4
 8008226:	f105 0115 	add.w	r1, r5, #21
 800822a:	458c      	cmp	ip, r1
 800822c:	bf38      	it	cc
 800822e:	2204      	movcc	r2, #4
 8008230:	9201      	str	r2, [sp, #4]
 8008232:	9a02      	ldr	r2, [sp, #8]
 8008234:	9303      	str	r3, [sp, #12]
 8008236:	429a      	cmp	r2, r3
 8008238:	d808      	bhi.n	800824c <__multiply+0x98>
 800823a:	2f00      	cmp	r7, #0
 800823c:	dc55      	bgt.n	80082ea <__multiply+0x136>
 800823e:	6107      	str	r7, [r0, #16]
 8008240:	b005      	add	sp, #20
 8008242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008246:	f843 2b04 	str.w	r2, [r3], #4
 800824a:	e7db      	b.n	8008204 <__multiply+0x50>
 800824c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008250:	f1ba 0f00 	cmp.w	sl, #0
 8008254:	d020      	beq.n	8008298 <__multiply+0xe4>
 8008256:	f105 0e14 	add.w	lr, r5, #20
 800825a:	46b1      	mov	r9, r6
 800825c:	2200      	movs	r2, #0
 800825e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008262:	f8d9 b000 	ldr.w	fp, [r9]
 8008266:	b2a1      	uxth	r1, r4
 8008268:	fa1f fb8b 	uxth.w	fp, fp
 800826c:	fb0a b101 	mla	r1, sl, r1, fp
 8008270:	4411      	add	r1, r2
 8008272:	f8d9 2000 	ldr.w	r2, [r9]
 8008276:	0c24      	lsrs	r4, r4, #16
 8008278:	0c12      	lsrs	r2, r2, #16
 800827a:	fb0a 2404 	mla	r4, sl, r4, r2
 800827e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008282:	b289      	uxth	r1, r1
 8008284:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008288:	45f4      	cmp	ip, lr
 800828a:	f849 1b04 	str.w	r1, [r9], #4
 800828e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008292:	d8e4      	bhi.n	800825e <__multiply+0xaa>
 8008294:	9901      	ldr	r1, [sp, #4]
 8008296:	5072      	str	r2, [r6, r1]
 8008298:	9a03      	ldr	r2, [sp, #12]
 800829a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800829e:	3304      	adds	r3, #4
 80082a0:	f1b9 0f00 	cmp.w	r9, #0
 80082a4:	d01f      	beq.n	80082e6 <__multiply+0x132>
 80082a6:	6834      	ldr	r4, [r6, #0]
 80082a8:	f105 0114 	add.w	r1, r5, #20
 80082ac:	46b6      	mov	lr, r6
 80082ae:	f04f 0a00 	mov.w	sl, #0
 80082b2:	880a      	ldrh	r2, [r1, #0]
 80082b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80082b8:	fb09 b202 	mla	r2, r9, r2, fp
 80082bc:	4492      	add	sl, r2
 80082be:	b2a4      	uxth	r4, r4
 80082c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80082c4:	f84e 4b04 	str.w	r4, [lr], #4
 80082c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80082cc:	f8be 2000 	ldrh.w	r2, [lr]
 80082d0:	0c24      	lsrs	r4, r4, #16
 80082d2:	fb09 2404 	mla	r4, r9, r4, r2
 80082d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80082da:	458c      	cmp	ip, r1
 80082dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80082e0:	d8e7      	bhi.n	80082b2 <__multiply+0xfe>
 80082e2:	9a01      	ldr	r2, [sp, #4]
 80082e4:	50b4      	str	r4, [r6, r2]
 80082e6:	3604      	adds	r6, #4
 80082e8:	e7a3      	b.n	8008232 <__multiply+0x7e>
 80082ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1a5      	bne.n	800823e <__multiply+0x8a>
 80082f2:	3f01      	subs	r7, #1
 80082f4:	e7a1      	b.n	800823a <__multiply+0x86>
 80082f6:	bf00      	nop
 80082f8:	0800a4ac 	.word	0x0800a4ac
 80082fc:	0800a53c 	.word	0x0800a53c

08008300 <__pow5mult>:
 8008300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008304:	4615      	mov	r5, r2
 8008306:	f012 0203 	ands.w	r2, r2, #3
 800830a:	4606      	mov	r6, r0
 800830c:	460f      	mov	r7, r1
 800830e:	d007      	beq.n	8008320 <__pow5mult+0x20>
 8008310:	4c25      	ldr	r4, [pc, #148]	; (80083a8 <__pow5mult+0xa8>)
 8008312:	3a01      	subs	r2, #1
 8008314:	2300      	movs	r3, #0
 8008316:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800831a:	f7ff fe51 	bl	8007fc0 <__multadd>
 800831e:	4607      	mov	r7, r0
 8008320:	10ad      	asrs	r5, r5, #2
 8008322:	d03d      	beq.n	80083a0 <__pow5mult+0xa0>
 8008324:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008326:	b97c      	cbnz	r4, 8008348 <__pow5mult+0x48>
 8008328:	2010      	movs	r0, #16
 800832a:	f7ff fdbf 	bl	8007eac <malloc>
 800832e:	4602      	mov	r2, r0
 8008330:	6270      	str	r0, [r6, #36]	; 0x24
 8008332:	b928      	cbnz	r0, 8008340 <__pow5mult+0x40>
 8008334:	4b1d      	ldr	r3, [pc, #116]	; (80083ac <__pow5mult+0xac>)
 8008336:	481e      	ldr	r0, [pc, #120]	; (80083b0 <__pow5mult+0xb0>)
 8008338:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800833c:	f001 f900 	bl	8009540 <__assert_func>
 8008340:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008344:	6004      	str	r4, [r0, #0]
 8008346:	60c4      	str	r4, [r0, #12]
 8008348:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800834c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008350:	b94c      	cbnz	r4, 8008366 <__pow5mult+0x66>
 8008352:	f240 2171 	movw	r1, #625	; 0x271
 8008356:	4630      	mov	r0, r6
 8008358:	f7ff ff16 	bl	8008188 <__i2b>
 800835c:	2300      	movs	r3, #0
 800835e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008362:	4604      	mov	r4, r0
 8008364:	6003      	str	r3, [r0, #0]
 8008366:	f04f 0900 	mov.w	r9, #0
 800836a:	07eb      	lsls	r3, r5, #31
 800836c:	d50a      	bpl.n	8008384 <__pow5mult+0x84>
 800836e:	4639      	mov	r1, r7
 8008370:	4622      	mov	r2, r4
 8008372:	4630      	mov	r0, r6
 8008374:	f7ff ff1e 	bl	80081b4 <__multiply>
 8008378:	4639      	mov	r1, r7
 800837a:	4680      	mov	r8, r0
 800837c:	4630      	mov	r0, r6
 800837e:	f7ff fdfd 	bl	8007f7c <_Bfree>
 8008382:	4647      	mov	r7, r8
 8008384:	106d      	asrs	r5, r5, #1
 8008386:	d00b      	beq.n	80083a0 <__pow5mult+0xa0>
 8008388:	6820      	ldr	r0, [r4, #0]
 800838a:	b938      	cbnz	r0, 800839c <__pow5mult+0x9c>
 800838c:	4622      	mov	r2, r4
 800838e:	4621      	mov	r1, r4
 8008390:	4630      	mov	r0, r6
 8008392:	f7ff ff0f 	bl	80081b4 <__multiply>
 8008396:	6020      	str	r0, [r4, #0]
 8008398:	f8c0 9000 	str.w	r9, [r0]
 800839c:	4604      	mov	r4, r0
 800839e:	e7e4      	b.n	800836a <__pow5mult+0x6a>
 80083a0:	4638      	mov	r0, r7
 80083a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083a6:	bf00      	nop
 80083a8:	0800a690 	.word	0x0800a690
 80083ac:	0800a436 	.word	0x0800a436
 80083b0:	0800a53c 	.word	0x0800a53c

080083b4 <__lshift>:
 80083b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b8:	460c      	mov	r4, r1
 80083ba:	6849      	ldr	r1, [r1, #4]
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083c2:	68a3      	ldr	r3, [r4, #8]
 80083c4:	4607      	mov	r7, r0
 80083c6:	4691      	mov	r9, r2
 80083c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083cc:	f108 0601 	add.w	r6, r8, #1
 80083d0:	42b3      	cmp	r3, r6
 80083d2:	db0b      	blt.n	80083ec <__lshift+0x38>
 80083d4:	4638      	mov	r0, r7
 80083d6:	f7ff fd91 	bl	8007efc <_Balloc>
 80083da:	4605      	mov	r5, r0
 80083dc:	b948      	cbnz	r0, 80083f2 <__lshift+0x3e>
 80083de:	4602      	mov	r2, r0
 80083e0:	4b28      	ldr	r3, [pc, #160]	; (8008484 <__lshift+0xd0>)
 80083e2:	4829      	ldr	r0, [pc, #164]	; (8008488 <__lshift+0xd4>)
 80083e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80083e8:	f001 f8aa 	bl	8009540 <__assert_func>
 80083ec:	3101      	adds	r1, #1
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	e7ee      	b.n	80083d0 <__lshift+0x1c>
 80083f2:	2300      	movs	r3, #0
 80083f4:	f100 0114 	add.w	r1, r0, #20
 80083f8:	f100 0210 	add.w	r2, r0, #16
 80083fc:	4618      	mov	r0, r3
 80083fe:	4553      	cmp	r3, sl
 8008400:	db33      	blt.n	800846a <__lshift+0xb6>
 8008402:	6920      	ldr	r0, [r4, #16]
 8008404:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008408:	f104 0314 	add.w	r3, r4, #20
 800840c:	f019 091f 	ands.w	r9, r9, #31
 8008410:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008414:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008418:	d02b      	beq.n	8008472 <__lshift+0xbe>
 800841a:	f1c9 0e20 	rsb	lr, r9, #32
 800841e:	468a      	mov	sl, r1
 8008420:	2200      	movs	r2, #0
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	fa00 f009 	lsl.w	r0, r0, r9
 8008428:	4302      	orrs	r2, r0
 800842a:	f84a 2b04 	str.w	r2, [sl], #4
 800842e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008432:	459c      	cmp	ip, r3
 8008434:	fa22 f20e 	lsr.w	r2, r2, lr
 8008438:	d8f3      	bhi.n	8008422 <__lshift+0x6e>
 800843a:	ebac 0304 	sub.w	r3, ip, r4
 800843e:	3b15      	subs	r3, #21
 8008440:	f023 0303 	bic.w	r3, r3, #3
 8008444:	3304      	adds	r3, #4
 8008446:	f104 0015 	add.w	r0, r4, #21
 800844a:	4584      	cmp	ip, r0
 800844c:	bf38      	it	cc
 800844e:	2304      	movcc	r3, #4
 8008450:	50ca      	str	r2, [r1, r3]
 8008452:	b10a      	cbz	r2, 8008458 <__lshift+0xa4>
 8008454:	f108 0602 	add.w	r6, r8, #2
 8008458:	3e01      	subs	r6, #1
 800845a:	4638      	mov	r0, r7
 800845c:	612e      	str	r6, [r5, #16]
 800845e:	4621      	mov	r1, r4
 8008460:	f7ff fd8c 	bl	8007f7c <_Bfree>
 8008464:	4628      	mov	r0, r5
 8008466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800846a:	f842 0f04 	str.w	r0, [r2, #4]!
 800846e:	3301      	adds	r3, #1
 8008470:	e7c5      	b.n	80083fe <__lshift+0x4a>
 8008472:	3904      	subs	r1, #4
 8008474:	f853 2b04 	ldr.w	r2, [r3], #4
 8008478:	f841 2f04 	str.w	r2, [r1, #4]!
 800847c:	459c      	cmp	ip, r3
 800847e:	d8f9      	bhi.n	8008474 <__lshift+0xc0>
 8008480:	e7ea      	b.n	8008458 <__lshift+0xa4>
 8008482:	bf00      	nop
 8008484:	0800a4ac 	.word	0x0800a4ac
 8008488:	0800a53c 	.word	0x0800a53c

0800848c <__mcmp>:
 800848c:	b530      	push	{r4, r5, lr}
 800848e:	6902      	ldr	r2, [r0, #16]
 8008490:	690c      	ldr	r4, [r1, #16]
 8008492:	1b12      	subs	r2, r2, r4
 8008494:	d10e      	bne.n	80084b4 <__mcmp+0x28>
 8008496:	f100 0314 	add.w	r3, r0, #20
 800849a:	3114      	adds	r1, #20
 800849c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80084a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80084a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80084a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80084ac:	42a5      	cmp	r5, r4
 80084ae:	d003      	beq.n	80084b8 <__mcmp+0x2c>
 80084b0:	d305      	bcc.n	80084be <__mcmp+0x32>
 80084b2:	2201      	movs	r2, #1
 80084b4:	4610      	mov	r0, r2
 80084b6:	bd30      	pop	{r4, r5, pc}
 80084b8:	4283      	cmp	r3, r0
 80084ba:	d3f3      	bcc.n	80084a4 <__mcmp+0x18>
 80084bc:	e7fa      	b.n	80084b4 <__mcmp+0x28>
 80084be:	f04f 32ff 	mov.w	r2, #4294967295
 80084c2:	e7f7      	b.n	80084b4 <__mcmp+0x28>

080084c4 <__mdiff>:
 80084c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c8:	460c      	mov	r4, r1
 80084ca:	4606      	mov	r6, r0
 80084cc:	4611      	mov	r1, r2
 80084ce:	4620      	mov	r0, r4
 80084d0:	4617      	mov	r7, r2
 80084d2:	f7ff ffdb 	bl	800848c <__mcmp>
 80084d6:	1e05      	subs	r5, r0, #0
 80084d8:	d110      	bne.n	80084fc <__mdiff+0x38>
 80084da:	4629      	mov	r1, r5
 80084dc:	4630      	mov	r0, r6
 80084de:	f7ff fd0d 	bl	8007efc <_Balloc>
 80084e2:	b930      	cbnz	r0, 80084f2 <__mdiff+0x2e>
 80084e4:	4b39      	ldr	r3, [pc, #228]	; (80085cc <__mdiff+0x108>)
 80084e6:	4602      	mov	r2, r0
 80084e8:	f240 2132 	movw	r1, #562	; 0x232
 80084ec:	4838      	ldr	r0, [pc, #224]	; (80085d0 <__mdiff+0x10c>)
 80084ee:	f001 f827 	bl	8009540 <__assert_func>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80084f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fc:	bfa4      	itt	ge
 80084fe:	463b      	movge	r3, r7
 8008500:	4627      	movge	r7, r4
 8008502:	4630      	mov	r0, r6
 8008504:	6879      	ldr	r1, [r7, #4]
 8008506:	bfa6      	itte	ge
 8008508:	461c      	movge	r4, r3
 800850a:	2500      	movge	r5, #0
 800850c:	2501      	movlt	r5, #1
 800850e:	f7ff fcf5 	bl	8007efc <_Balloc>
 8008512:	b920      	cbnz	r0, 800851e <__mdiff+0x5a>
 8008514:	4b2d      	ldr	r3, [pc, #180]	; (80085cc <__mdiff+0x108>)
 8008516:	4602      	mov	r2, r0
 8008518:	f44f 7110 	mov.w	r1, #576	; 0x240
 800851c:	e7e6      	b.n	80084ec <__mdiff+0x28>
 800851e:	693e      	ldr	r6, [r7, #16]
 8008520:	60c5      	str	r5, [r0, #12]
 8008522:	6925      	ldr	r5, [r4, #16]
 8008524:	f107 0114 	add.w	r1, r7, #20
 8008528:	f104 0914 	add.w	r9, r4, #20
 800852c:	f100 0e14 	add.w	lr, r0, #20
 8008530:	f107 0210 	add.w	r2, r7, #16
 8008534:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008538:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800853c:	46f2      	mov	sl, lr
 800853e:	2700      	movs	r7, #0
 8008540:	f859 3b04 	ldr.w	r3, [r9], #4
 8008544:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008548:	fa1f f883 	uxth.w	r8, r3
 800854c:	fa17 f78b 	uxtah	r7, r7, fp
 8008550:	0c1b      	lsrs	r3, r3, #16
 8008552:	eba7 0808 	sub.w	r8, r7, r8
 8008556:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800855a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800855e:	fa1f f888 	uxth.w	r8, r8
 8008562:	141f      	asrs	r7, r3, #16
 8008564:	454d      	cmp	r5, r9
 8008566:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800856a:	f84a 3b04 	str.w	r3, [sl], #4
 800856e:	d8e7      	bhi.n	8008540 <__mdiff+0x7c>
 8008570:	1b2b      	subs	r3, r5, r4
 8008572:	3b15      	subs	r3, #21
 8008574:	f023 0303 	bic.w	r3, r3, #3
 8008578:	3304      	adds	r3, #4
 800857a:	3415      	adds	r4, #21
 800857c:	42a5      	cmp	r5, r4
 800857e:	bf38      	it	cc
 8008580:	2304      	movcc	r3, #4
 8008582:	4419      	add	r1, r3
 8008584:	4473      	add	r3, lr
 8008586:	469e      	mov	lr, r3
 8008588:	460d      	mov	r5, r1
 800858a:	4565      	cmp	r5, ip
 800858c:	d30e      	bcc.n	80085ac <__mdiff+0xe8>
 800858e:	f10c 0203 	add.w	r2, ip, #3
 8008592:	1a52      	subs	r2, r2, r1
 8008594:	f022 0203 	bic.w	r2, r2, #3
 8008598:	3903      	subs	r1, #3
 800859a:	458c      	cmp	ip, r1
 800859c:	bf38      	it	cc
 800859e:	2200      	movcc	r2, #0
 80085a0:	441a      	add	r2, r3
 80085a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80085a6:	b17b      	cbz	r3, 80085c8 <__mdiff+0x104>
 80085a8:	6106      	str	r6, [r0, #16]
 80085aa:	e7a5      	b.n	80084f8 <__mdiff+0x34>
 80085ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80085b0:	fa17 f488 	uxtah	r4, r7, r8
 80085b4:	1422      	asrs	r2, r4, #16
 80085b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80085ba:	b2a4      	uxth	r4, r4
 80085bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80085c0:	f84e 4b04 	str.w	r4, [lr], #4
 80085c4:	1417      	asrs	r7, r2, #16
 80085c6:	e7e0      	b.n	800858a <__mdiff+0xc6>
 80085c8:	3e01      	subs	r6, #1
 80085ca:	e7ea      	b.n	80085a2 <__mdiff+0xde>
 80085cc:	0800a4ac 	.word	0x0800a4ac
 80085d0:	0800a53c 	.word	0x0800a53c

080085d4 <__ulp>:
 80085d4:	b082      	sub	sp, #8
 80085d6:	ed8d 0b00 	vstr	d0, [sp]
 80085da:	9b01      	ldr	r3, [sp, #4]
 80085dc:	4912      	ldr	r1, [pc, #72]	; (8008628 <__ulp+0x54>)
 80085de:	4019      	ands	r1, r3
 80085e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80085e4:	2900      	cmp	r1, #0
 80085e6:	dd05      	ble.n	80085f4 <__ulp+0x20>
 80085e8:	2200      	movs	r2, #0
 80085ea:	460b      	mov	r3, r1
 80085ec:	ec43 2b10 	vmov	d0, r2, r3
 80085f0:	b002      	add	sp, #8
 80085f2:	4770      	bx	lr
 80085f4:	4249      	negs	r1, r1
 80085f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80085fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80085fe:	f04f 0200 	mov.w	r2, #0
 8008602:	f04f 0300 	mov.w	r3, #0
 8008606:	da04      	bge.n	8008612 <__ulp+0x3e>
 8008608:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800860c:	fa41 f300 	asr.w	r3, r1, r0
 8008610:	e7ec      	b.n	80085ec <__ulp+0x18>
 8008612:	f1a0 0114 	sub.w	r1, r0, #20
 8008616:	291e      	cmp	r1, #30
 8008618:	bfda      	itte	le
 800861a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800861e:	fa20 f101 	lsrle.w	r1, r0, r1
 8008622:	2101      	movgt	r1, #1
 8008624:	460a      	mov	r2, r1
 8008626:	e7e1      	b.n	80085ec <__ulp+0x18>
 8008628:	7ff00000 	.word	0x7ff00000

0800862c <__b2d>:
 800862c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862e:	6905      	ldr	r5, [r0, #16]
 8008630:	f100 0714 	add.w	r7, r0, #20
 8008634:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008638:	1f2e      	subs	r6, r5, #4
 800863a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800863e:	4620      	mov	r0, r4
 8008640:	f7ff fd52 	bl	80080e8 <__hi0bits>
 8008644:	f1c0 0320 	rsb	r3, r0, #32
 8008648:	280a      	cmp	r0, #10
 800864a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80086c8 <__b2d+0x9c>
 800864e:	600b      	str	r3, [r1, #0]
 8008650:	dc14      	bgt.n	800867c <__b2d+0x50>
 8008652:	f1c0 0e0b 	rsb	lr, r0, #11
 8008656:	fa24 f10e 	lsr.w	r1, r4, lr
 800865a:	42b7      	cmp	r7, r6
 800865c:	ea41 030c 	orr.w	r3, r1, ip
 8008660:	bf34      	ite	cc
 8008662:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008666:	2100      	movcs	r1, #0
 8008668:	3015      	adds	r0, #21
 800866a:	fa04 f000 	lsl.w	r0, r4, r0
 800866e:	fa21 f10e 	lsr.w	r1, r1, lr
 8008672:	ea40 0201 	orr.w	r2, r0, r1
 8008676:	ec43 2b10 	vmov	d0, r2, r3
 800867a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800867c:	42b7      	cmp	r7, r6
 800867e:	bf3a      	itte	cc
 8008680:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008684:	f1a5 0608 	subcc.w	r6, r5, #8
 8008688:	2100      	movcs	r1, #0
 800868a:	380b      	subs	r0, #11
 800868c:	d017      	beq.n	80086be <__b2d+0x92>
 800868e:	f1c0 0c20 	rsb	ip, r0, #32
 8008692:	fa04 f500 	lsl.w	r5, r4, r0
 8008696:	42be      	cmp	r6, r7
 8008698:	fa21 f40c 	lsr.w	r4, r1, ip
 800869c:	ea45 0504 	orr.w	r5, r5, r4
 80086a0:	bf8c      	ite	hi
 80086a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80086a6:	2400      	movls	r4, #0
 80086a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80086ac:	fa01 f000 	lsl.w	r0, r1, r0
 80086b0:	fa24 f40c 	lsr.w	r4, r4, ip
 80086b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086b8:	ea40 0204 	orr.w	r2, r0, r4
 80086bc:	e7db      	b.n	8008676 <__b2d+0x4a>
 80086be:	ea44 030c 	orr.w	r3, r4, ip
 80086c2:	460a      	mov	r2, r1
 80086c4:	e7d7      	b.n	8008676 <__b2d+0x4a>
 80086c6:	bf00      	nop
 80086c8:	3ff00000 	.word	0x3ff00000

080086cc <__d2b>:
 80086cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086d0:	4689      	mov	r9, r1
 80086d2:	2101      	movs	r1, #1
 80086d4:	ec57 6b10 	vmov	r6, r7, d0
 80086d8:	4690      	mov	r8, r2
 80086da:	f7ff fc0f 	bl	8007efc <_Balloc>
 80086de:	4604      	mov	r4, r0
 80086e0:	b930      	cbnz	r0, 80086f0 <__d2b+0x24>
 80086e2:	4602      	mov	r2, r0
 80086e4:	4b25      	ldr	r3, [pc, #148]	; (800877c <__d2b+0xb0>)
 80086e6:	4826      	ldr	r0, [pc, #152]	; (8008780 <__d2b+0xb4>)
 80086e8:	f240 310a 	movw	r1, #778	; 0x30a
 80086ec:	f000 ff28 	bl	8009540 <__assert_func>
 80086f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80086f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086f8:	bb35      	cbnz	r5, 8008748 <__d2b+0x7c>
 80086fa:	2e00      	cmp	r6, #0
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	d028      	beq.n	8008752 <__d2b+0x86>
 8008700:	4668      	mov	r0, sp
 8008702:	9600      	str	r6, [sp, #0]
 8008704:	f7ff fd10 	bl	8008128 <__lo0bits>
 8008708:	9900      	ldr	r1, [sp, #0]
 800870a:	b300      	cbz	r0, 800874e <__d2b+0x82>
 800870c:	9a01      	ldr	r2, [sp, #4]
 800870e:	f1c0 0320 	rsb	r3, r0, #32
 8008712:	fa02 f303 	lsl.w	r3, r2, r3
 8008716:	430b      	orrs	r3, r1
 8008718:	40c2      	lsrs	r2, r0
 800871a:	6163      	str	r3, [r4, #20]
 800871c:	9201      	str	r2, [sp, #4]
 800871e:	9b01      	ldr	r3, [sp, #4]
 8008720:	61a3      	str	r3, [r4, #24]
 8008722:	2b00      	cmp	r3, #0
 8008724:	bf14      	ite	ne
 8008726:	2202      	movne	r2, #2
 8008728:	2201      	moveq	r2, #1
 800872a:	6122      	str	r2, [r4, #16]
 800872c:	b1d5      	cbz	r5, 8008764 <__d2b+0x98>
 800872e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008732:	4405      	add	r5, r0
 8008734:	f8c9 5000 	str.w	r5, [r9]
 8008738:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800873c:	f8c8 0000 	str.w	r0, [r8]
 8008740:	4620      	mov	r0, r4
 8008742:	b003      	add	sp, #12
 8008744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008748:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800874c:	e7d5      	b.n	80086fa <__d2b+0x2e>
 800874e:	6161      	str	r1, [r4, #20]
 8008750:	e7e5      	b.n	800871e <__d2b+0x52>
 8008752:	a801      	add	r0, sp, #4
 8008754:	f7ff fce8 	bl	8008128 <__lo0bits>
 8008758:	9b01      	ldr	r3, [sp, #4]
 800875a:	6163      	str	r3, [r4, #20]
 800875c:	2201      	movs	r2, #1
 800875e:	6122      	str	r2, [r4, #16]
 8008760:	3020      	adds	r0, #32
 8008762:	e7e3      	b.n	800872c <__d2b+0x60>
 8008764:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008768:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800876c:	f8c9 0000 	str.w	r0, [r9]
 8008770:	6918      	ldr	r0, [r3, #16]
 8008772:	f7ff fcb9 	bl	80080e8 <__hi0bits>
 8008776:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800877a:	e7df      	b.n	800873c <__d2b+0x70>
 800877c:	0800a4ac 	.word	0x0800a4ac
 8008780:	0800a53c 	.word	0x0800a53c

08008784 <__ratio>:
 8008784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008788:	4688      	mov	r8, r1
 800878a:	4669      	mov	r1, sp
 800878c:	4681      	mov	r9, r0
 800878e:	f7ff ff4d 	bl	800862c <__b2d>
 8008792:	a901      	add	r1, sp, #4
 8008794:	4640      	mov	r0, r8
 8008796:	ec55 4b10 	vmov	r4, r5, d0
 800879a:	f7ff ff47 	bl	800862c <__b2d>
 800879e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80087a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80087a6:	eba3 0c02 	sub.w	ip, r3, r2
 80087aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80087ae:	1a9b      	subs	r3, r3, r2
 80087b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80087b4:	ec51 0b10 	vmov	r0, r1, d0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	bfd6      	itet	le
 80087bc:	460a      	movle	r2, r1
 80087be:	462a      	movgt	r2, r5
 80087c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087c4:	468b      	mov	fp, r1
 80087c6:	462f      	mov	r7, r5
 80087c8:	bfd4      	ite	le
 80087ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80087ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80087d2:	4620      	mov	r0, r4
 80087d4:	ee10 2a10 	vmov	r2, s0
 80087d8:	465b      	mov	r3, fp
 80087da:	4639      	mov	r1, r7
 80087dc:	f7f8 f84e 	bl	800087c <__aeabi_ddiv>
 80087e0:	ec41 0b10 	vmov	d0, r0, r1
 80087e4:	b003      	add	sp, #12
 80087e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087ea <__copybits>:
 80087ea:	3901      	subs	r1, #1
 80087ec:	b570      	push	{r4, r5, r6, lr}
 80087ee:	1149      	asrs	r1, r1, #5
 80087f0:	6914      	ldr	r4, [r2, #16]
 80087f2:	3101      	adds	r1, #1
 80087f4:	f102 0314 	add.w	r3, r2, #20
 80087f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80087fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008800:	1f05      	subs	r5, r0, #4
 8008802:	42a3      	cmp	r3, r4
 8008804:	d30c      	bcc.n	8008820 <__copybits+0x36>
 8008806:	1aa3      	subs	r3, r4, r2
 8008808:	3b11      	subs	r3, #17
 800880a:	f023 0303 	bic.w	r3, r3, #3
 800880e:	3211      	adds	r2, #17
 8008810:	42a2      	cmp	r2, r4
 8008812:	bf88      	it	hi
 8008814:	2300      	movhi	r3, #0
 8008816:	4418      	add	r0, r3
 8008818:	2300      	movs	r3, #0
 800881a:	4288      	cmp	r0, r1
 800881c:	d305      	bcc.n	800882a <__copybits+0x40>
 800881e:	bd70      	pop	{r4, r5, r6, pc}
 8008820:	f853 6b04 	ldr.w	r6, [r3], #4
 8008824:	f845 6f04 	str.w	r6, [r5, #4]!
 8008828:	e7eb      	b.n	8008802 <__copybits+0x18>
 800882a:	f840 3b04 	str.w	r3, [r0], #4
 800882e:	e7f4      	b.n	800881a <__copybits+0x30>

08008830 <__any_on>:
 8008830:	f100 0214 	add.w	r2, r0, #20
 8008834:	6900      	ldr	r0, [r0, #16]
 8008836:	114b      	asrs	r3, r1, #5
 8008838:	4298      	cmp	r0, r3
 800883a:	b510      	push	{r4, lr}
 800883c:	db11      	blt.n	8008862 <__any_on+0x32>
 800883e:	dd0a      	ble.n	8008856 <__any_on+0x26>
 8008840:	f011 011f 	ands.w	r1, r1, #31
 8008844:	d007      	beq.n	8008856 <__any_on+0x26>
 8008846:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800884a:	fa24 f001 	lsr.w	r0, r4, r1
 800884e:	fa00 f101 	lsl.w	r1, r0, r1
 8008852:	428c      	cmp	r4, r1
 8008854:	d10b      	bne.n	800886e <__any_on+0x3e>
 8008856:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800885a:	4293      	cmp	r3, r2
 800885c:	d803      	bhi.n	8008866 <__any_on+0x36>
 800885e:	2000      	movs	r0, #0
 8008860:	bd10      	pop	{r4, pc}
 8008862:	4603      	mov	r3, r0
 8008864:	e7f7      	b.n	8008856 <__any_on+0x26>
 8008866:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800886a:	2900      	cmp	r1, #0
 800886c:	d0f5      	beq.n	800885a <__any_on+0x2a>
 800886e:	2001      	movs	r0, #1
 8008870:	e7f6      	b.n	8008860 <__any_on+0x30>

08008872 <_calloc_r>:
 8008872:	b513      	push	{r0, r1, r4, lr}
 8008874:	434a      	muls	r2, r1
 8008876:	4611      	mov	r1, r2
 8008878:	9201      	str	r2, [sp, #4]
 800887a:	f000 f859 	bl	8008930 <_malloc_r>
 800887e:	4604      	mov	r4, r0
 8008880:	b118      	cbz	r0, 800888a <_calloc_r+0x18>
 8008882:	9a01      	ldr	r2, [sp, #4]
 8008884:	2100      	movs	r1, #0
 8008886:	f7fc fb19 	bl	8004ebc <memset>
 800888a:	4620      	mov	r0, r4
 800888c:	b002      	add	sp, #8
 800888e:	bd10      	pop	{r4, pc}

08008890 <_free_r>:
 8008890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008892:	2900      	cmp	r1, #0
 8008894:	d048      	beq.n	8008928 <_free_r+0x98>
 8008896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800889a:	9001      	str	r0, [sp, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	f1a1 0404 	sub.w	r4, r1, #4
 80088a2:	bfb8      	it	lt
 80088a4:	18e4      	addlt	r4, r4, r3
 80088a6:	f001 f84f 	bl	8009948 <__malloc_lock>
 80088aa:	4a20      	ldr	r2, [pc, #128]	; (800892c <_free_r+0x9c>)
 80088ac:	9801      	ldr	r0, [sp, #4]
 80088ae:	6813      	ldr	r3, [r2, #0]
 80088b0:	4615      	mov	r5, r2
 80088b2:	b933      	cbnz	r3, 80088c2 <_free_r+0x32>
 80088b4:	6063      	str	r3, [r4, #4]
 80088b6:	6014      	str	r4, [r2, #0]
 80088b8:	b003      	add	sp, #12
 80088ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088be:	f001 b849 	b.w	8009954 <__malloc_unlock>
 80088c2:	42a3      	cmp	r3, r4
 80088c4:	d90b      	bls.n	80088de <_free_r+0x4e>
 80088c6:	6821      	ldr	r1, [r4, #0]
 80088c8:	1862      	adds	r2, r4, r1
 80088ca:	4293      	cmp	r3, r2
 80088cc:	bf04      	itt	eq
 80088ce:	681a      	ldreq	r2, [r3, #0]
 80088d0:	685b      	ldreq	r3, [r3, #4]
 80088d2:	6063      	str	r3, [r4, #4]
 80088d4:	bf04      	itt	eq
 80088d6:	1852      	addeq	r2, r2, r1
 80088d8:	6022      	streq	r2, [r4, #0]
 80088da:	602c      	str	r4, [r5, #0]
 80088dc:	e7ec      	b.n	80088b8 <_free_r+0x28>
 80088de:	461a      	mov	r2, r3
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	b10b      	cbz	r3, 80088e8 <_free_r+0x58>
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	d9fa      	bls.n	80088de <_free_r+0x4e>
 80088e8:	6811      	ldr	r1, [r2, #0]
 80088ea:	1855      	adds	r5, r2, r1
 80088ec:	42a5      	cmp	r5, r4
 80088ee:	d10b      	bne.n	8008908 <_free_r+0x78>
 80088f0:	6824      	ldr	r4, [r4, #0]
 80088f2:	4421      	add	r1, r4
 80088f4:	1854      	adds	r4, r2, r1
 80088f6:	42a3      	cmp	r3, r4
 80088f8:	6011      	str	r1, [r2, #0]
 80088fa:	d1dd      	bne.n	80088b8 <_free_r+0x28>
 80088fc:	681c      	ldr	r4, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	6053      	str	r3, [r2, #4]
 8008902:	4421      	add	r1, r4
 8008904:	6011      	str	r1, [r2, #0]
 8008906:	e7d7      	b.n	80088b8 <_free_r+0x28>
 8008908:	d902      	bls.n	8008910 <_free_r+0x80>
 800890a:	230c      	movs	r3, #12
 800890c:	6003      	str	r3, [r0, #0]
 800890e:	e7d3      	b.n	80088b8 <_free_r+0x28>
 8008910:	6825      	ldr	r5, [r4, #0]
 8008912:	1961      	adds	r1, r4, r5
 8008914:	428b      	cmp	r3, r1
 8008916:	bf04      	itt	eq
 8008918:	6819      	ldreq	r1, [r3, #0]
 800891a:	685b      	ldreq	r3, [r3, #4]
 800891c:	6063      	str	r3, [r4, #4]
 800891e:	bf04      	itt	eq
 8008920:	1949      	addeq	r1, r1, r5
 8008922:	6021      	streq	r1, [r4, #0]
 8008924:	6054      	str	r4, [r2, #4]
 8008926:	e7c7      	b.n	80088b8 <_free_r+0x28>
 8008928:	b003      	add	sp, #12
 800892a:	bd30      	pop	{r4, r5, pc}
 800892c:	20000234 	.word	0x20000234

08008930 <_malloc_r>:
 8008930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008932:	1ccd      	adds	r5, r1, #3
 8008934:	f025 0503 	bic.w	r5, r5, #3
 8008938:	3508      	adds	r5, #8
 800893a:	2d0c      	cmp	r5, #12
 800893c:	bf38      	it	cc
 800893e:	250c      	movcc	r5, #12
 8008940:	2d00      	cmp	r5, #0
 8008942:	4606      	mov	r6, r0
 8008944:	db01      	blt.n	800894a <_malloc_r+0x1a>
 8008946:	42a9      	cmp	r1, r5
 8008948:	d903      	bls.n	8008952 <_malloc_r+0x22>
 800894a:	230c      	movs	r3, #12
 800894c:	6033      	str	r3, [r6, #0]
 800894e:	2000      	movs	r0, #0
 8008950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008952:	f000 fff9 	bl	8009948 <__malloc_lock>
 8008956:	4921      	ldr	r1, [pc, #132]	; (80089dc <_malloc_r+0xac>)
 8008958:	680a      	ldr	r2, [r1, #0]
 800895a:	4614      	mov	r4, r2
 800895c:	b99c      	cbnz	r4, 8008986 <_malloc_r+0x56>
 800895e:	4f20      	ldr	r7, [pc, #128]	; (80089e0 <_malloc_r+0xb0>)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	b923      	cbnz	r3, 800896e <_malloc_r+0x3e>
 8008964:	4621      	mov	r1, r4
 8008966:	4630      	mov	r0, r6
 8008968:	f000 fcc8 	bl	80092fc <_sbrk_r>
 800896c:	6038      	str	r0, [r7, #0]
 800896e:	4629      	mov	r1, r5
 8008970:	4630      	mov	r0, r6
 8008972:	f000 fcc3 	bl	80092fc <_sbrk_r>
 8008976:	1c43      	adds	r3, r0, #1
 8008978:	d123      	bne.n	80089c2 <_malloc_r+0x92>
 800897a:	230c      	movs	r3, #12
 800897c:	6033      	str	r3, [r6, #0]
 800897e:	4630      	mov	r0, r6
 8008980:	f000 ffe8 	bl	8009954 <__malloc_unlock>
 8008984:	e7e3      	b.n	800894e <_malloc_r+0x1e>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	1b5b      	subs	r3, r3, r5
 800898a:	d417      	bmi.n	80089bc <_malloc_r+0x8c>
 800898c:	2b0b      	cmp	r3, #11
 800898e:	d903      	bls.n	8008998 <_malloc_r+0x68>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	441c      	add	r4, r3
 8008994:	6025      	str	r5, [r4, #0]
 8008996:	e004      	b.n	80089a2 <_malloc_r+0x72>
 8008998:	6863      	ldr	r3, [r4, #4]
 800899a:	42a2      	cmp	r2, r4
 800899c:	bf0c      	ite	eq
 800899e:	600b      	streq	r3, [r1, #0]
 80089a0:	6053      	strne	r3, [r2, #4]
 80089a2:	4630      	mov	r0, r6
 80089a4:	f000 ffd6 	bl	8009954 <__malloc_unlock>
 80089a8:	f104 000b 	add.w	r0, r4, #11
 80089ac:	1d23      	adds	r3, r4, #4
 80089ae:	f020 0007 	bic.w	r0, r0, #7
 80089b2:	1ac2      	subs	r2, r0, r3
 80089b4:	d0cc      	beq.n	8008950 <_malloc_r+0x20>
 80089b6:	1a1b      	subs	r3, r3, r0
 80089b8:	50a3      	str	r3, [r4, r2]
 80089ba:	e7c9      	b.n	8008950 <_malloc_r+0x20>
 80089bc:	4622      	mov	r2, r4
 80089be:	6864      	ldr	r4, [r4, #4]
 80089c0:	e7cc      	b.n	800895c <_malloc_r+0x2c>
 80089c2:	1cc4      	adds	r4, r0, #3
 80089c4:	f024 0403 	bic.w	r4, r4, #3
 80089c8:	42a0      	cmp	r0, r4
 80089ca:	d0e3      	beq.n	8008994 <_malloc_r+0x64>
 80089cc:	1a21      	subs	r1, r4, r0
 80089ce:	4630      	mov	r0, r6
 80089d0:	f000 fc94 	bl	80092fc <_sbrk_r>
 80089d4:	3001      	adds	r0, #1
 80089d6:	d1dd      	bne.n	8008994 <_malloc_r+0x64>
 80089d8:	e7cf      	b.n	800897a <_malloc_r+0x4a>
 80089da:	bf00      	nop
 80089dc:	20000234 	.word	0x20000234
 80089e0:	20000238 	.word	0x20000238

080089e4 <__ssputs_r>:
 80089e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e8:	688e      	ldr	r6, [r1, #8]
 80089ea:	429e      	cmp	r6, r3
 80089ec:	4682      	mov	sl, r0
 80089ee:	460c      	mov	r4, r1
 80089f0:	4690      	mov	r8, r2
 80089f2:	461f      	mov	r7, r3
 80089f4:	d838      	bhi.n	8008a68 <__ssputs_r+0x84>
 80089f6:	898a      	ldrh	r2, [r1, #12]
 80089f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089fc:	d032      	beq.n	8008a64 <__ssputs_r+0x80>
 80089fe:	6825      	ldr	r5, [r4, #0]
 8008a00:	6909      	ldr	r1, [r1, #16]
 8008a02:	eba5 0901 	sub.w	r9, r5, r1
 8008a06:	6965      	ldr	r5, [r4, #20]
 8008a08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a10:	3301      	adds	r3, #1
 8008a12:	444b      	add	r3, r9
 8008a14:	106d      	asrs	r5, r5, #1
 8008a16:	429d      	cmp	r5, r3
 8008a18:	bf38      	it	cc
 8008a1a:	461d      	movcc	r5, r3
 8008a1c:	0553      	lsls	r3, r2, #21
 8008a1e:	d531      	bpl.n	8008a84 <__ssputs_r+0xa0>
 8008a20:	4629      	mov	r1, r5
 8008a22:	f7ff ff85 	bl	8008930 <_malloc_r>
 8008a26:	4606      	mov	r6, r0
 8008a28:	b950      	cbnz	r0, 8008a40 <__ssputs_r+0x5c>
 8008a2a:	230c      	movs	r3, #12
 8008a2c:	f8ca 3000 	str.w	r3, [sl]
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a40:	6921      	ldr	r1, [r4, #16]
 8008a42:	464a      	mov	r2, r9
 8008a44:	f7ff fa4c 	bl	8007ee0 <memcpy>
 8008a48:	89a3      	ldrh	r3, [r4, #12]
 8008a4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a52:	81a3      	strh	r3, [r4, #12]
 8008a54:	6126      	str	r6, [r4, #16]
 8008a56:	6165      	str	r5, [r4, #20]
 8008a58:	444e      	add	r6, r9
 8008a5a:	eba5 0509 	sub.w	r5, r5, r9
 8008a5e:	6026      	str	r6, [r4, #0]
 8008a60:	60a5      	str	r5, [r4, #8]
 8008a62:	463e      	mov	r6, r7
 8008a64:	42be      	cmp	r6, r7
 8008a66:	d900      	bls.n	8008a6a <__ssputs_r+0x86>
 8008a68:	463e      	mov	r6, r7
 8008a6a:	4632      	mov	r2, r6
 8008a6c:	6820      	ldr	r0, [r4, #0]
 8008a6e:	4641      	mov	r1, r8
 8008a70:	f000 ff50 	bl	8009914 <memmove>
 8008a74:	68a3      	ldr	r3, [r4, #8]
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	1b9b      	subs	r3, r3, r6
 8008a7a:	4432      	add	r2, r6
 8008a7c:	60a3      	str	r3, [r4, #8]
 8008a7e:	6022      	str	r2, [r4, #0]
 8008a80:	2000      	movs	r0, #0
 8008a82:	e7db      	b.n	8008a3c <__ssputs_r+0x58>
 8008a84:	462a      	mov	r2, r5
 8008a86:	f000 ff6b 	bl	8009960 <_realloc_r>
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	d1e1      	bne.n	8008a54 <__ssputs_r+0x70>
 8008a90:	6921      	ldr	r1, [r4, #16]
 8008a92:	4650      	mov	r0, sl
 8008a94:	f7ff fefc 	bl	8008890 <_free_r>
 8008a98:	e7c7      	b.n	8008a2a <__ssputs_r+0x46>
	...

08008a9c <_svfiprintf_r>:
 8008a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa0:	4698      	mov	r8, r3
 8008aa2:	898b      	ldrh	r3, [r1, #12]
 8008aa4:	061b      	lsls	r3, r3, #24
 8008aa6:	b09d      	sub	sp, #116	; 0x74
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	460d      	mov	r5, r1
 8008aac:	4614      	mov	r4, r2
 8008aae:	d50e      	bpl.n	8008ace <_svfiprintf_r+0x32>
 8008ab0:	690b      	ldr	r3, [r1, #16]
 8008ab2:	b963      	cbnz	r3, 8008ace <_svfiprintf_r+0x32>
 8008ab4:	2140      	movs	r1, #64	; 0x40
 8008ab6:	f7ff ff3b 	bl	8008930 <_malloc_r>
 8008aba:	6028      	str	r0, [r5, #0]
 8008abc:	6128      	str	r0, [r5, #16]
 8008abe:	b920      	cbnz	r0, 8008aca <_svfiprintf_r+0x2e>
 8008ac0:	230c      	movs	r3, #12
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac8:	e0d1      	b.n	8008c6e <_svfiprintf_r+0x1d2>
 8008aca:	2340      	movs	r3, #64	; 0x40
 8008acc:	616b      	str	r3, [r5, #20]
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad2:	2320      	movs	r3, #32
 8008ad4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ad8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008adc:	2330      	movs	r3, #48	; 0x30
 8008ade:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c88 <_svfiprintf_r+0x1ec>
 8008ae2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ae6:	f04f 0901 	mov.w	r9, #1
 8008aea:	4623      	mov	r3, r4
 8008aec:	469a      	mov	sl, r3
 8008aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008af2:	b10a      	cbz	r2, 8008af8 <_svfiprintf_r+0x5c>
 8008af4:	2a25      	cmp	r2, #37	; 0x25
 8008af6:	d1f9      	bne.n	8008aec <_svfiprintf_r+0x50>
 8008af8:	ebba 0b04 	subs.w	fp, sl, r4
 8008afc:	d00b      	beq.n	8008b16 <_svfiprintf_r+0x7a>
 8008afe:	465b      	mov	r3, fp
 8008b00:	4622      	mov	r2, r4
 8008b02:	4629      	mov	r1, r5
 8008b04:	4638      	mov	r0, r7
 8008b06:	f7ff ff6d 	bl	80089e4 <__ssputs_r>
 8008b0a:	3001      	adds	r0, #1
 8008b0c:	f000 80aa 	beq.w	8008c64 <_svfiprintf_r+0x1c8>
 8008b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b12:	445a      	add	r2, fp
 8008b14:	9209      	str	r2, [sp, #36]	; 0x24
 8008b16:	f89a 3000 	ldrb.w	r3, [sl]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 80a2 	beq.w	8008c64 <_svfiprintf_r+0x1c8>
 8008b20:	2300      	movs	r3, #0
 8008b22:	f04f 32ff 	mov.w	r2, #4294967295
 8008b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b2a:	f10a 0a01 	add.w	sl, sl, #1
 8008b2e:	9304      	str	r3, [sp, #16]
 8008b30:	9307      	str	r3, [sp, #28]
 8008b32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b36:	931a      	str	r3, [sp, #104]	; 0x68
 8008b38:	4654      	mov	r4, sl
 8008b3a:	2205      	movs	r2, #5
 8008b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b40:	4851      	ldr	r0, [pc, #324]	; (8008c88 <_svfiprintf_r+0x1ec>)
 8008b42:	f7f7 fb65 	bl	8000210 <memchr>
 8008b46:	9a04      	ldr	r2, [sp, #16]
 8008b48:	b9d8      	cbnz	r0, 8008b82 <_svfiprintf_r+0xe6>
 8008b4a:	06d0      	lsls	r0, r2, #27
 8008b4c:	bf44      	itt	mi
 8008b4e:	2320      	movmi	r3, #32
 8008b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b54:	0711      	lsls	r1, r2, #28
 8008b56:	bf44      	itt	mi
 8008b58:	232b      	movmi	r3, #43	; 0x2b
 8008b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b62:	2b2a      	cmp	r3, #42	; 0x2a
 8008b64:	d015      	beq.n	8008b92 <_svfiprintf_r+0xf6>
 8008b66:	9a07      	ldr	r2, [sp, #28]
 8008b68:	4654      	mov	r4, sl
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	f04f 0c0a 	mov.w	ip, #10
 8008b70:	4621      	mov	r1, r4
 8008b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b76:	3b30      	subs	r3, #48	; 0x30
 8008b78:	2b09      	cmp	r3, #9
 8008b7a:	d94e      	bls.n	8008c1a <_svfiprintf_r+0x17e>
 8008b7c:	b1b0      	cbz	r0, 8008bac <_svfiprintf_r+0x110>
 8008b7e:	9207      	str	r2, [sp, #28]
 8008b80:	e014      	b.n	8008bac <_svfiprintf_r+0x110>
 8008b82:	eba0 0308 	sub.w	r3, r0, r8
 8008b86:	fa09 f303 	lsl.w	r3, r9, r3
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	9304      	str	r3, [sp, #16]
 8008b8e:	46a2      	mov	sl, r4
 8008b90:	e7d2      	b.n	8008b38 <_svfiprintf_r+0x9c>
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	1d19      	adds	r1, r3, #4
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	9103      	str	r1, [sp, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	bfbb      	ittet	lt
 8008b9e:	425b      	neglt	r3, r3
 8008ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ba4:	9307      	strge	r3, [sp, #28]
 8008ba6:	9307      	strlt	r3, [sp, #28]
 8008ba8:	bfb8      	it	lt
 8008baa:	9204      	strlt	r2, [sp, #16]
 8008bac:	7823      	ldrb	r3, [r4, #0]
 8008bae:	2b2e      	cmp	r3, #46	; 0x2e
 8008bb0:	d10c      	bne.n	8008bcc <_svfiprintf_r+0x130>
 8008bb2:	7863      	ldrb	r3, [r4, #1]
 8008bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb6:	d135      	bne.n	8008c24 <_svfiprintf_r+0x188>
 8008bb8:	9b03      	ldr	r3, [sp, #12]
 8008bba:	1d1a      	adds	r2, r3, #4
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	9203      	str	r2, [sp, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	bfb8      	it	lt
 8008bc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bc8:	3402      	adds	r4, #2
 8008bca:	9305      	str	r3, [sp, #20]
 8008bcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c98 <_svfiprintf_r+0x1fc>
 8008bd0:	7821      	ldrb	r1, [r4, #0]
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	4650      	mov	r0, sl
 8008bd6:	f7f7 fb1b 	bl	8000210 <memchr>
 8008bda:	b140      	cbz	r0, 8008bee <_svfiprintf_r+0x152>
 8008bdc:	2340      	movs	r3, #64	; 0x40
 8008bde:	eba0 000a 	sub.w	r0, r0, sl
 8008be2:	fa03 f000 	lsl.w	r0, r3, r0
 8008be6:	9b04      	ldr	r3, [sp, #16]
 8008be8:	4303      	orrs	r3, r0
 8008bea:	3401      	adds	r4, #1
 8008bec:	9304      	str	r3, [sp, #16]
 8008bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf2:	4826      	ldr	r0, [pc, #152]	; (8008c8c <_svfiprintf_r+0x1f0>)
 8008bf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bf8:	2206      	movs	r2, #6
 8008bfa:	f7f7 fb09 	bl	8000210 <memchr>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d038      	beq.n	8008c74 <_svfiprintf_r+0x1d8>
 8008c02:	4b23      	ldr	r3, [pc, #140]	; (8008c90 <_svfiprintf_r+0x1f4>)
 8008c04:	bb1b      	cbnz	r3, 8008c4e <_svfiprintf_r+0x1b2>
 8008c06:	9b03      	ldr	r3, [sp, #12]
 8008c08:	3307      	adds	r3, #7
 8008c0a:	f023 0307 	bic.w	r3, r3, #7
 8008c0e:	3308      	adds	r3, #8
 8008c10:	9303      	str	r3, [sp, #12]
 8008c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c14:	4433      	add	r3, r6
 8008c16:	9309      	str	r3, [sp, #36]	; 0x24
 8008c18:	e767      	b.n	8008aea <_svfiprintf_r+0x4e>
 8008c1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c1e:	460c      	mov	r4, r1
 8008c20:	2001      	movs	r0, #1
 8008c22:	e7a5      	b.n	8008b70 <_svfiprintf_r+0xd4>
 8008c24:	2300      	movs	r3, #0
 8008c26:	3401      	adds	r4, #1
 8008c28:	9305      	str	r3, [sp, #20]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	f04f 0c0a 	mov.w	ip, #10
 8008c30:	4620      	mov	r0, r4
 8008c32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c36:	3a30      	subs	r2, #48	; 0x30
 8008c38:	2a09      	cmp	r2, #9
 8008c3a:	d903      	bls.n	8008c44 <_svfiprintf_r+0x1a8>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d0c5      	beq.n	8008bcc <_svfiprintf_r+0x130>
 8008c40:	9105      	str	r1, [sp, #20]
 8008c42:	e7c3      	b.n	8008bcc <_svfiprintf_r+0x130>
 8008c44:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c48:	4604      	mov	r4, r0
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e7f0      	b.n	8008c30 <_svfiprintf_r+0x194>
 8008c4e:	ab03      	add	r3, sp, #12
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	462a      	mov	r2, r5
 8008c54:	4b0f      	ldr	r3, [pc, #60]	; (8008c94 <_svfiprintf_r+0x1f8>)
 8008c56:	a904      	add	r1, sp, #16
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7fc f9d7 	bl	800500c <_printf_float>
 8008c5e:	1c42      	adds	r2, r0, #1
 8008c60:	4606      	mov	r6, r0
 8008c62:	d1d6      	bne.n	8008c12 <_svfiprintf_r+0x176>
 8008c64:	89ab      	ldrh	r3, [r5, #12]
 8008c66:	065b      	lsls	r3, r3, #25
 8008c68:	f53f af2c 	bmi.w	8008ac4 <_svfiprintf_r+0x28>
 8008c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c6e:	b01d      	add	sp, #116	; 0x74
 8008c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c74:	ab03      	add	r3, sp, #12
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	462a      	mov	r2, r5
 8008c7a:	4b06      	ldr	r3, [pc, #24]	; (8008c94 <_svfiprintf_r+0x1f8>)
 8008c7c:	a904      	add	r1, sp, #16
 8008c7e:	4638      	mov	r0, r7
 8008c80:	f7fc fc68 	bl	8005554 <_printf_i>
 8008c84:	e7eb      	b.n	8008c5e <_svfiprintf_r+0x1c2>
 8008c86:	bf00      	nop
 8008c88:	0800a69c 	.word	0x0800a69c
 8008c8c:	0800a6a6 	.word	0x0800a6a6
 8008c90:	0800500d 	.word	0x0800500d
 8008c94:	080089e5 	.word	0x080089e5
 8008c98:	0800a6a2 	.word	0x0800a6a2

08008c9c <_sungetc_r>:
 8008c9c:	b538      	push	{r3, r4, r5, lr}
 8008c9e:	1c4b      	adds	r3, r1, #1
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	d103      	bne.n	8008cac <_sungetc_r+0x10>
 8008ca4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ca8:	4628      	mov	r0, r5
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	8993      	ldrh	r3, [r2, #12]
 8008cae:	f023 0320 	bic.w	r3, r3, #32
 8008cb2:	8193      	strh	r3, [r2, #12]
 8008cb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cb6:	6852      	ldr	r2, [r2, #4]
 8008cb8:	b2cd      	uxtb	r5, r1
 8008cba:	b18b      	cbz	r3, 8008ce0 <_sungetc_r+0x44>
 8008cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	dd08      	ble.n	8008cd4 <_sungetc_r+0x38>
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	1e5a      	subs	r2, r3, #1
 8008cc6:	6022      	str	r2, [r4, #0]
 8008cc8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008ccc:	6863      	ldr	r3, [r4, #4]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	6063      	str	r3, [r4, #4]
 8008cd2:	e7e9      	b.n	8008ca8 <_sungetc_r+0xc>
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f000 fbeb 	bl	80094b0 <__submore>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d0f1      	beq.n	8008cc2 <_sungetc_r+0x26>
 8008cde:	e7e1      	b.n	8008ca4 <_sungetc_r+0x8>
 8008ce0:	6921      	ldr	r1, [r4, #16]
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	b151      	cbz	r1, 8008cfc <_sungetc_r+0x60>
 8008ce6:	4299      	cmp	r1, r3
 8008ce8:	d208      	bcs.n	8008cfc <_sungetc_r+0x60>
 8008cea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008cee:	42a9      	cmp	r1, r5
 8008cf0:	d104      	bne.n	8008cfc <_sungetc_r+0x60>
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	3201      	adds	r2, #1
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	6062      	str	r2, [r4, #4]
 8008cfa:	e7d5      	b.n	8008ca8 <_sungetc_r+0xc>
 8008cfc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d04:	6363      	str	r3, [r4, #52]	; 0x34
 8008d06:	2303      	movs	r3, #3
 8008d08:	63a3      	str	r3, [r4, #56]	; 0x38
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	2301      	movs	r3, #1
 8008d14:	e7dc      	b.n	8008cd0 <_sungetc_r+0x34>

08008d16 <__ssrefill_r>:
 8008d16:	b510      	push	{r4, lr}
 8008d18:	460c      	mov	r4, r1
 8008d1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008d1c:	b169      	cbz	r1, 8008d3a <__ssrefill_r+0x24>
 8008d1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d22:	4299      	cmp	r1, r3
 8008d24:	d001      	beq.n	8008d2a <__ssrefill_r+0x14>
 8008d26:	f7ff fdb3 	bl	8008890 <_free_r>
 8008d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d2c:	6063      	str	r3, [r4, #4]
 8008d2e:	2000      	movs	r0, #0
 8008d30:	6360      	str	r0, [r4, #52]	; 0x34
 8008d32:	b113      	cbz	r3, 8008d3a <__ssrefill_r+0x24>
 8008d34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008d36:	6023      	str	r3, [r4, #0]
 8008d38:	bd10      	pop	{r4, pc}
 8008d3a:	6923      	ldr	r3, [r4, #16]
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	2300      	movs	r3, #0
 8008d40:	6063      	str	r3, [r4, #4]
 8008d42:	89a3      	ldrh	r3, [r4, #12]
 8008d44:	f043 0320 	orr.w	r3, r3, #32
 8008d48:	81a3      	strh	r3, [r4, #12]
 8008d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4e:	e7f3      	b.n	8008d38 <__ssrefill_r+0x22>

08008d50 <__ssvfiscanf_r>:
 8008d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	460c      	mov	r4, r1
 8008d56:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008d60:	49b2      	ldr	r1, [pc, #712]	; (800902c <__ssvfiscanf_r+0x2dc>)
 8008d62:	91a0      	str	r1, [sp, #640]	; 0x280
 8008d64:	f10d 0804 	add.w	r8, sp, #4
 8008d68:	49b1      	ldr	r1, [pc, #708]	; (8009030 <__ssvfiscanf_r+0x2e0>)
 8008d6a:	4fb2      	ldr	r7, [pc, #712]	; (8009034 <__ssvfiscanf_r+0x2e4>)
 8008d6c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8009038 <__ssvfiscanf_r+0x2e8>
 8008d70:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008d74:	4606      	mov	r6, r0
 8008d76:	91a1      	str	r1, [sp, #644]	; 0x284
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	f892 a000 	ldrb.w	sl, [r2]
 8008d7e:	f1ba 0f00 	cmp.w	sl, #0
 8008d82:	f000 8151 	beq.w	8009028 <__ssvfiscanf_r+0x2d8>
 8008d86:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8008d8a:	f013 0308 	ands.w	r3, r3, #8
 8008d8e:	f102 0501 	add.w	r5, r2, #1
 8008d92:	d019      	beq.n	8008dc8 <__ssvfiscanf_r+0x78>
 8008d94:	6863      	ldr	r3, [r4, #4]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	dd0f      	ble.n	8008dba <__ssvfiscanf_r+0x6a>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	781a      	ldrb	r2, [r3, #0]
 8008d9e:	5cba      	ldrb	r2, [r7, r2]
 8008da0:	0712      	lsls	r2, r2, #28
 8008da2:	d401      	bmi.n	8008da8 <__ssvfiscanf_r+0x58>
 8008da4:	462a      	mov	r2, r5
 8008da6:	e7e8      	b.n	8008d7a <__ssvfiscanf_r+0x2a>
 8008da8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008daa:	3201      	adds	r2, #1
 8008dac:	9245      	str	r2, [sp, #276]	; 0x114
 8008dae:	6862      	ldr	r2, [r4, #4]
 8008db0:	3301      	adds	r3, #1
 8008db2:	3a01      	subs	r2, #1
 8008db4:	6062      	str	r2, [r4, #4]
 8008db6:	6023      	str	r3, [r4, #0]
 8008db8:	e7ec      	b.n	8008d94 <__ssvfiscanf_r+0x44>
 8008dba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	4630      	mov	r0, r6
 8008dc0:	4798      	blx	r3
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d0e9      	beq.n	8008d9a <__ssvfiscanf_r+0x4a>
 8008dc6:	e7ed      	b.n	8008da4 <__ssvfiscanf_r+0x54>
 8008dc8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8008dcc:	f040 8083 	bne.w	8008ed6 <__ssvfiscanf_r+0x186>
 8008dd0:	9341      	str	r3, [sp, #260]	; 0x104
 8008dd2:	9343      	str	r3, [sp, #268]	; 0x10c
 8008dd4:	7853      	ldrb	r3, [r2, #1]
 8008dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8008dd8:	bf02      	ittt	eq
 8008dda:	2310      	moveq	r3, #16
 8008ddc:	1c95      	addeq	r5, r2, #2
 8008dde:	9341      	streq	r3, [sp, #260]	; 0x104
 8008de0:	220a      	movs	r2, #10
 8008de2:	46ab      	mov	fp, r5
 8008de4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8008de8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008dec:	2b09      	cmp	r3, #9
 8008dee:	d91d      	bls.n	8008e2c <__ssvfiscanf_r+0xdc>
 8008df0:	4891      	ldr	r0, [pc, #580]	; (8009038 <__ssvfiscanf_r+0x2e8>)
 8008df2:	2203      	movs	r2, #3
 8008df4:	f7f7 fa0c 	bl	8000210 <memchr>
 8008df8:	b140      	cbz	r0, 8008e0c <__ssvfiscanf_r+0xbc>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	eba0 0009 	sub.w	r0, r0, r9
 8008e00:	fa03 f000 	lsl.w	r0, r3, r0
 8008e04:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008e06:	4318      	orrs	r0, r3
 8008e08:	9041      	str	r0, [sp, #260]	; 0x104
 8008e0a:	465d      	mov	r5, fp
 8008e0c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e10:	2b78      	cmp	r3, #120	; 0x78
 8008e12:	d806      	bhi.n	8008e22 <__ssvfiscanf_r+0xd2>
 8008e14:	2b57      	cmp	r3, #87	; 0x57
 8008e16:	d810      	bhi.n	8008e3a <__ssvfiscanf_r+0xea>
 8008e18:	2b25      	cmp	r3, #37	; 0x25
 8008e1a:	d05c      	beq.n	8008ed6 <__ssvfiscanf_r+0x186>
 8008e1c:	d856      	bhi.n	8008ecc <__ssvfiscanf_r+0x17c>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d074      	beq.n	8008f0c <__ssvfiscanf_r+0x1bc>
 8008e22:	2303      	movs	r3, #3
 8008e24:	9347      	str	r3, [sp, #284]	; 0x11c
 8008e26:	230a      	movs	r3, #10
 8008e28:	9342      	str	r3, [sp, #264]	; 0x108
 8008e2a:	e081      	b.n	8008f30 <__ssvfiscanf_r+0x1e0>
 8008e2c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008e2e:	fb02 1303 	mla	r3, r2, r3, r1
 8008e32:	3b30      	subs	r3, #48	; 0x30
 8008e34:	9343      	str	r3, [sp, #268]	; 0x10c
 8008e36:	465d      	mov	r5, fp
 8008e38:	e7d3      	b.n	8008de2 <__ssvfiscanf_r+0x92>
 8008e3a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008e3e:	2a20      	cmp	r2, #32
 8008e40:	d8ef      	bhi.n	8008e22 <__ssvfiscanf_r+0xd2>
 8008e42:	a101      	add	r1, pc, #4	; (adr r1, 8008e48 <__ssvfiscanf_r+0xf8>)
 8008e44:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e48:	08008f1b 	.word	0x08008f1b
 8008e4c:	08008e23 	.word	0x08008e23
 8008e50:	08008e23 	.word	0x08008e23
 8008e54:	08008f79 	.word	0x08008f79
 8008e58:	08008e23 	.word	0x08008e23
 8008e5c:	08008e23 	.word	0x08008e23
 8008e60:	08008e23 	.word	0x08008e23
 8008e64:	08008e23 	.word	0x08008e23
 8008e68:	08008e23 	.word	0x08008e23
 8008e6c:	08008e23 	.word	0x08008e23
 8008e70:	08008e23 	.word	0x08008e23
 8008e74:	08008f8f 	.word	0x08008f8f
 8008e78:	08008f65 	.word	0x08008f65
 8008e7c:	08008ed3 	.word	0x08008ed3
 8008e80:	08008ed3 	.word	0x08008ed3
 8008e84:	08008ed3 	.word	0x08008ed3
 8008e88:	08008e23 	.word	0x08008e23
 8008e8c:	08008f69 	.word	0x08008f69
 8008e90:	08008e23 	.word	0x08008e23
 8008e94:	08008e23 	.word	0x08008e23
 8008e98:	08008e23 	.word	0x08008e23
 8008e9c:	08008e23 	.word	0x08008e23
 8008ea0:	08008f9f 	.word	0x08008f9f
 8008ea4:	08008f71 	.word	0x08008f71
 8008ea8:	08008f13 	.word	0x08008f13
 8008eac:	08008e23 	.word	0x08008e23
 8008eb0:	08008e23 	.word	0x08008e23
 8008eb4:	08008f9b 	.word	0x08008f9b
 8008eb8:	08008e23 	.word	0x08008e23
 8008ebc:	08008f65 	.word	0x08008f65
 8008ec0:	08008e23 	.word	0x08008e23
 8008ec4:	08008e23 	.word	0x08008e23
 8008ec8:	08008f1b 	.word	0x08008f1b
 8008ecc:	3b45      	subs	r3, #69	; 0x45
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d8a7      	bhi.n	8008e22 <__ssvfiscanf_r+0xd2>
 8008ed2:	2305      	movs	r3, #5
 8008ed4:	e02b      	b.n	8008f2e <__ssvfiscanf_r+0x1de>
 8008ed6:	6863      	ldr	r3, [r4, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	dd0d      	ble.n	8008ef8 <__ssvfiscanf_r+0x1a8>
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	781a      	ldrb	r2, [r3, #0]
 8008ee0:	4552      	cmp	r2, sl
 8008ee2:	f040 80a1 	bne.w	8009028 <__ssvfiscanf_r+0x2d8>
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	6862      	ldr	r2, [r4, #4]
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008eee:	3a01      	subs	r2, #1
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	6062      	str	r2, [r4, #4]
 8008ef4:	9345      	str	r3, [sp, #276]	; 0x114
 8008ef6:	e755      	b.n	8008da4 <__ssvfiscanf_r+0x54>
 8008ef8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008efa:	4621      	mov	r1, r4
 8008efc:	4630      	mov	r0, r6
 8008efe:	4798      	blx	r3
 8008f00:	2800      	cmp	r0, #0
 8008f02:	d0eb      	beq.n	8008edc <__ssvfiscanf_r+0x18c>
 8008f04:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008f06:	2800      	cmp	r0, #0
 8008f08:	f040 8084 	bne.w	8009014 <__ssvfiscanf_r+0x2c4>
 8008f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f10:	e086      	b.n	8009020 <__ssvfiscanf_r+0x2d0>
 8008f12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008f14:	f042 0220 	orr.w	r2, r2, #32
 8008f18:	9241      	str	r2, [sp, #260]	; 0x104
 8008f1a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f20:	9241      	str	r2, [sp, #260]	; 0x104
 8008f22:	2210      	movs	r2, #16
 8008f24:	2b6f      	cmp	r3, #111	; 0x6f
 8008f26:	9242      	str	r2, [sp, #264]	; 0x108
 8008f28:	bf34      	ite	cc
 8008f2a:	2303      	movcc	r3, #3
 8008f2c:	2304      	movcs	r3, #4
 8008f2e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008f30:	6863      	ldr	r3, [r4, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	dd41      	ble.n	8008fba <__ssvfiscanf_r+0x26a>
 8008f36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008f38:	0659      	lsls	r1, r3, #25
 8008f3a:	d404      	bmi.n	8008f46 <__ssvfiscanf_r+0x1f6>
 8008f3c:	6823      	ldr	r3, [r4, #0]
 8008f3e:	781a      	ldrb	r2, [r3, #0]
 8008f40:	5cba      	ldrb	r2, [r7, r2]
 8008f42:	0712      	lsls	r2, r2, #28
 8008f44:	d440      	bmi.n	8008fc8 <__ssvfiscanf_r+0x278>
 8008f46:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	dc4f      	bgt.n	8008fec <__ssvfiscanf_r+0x29c>
 8008f4c:	466b      	mov	r3, sp
 8008f4e:	4622      	mov	r2, r4
 8008f50:	a941      	add	r1, sp, #260	; 0x104
 8008f52:	4630      	mov	r0, r6
 8008f54:	f000 f874 	bl	8009040 <_scanf_chars>
 8008f58:	2801      	cmp	r0, #1
 8008f5a:	d065      	beq.n	8009028 <__ssvfiscanf_r+0x2d8>
 8008f5c:	2802      	cmp	r0, #2
 8008f5e:	f47f af21 	bne.w	8008da4 <__ssvfiscanf_r+0x54>
 8008f62:	e7cf      	b.n	8008f04 <__ssvfiscanf_r+0x1b4>
 8008f64:	220a      	movs	r2, #10
 8008f66:	e7dd      	b.n	8008f24 <__ssvfiscanf_r+0x1d4>
 8008f68:	2300      	movs	r3, #0
 8008f6a:	9342      	str	r3, [sp, #264]	; 0x108
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e7de      	b.n	8008f2e <__ssvfiscanf_r+0x1de>
 8008f70:	2308      	movs	r3, #8
 8008f72:	9342      	str	r3, [sp, #264]	; 0x108
 8008f74:	2304      	movs	r3, #4
 8008f76:	e7da      	b.n	8008f2e <__ssvfiscanf_r+0x1de>
 8008f78:	4629      	mov	r1, r5
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	f000 f9ce 	bl	800931c <__sccl>
 8008f80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f86:	9341      	str	r3, [sp, #260]	; 0x104
 8008f88:	4605      	mov	r5, r0
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e7cf      	b.n	8008f2e <__ssvfiscanf_r+0x1de>
 8008f8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f94:	9341      	str	r3, [sp, #260]	; 0x104
 8008f96:	2300      	movs	r3, #0
 8008f98:	e7c9      	b.n	8008f2e <__ssvfiscanf_r+0x1de>
 8008f9a:	2302      	movs	r3, #2
 8008f9c:	e7c7      	b.n	8008f2e <__ssvfiscanf_r+0x1de>
 8008f9e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008fa0:	06c3      	lsls	r3, r0, #27
 8008fa2:	f53f aeff 	bmi.w	8008da4 <__ssvfiscanf_r+0x54>
 8008fa6:	9b00      	ldr	r3, [sp, #0]
 8008fa8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008faa:	1d19      	adds	r1, r3, #4
 8008fac:	9100      	str	r1, [sp, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	07c0      	lsls	r0, r0, #31
 8008fb2:	bf4c      	ite	mi
 8008fb4:	801a      	strhmi	r2, [r3, #0]
 8008fb6:	601a      	strpl	r2, [r3, #0]
 8008fb8:	e6f4      	b.n	8008da4 <__ssvfiscanf_r+0x54>
 8008fba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	4798      	blx	r3
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d0b7      	beq.n	8008f36 <__ssvfiscanf_r+0x1e6>
 8008fc6:	e79d      	b.n	8008f04 <__ssvfiscanf_r+0x1b4>
 8008fc8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008fca:	3201      	adds	r2, #1
 8008fcc:	9245      	str	r2, [sp, #276]	; 0x114
 8008fce:	6862      	ldr	r2, [r4, #4]
 8008fd0:	3a01      	subs	r2, #1
 8008fd2:	2a00      	cmp	r2, #0
 8008fd4:	6062      	str	r2, [r4, #4]
 8008fd6:	dd02      	ble.n	8008fde <__ssvfiscanf_r+0x28e>
 8008fd8:	3301      	adds	r3, #1
 8008fda:	6023      	str	r3, [r4, #0]
 8008fdc:	e7ae      	b.n	8008f3c <__ssvfiscanf_r+0x1ec>
 8008fde:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	4798      	blx	r3
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	d0a8      	beq.n	8008f3c <__ssvfiscanf_r+0x1ec>
 8008fea:	e78b      	b.n	8008f04 <__ssvfiscanf_r+0x1b4>
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	dc06      	bgt.n	8008ffe <__ssvfiscanf_r+0x2ae>
 8008ff0:	466b      	mov	r3, sp
 8008ff2:	4622      	mov	r2, r4
 8008ff4:	a941      	add	r1, sp, #260	; 0x104
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	f000 f87a 	bl	80090f0 <_scanf_i>
 8008ffc:	e7ac      	b.n	8008f58 <__ssvfiscanf_r+0x208>
 8008ffe:	4b0f      	ldr	r3, [pc, #60]	; (800903c <__ssvfiscanf_r+0x2ec>)
 8009000:	2b00      	cmp	r3, #0
 8009002:	f43f aecf 	beq.w	8008da4 <__ssvfiscanf_r+0x54>
 8009006:	466b      	mov	r3, sp
 8009008:	4622      	mov	r2, r4
 800900a:	a941      	add	r1, sp, #260	; 0x104
 800900c:	4630      	mov	r0, r6
 800900e:	f7fc fbc7 	bl	80057a0 <_scanf_float>
 8009012:	e7a1      	b.n	8008f58 <__ssvfiscanf_r+0x208>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	f013 0f40 	tst.w	r3, #64	; 0x40
 800901a:	bf18      	it	ne
 800901c:	f04f 30ff 	movne.w	r0, #4294967295
 8009020:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009028:	9844      	ldr	r0, [sp, #272]	; 0x110
 800902a:	e7f9      	b.n	8009020 <__ssvfiscanf_r+0x2d0>
 800902c:	08008c9d 	.word	0x08008c9d
 8009030:	08008d17 	.word	0x08008d17
 8009034:	0800a329 	.word	0x0800a329
 8009038:	0800a6a2 	.word	0x0800a6a2
 800903c:	080057a1 	.word	0x080057a1

08009040 <_scanf_chars>:
 8009040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009044:	4615      	mov	r5, r2
 8009046:	688a      	ldr	r2, [r1, #8]
 8009048:	4680      	mov	r8, r0
 800904a:	460c      	mov	r4, r1
 800904c:	b932      	cbnz	r2, 800905c <_scanf_chars+0x1c>
 800904e:	698a      	ldr	r2, [r1, #24]
 8009050:	2a00      	cmp	r2, #0
 8009052:	bf0c      	ite	eq
 8009054:	2201      	moveq	r2, #1
 8009056:	f04f 32ff 	movne.w	r2, #4294967295
 800905a:	608a      	str	r2, [r1, #8]
 800905c:	6822      	ldr	r2, [r4, #0]
 800905e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80090ec <_scanf_chars+0xac>
 8009062:	06d1      	lsls	r1, r2, #27
 8009064:	bf5f      	itttt	pl
 8009066:	681a      	ldrpl	r2, [r3, #0]
 8009068:	1d11      	addpl	r1, r2, #4
 800906a:	6019      	strpl	r1, [r3, #0]
 800906c:	6816      	ldrpl	r6, [r2, #0]
 800906e:	2700      	movs	r7, #0
 8009070:	69a0      	ldr	r0, [r4, #24]
 8009072:	b188      	cbz	r0, 8009098 <_scanf_chars+0x58>
 8009074:	2801      	cmp	r0, #1
 8009076:	d107      	bne.n	8009088 <_scanf_chars+0x48>
 8009078:	682b      	ldr	r3, [r5, #0]
 800907a:	781a      	ldrb	r2, [r3, #0]
 800907c:	6963      	ldr	r3, [r4, #20]
 800907e:	5c9b      	ldrb	r3, [r3, r2]
 8009080:	b953      	cbnz	r3, 8009098 <_scanf_chars+0x58>
 8009082:	bb27      	cbnz	r7, 80090ce <_scanf_chars+0x8e>
 8009084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009088:	2802      	cmp	r0, #2
 800908a:	d120      	bne.n	80090ce <_scanf_chars+0x8e>
 800908c:	682b      	ldr	r3, [r5, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009094:	071b      	lsls	r3, r3, #28
 8009096:	d41a      	bmi.n	80090ce <_scanf_chars+0x8e>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	06da      	lsls	r2, r3, #27
 800909c:	bf5e      	ittt	pl
 800909e:	682b      	ldrpl	r3, [r5, #0]
 80090a0:	781b      	ldrbpl	r3, [r3, #0]
 80090a2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80090a6:	682a      	ldr	r2, [r5, #0]
 80090a8:	686b      	ldr	r3, [r5, #4]
 80090aa:	3201      	adds	r2, #1
 80090ac:	602a      	str	r2, [r5, #0]
 80090ae:	68a2      	ldr	r2, [r4, #8]
 80090b0:	3b01      	subs	r3, #1
 80090b2:	3a01      	subs	r2, #1
 80090b4:	606b      	str	r3, [r5, #4]
 80090b6:	3701      	adds	r7, #1
 80090b8:	60a2      	str	r2, [r4, #8]
 80090ba:	b142      	cbz	r2, 80090ce <_scanf_chars+0x8e>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dcd7      	bgt.n	8009070 <_scanf_chars+0x30>
 80090c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090c4:	4629      	mov	r1, r5
 80090c6:	4640      	mov	r0, r8
 80090c8:	4798      	blx	r3
 80090ca:	2800      	cmp	r0, #0
 80090cc:	d0d0      	beq.n	8009070 <_scanf_chars+0x30>
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	f013 0310 	ands.w	r3, r3, #16
 80090d4:	d105      	bne.n	80090e2 <_scanf_chars+0xa2>
 80090d6:	68e2      	ldr	r2, [r4, #12]
 80090d8:	3201      	adds	r2, #1
 80090da:	60e2      	str	r2, [r4, #12]
 80090dc:	69a2      	ldr	r2, [r4, #24]
 80090de:	b102      	cbz	r2, 80090e2 <_scanf_chars+0xa2>
 80090e0:	7033      	strb	r3, [r6, #0]
 80090e2:	6923      	ldr	r3, [r4, #16]
 80090e4:	441f      	add	r7, r3
 80090e6:	6127      	str	r7, [r4, #16]
 80090e8:	2000      	movs	r0, #0
 80090ea:	e7cb      	b.n	8009084 <_scanf_chars+0x44>
 80090ec:	0800a329 	.word	0x0800a329

080090f0 <_scanf_i>:
 80090f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f4:	4698      	mov	r8, r3
 80090f6:	4b74      	ldr	r3, [pc, #464]	; (80092c8 <_scanf_i+0x1d8>)
 80090f8:	460c      	mov	r4, r1
 80090fa:	4682      	mov	sl, r0
 80090fc:	4616      	mov	r6, r2
 80090fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009102:	b087      	sub	sp, #28
 8009104:	ab03      	add	r3, sp, #12
 8009106:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800910a:	4b70      	ldr	r3, [pc, #448]	; (80092cc <_scanf_i+0x1dc>)
 800910c:	69a1      	ldr	r1, [r4, #24]
 800910e:	4a70      	ldr	r2, [pc, #448]	; (80092d0 <_scanf_i+0x1e0>)
 8009110:	2903      	cmp	r1, #3
 8009112:	bf18      	it	ne
 8009114:	461a      	movne	r2, r3
 8009116:	68a3      	ldr	r3, [r4, #8]
 8009118:	9201      	str	r2, [sp, #4]
 800911a:	1e5a      	subs	r2, r3, #1
 800911c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009120:	bf88      	it	hi
 8009122:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009126:	4627      	mov	r7, r4
 8009128:	bf82      	ittt	hi
 800912a:	eb03 0905 	addhi.w	r9, r3, r5
 800912e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009132:	60a3      	strhi	r3, [r4, #8]
 8009134:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009138:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800913c:	bf98      	it	ls
 800913e:	f04f 0900 	movls.w	r9, #0
 8009142:	6023      	str	r3, [r4, #0]
 8009144:	463d      	mov	r5, r7
 8009146:	f04f 0b00 	mov.w	fp, #0
 800914a:	6831      	ldr	r1, [r6, #0]
 800914c:	ab03      	add	r3, sp, #12
 800914e:	7809      	ldrb	r1, [r1, #0]
 8009150:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009154:	2202      	movs	r2, #2
 8009156:	f7f7 f85b 	bl	8000210 <memchr>
 800915a:	b328      	cbz	r0, 80091a8 <_scanf_i+0xb8>
 800915c:	f1bb 0f01 	cmp.w	fp, #1
 8009160:	d159      	bne.n	8009216 <_scanf_i+0x126>
 8009162:	6862      	ldr	r2, [r4, #4]
 8009164:	b92a      	cbnz	r2, 8009172 <_scanf_i+0x82>
 8009166:	6822      	ldr	r2, [r4, #0]
 8009168:	2308      	movs	r3, #8
 800916a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800916e:	6063      	str	r3, [r4, #4]
 8009170:	6022      	str	r2, [r4, #0]
 8009172:	6822      	ldr	r2, [r4, #0]
 8009174:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009178:	6022      	str	r2, [r4, #0]
 800917a:	68a2      	ldr	r2, [r4, #8]
 800917c:	1e51      	subs	r1, r2, #1
 800917e:	60a1      	str	r1, [r4, #8]
 8009180:	b192      	cbz	r2, 80091a8 <_scanf_i+0xb8>
 8009182:	6832      	ldr	r2, [r6, #0]
 8009184:	1c51      	adds	r1, r2, #1
 8009186:	6031      	str	r1, [r6, #0]
 8009188:	7812      	ldrb	r2, [r2, #0]
 800918a:	f805 2b01 	strb.w	r2, [r5], #1
 800918e:	6872      	ldr	r2, [r6, #4]
 8009190:	3a01      	subs	r2, #1
 8009192:	2a00      	cmp	r2, #0
 8009194:	6072      	str	r2, [r6, #4]
 8009196:	dc07      	bgt.n	80091a8 <_scanf_i+0xb8>
 8009198:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800919c:	4631      	mov	r1, r6
 800919e:	4650      	mov	r0, sl
 80091a0:	4790      	blx	r2
 80091a2:	2800      	cmp	r0, #0
 80091a4:	f040 8085 	bne.w	80092b2 <_scanf_i+0x1c2>
 80091a8:	f10b 0b01 	add.w	fp, fp, #1
 80091ac:	f1bb 0f03 	cmp.w	fp, #3
 80091b0:	d1cb      	bne.n	800914a <_scanf_i+0x5a>
 80091b2:	6863      	ldr	r3, [r4, #4]
 80091b4:	b90b      	cbnz	r3, 80091ba <_scanf_i+0xca>
 80091b6:	230a      	movs	r3, #10
 80091b8:	6063      	str	r3, [r4, #4]
 80091ba:	6863      	ldr	r3, [r4, #4]
 80091bc:	4945      	ldr	r1, [pc, #276]	; (80092d4 <_scanf_i+0x1e4>)
 80091be:	6960      	ldr	r0, [r4, #20]
 80091c0:	1ac9      	subs	r1, r1, r3
 80091c2:	f000 f8ab 	bl	800931c <__sccl>
 80091c6:	f04f 0b00 	mov.w	fp, #0
 80091ca:	68a3      	ldr	r3, [r4, #8]
 80091cc:	6822      	ldr	r2, [r4, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d03d      	beq.n	800924e <_scanf_i+0x15e>
 80091d2:	6831      	ldr	r1, [r6, #0]
 80091d4:	6960      	ldr	r0, [r4, #20]
 80091d6:	f891 c000 	ldrb.w	ip, [r1]
 80091da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80091de:	2800      	cmp	r0, #0
 80091e0:	d035      	beq.n	800924e <_scanf_i+0x15e>
 80091e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80091e6:	d124      	bne.n	8009232 <_scanf_i+0x142>
 80091e8:	0510      	lsls	r0, r2, #20
 80091ea:	d522      	bpl.n	8009232 <_scanf_i+0x142>
 80091ec:	f10b 0b01 	add.w	fp, fp, #1
 80091f0:	f1b9 0f00 	cmp.w	r9, #0
 80091f4:	d003      	beq.n	80091fe <_scanf_i+0x10e>
 80091f6:	3301      	adds	r3, #1
 80091f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80091fc:	60a3      	str	r3, [r4, #8]
 80091fe:	6873      	ldr	r3, [r6, #4]
 8009200:	3b01      	subs	r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	6073      	str	r3, [r6, #4]
 8009206:	dd1b      	ble.n	8009240 <_scanf_i+0x150>
 8009208:	6833      	ldr	r3, [r6, #0]
 800920a:	3301      	adds	r3, #1
 800920c:	6033      	str	r3, [r6, #0]
 800920e:	68a3      	ldr	r3, [r4, #8]
 8009210:	3b01      	subs	r3, #1
 8009212:	60a3      	str	r3, [r4, #8]
 8009214:	e7d9      	b.n	80091ca <_scanf_i+0xda>
 8009216:	f1bb 0f02 	cmp.w	fp, #2
 800921a:	d1ae      	bne.n	800917a <_scanf_i+0x8a>
 800921c:	6822      	ldr	r2, [r4, #0]
 800921e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009222:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009226:	d1bf      	bne.n	80091a8 <_scanf_i+0xb8>
 8009228:	2310      	movs	r3, #16
 800922a:	6063      	str	r3, [r4, #4]
 800922c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009230:	e7a2      	b.n	8009178 <_scanf_i+0x88>
 8009232:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009236:	6022      	str	r2, [r4, #0]
 8009238:	780b      	ldrb	r3, [r1, #0]
 800923a:	f805 3b01 	strb.w	r3, [r5], #1
 800923e:	e7de      	b.n	80091fe <_scanf_i+0x10e>
 8009240:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009244:	4631      	mov	r1, r6
 8009246:	4650      	mov	r0, sl
 8009248:	4798      	blx	r3
 800924a:	2800      	cmp	r0, #0
 800924c:	d0df      	beq.n	800920e <_scanf_i+0x11e>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	05d9      	lsls	r1, r3, #23
 8009252:	d50d      	bpl.n	8009270 <_scanf_i+0x180>
 8009254:	42bd      	cmp	r5, r7
 8009256:	d909      	bls.n	800926c <_scanf_i+0x17c>
 8009258:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800925c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009260:	4632      	mov	r2, r6
 8009262:	4650      	mov	r0, sl
 8009264:	4798      	blx	r3
 8009266:	f105 39ff 	add.w	r9, r5, #4294967295
 800926a:	464d      	mov	r5, r9
 800926c:	42bd      	cmp	r5, r7
 800926e:	d028      	beq.n	80092c2 <_scanf_i+0x1d2>
 8009270:	6822      	ldr	r2, [r4, #0]
 8009272:	f012 0210 	ands.w	r2, r2, #16
 8009276:	d113      	bne.n	80092a0 <_scanf_i+0x1b0>
 8009278:	702a      	strb	r2, [r5, #0]
 800927a:	6863      	ldr	r3, [r4, #4]
 800927c:	9e01      	ldr	r6, [sp, #4]
 800927e:	4639      	mov	r1, r7
 8009280:	4650      	mov	r0, sl
 8009282:	47b0      	blx	r6
 8009284:	f8d8 3000 	ldr.w	r3, [r8]
 8009288:	6821      	ldr	r1, [r4, #0]
 800928a:	1d1a      	adds	r2, r3, #4
 800928c:	f8c8 2000 	str.w	r2, [r8]
 8009290:	f011 0f20 	tst.w	r1, #32
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	d00f      	beq.n	80092b8 <_scanf_i+0x1c8>
 8009298:	6018      	str	r0, [r3, #0]
 800929a:	68e3      	ldr	r3, [r4, #12]
 800929c:	3301      	adds	r3, #1
 800929e:	60e3      	str	r3, [r4, #12]
 80092a0:	1bed      	subs	r5, r5, r7
 80092a2:	44ab      	add	fp, r5
 80092a4:	6925      	ldr	r5, [r4, #16]
 80092a6:	445d      	add	r5, fp
 80092a8:	6125      	str	r5, [r4, #16]
 80092aa:	2000      	movs	r0, #0
 80092ac:	b007      	add	sp, #28
 80092ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b2:	f04f 0b00 	mov.w	fp, #0
 80092b6:	e7ca      	b.n	800924e <_scanf_i+0x15e>
 80092b8:	07ca      	lsls	r2, r1, #31
 80092ba:	bf4c      	ite	mi
 80092bc:	8018      	strhmi	r0, [r3, #0]
 80092be:	6018      	strpl	r0, [r3, #0]
 80092c0:	e7eb      	b.n	800929a <_scanf_i+0x1aa>
 80092c2:	2001      	movs	r0, #1
 80092c4:	e7f2      	b.n	80092ac <_scanf_i+0x1bc>
 80092c6:	bf00      	nop
 80092c8:	0800a274 	.word	0x0800a274
 80092cc:	080094ad 	.word	0x080094ad
 80092d0:	08006a69 	.word	0x08006a69
 80092d4:	0800a6c6 	.word	0x0800a6c6

080092d8 <_read_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d07      	ldr	r5, [pc, #28]	; (80092f8 <_read_r+0x20>)
 80092dc:	4604      	mov	r4, r0
 80092de:	4608      	mov	r0, r1
 80092e0:	4611      	mov	r1, r2
 80092e2:	2200      	movs	r2, #0
 80092e4:	602a      	str	r2, [r5, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	f7f9 f8ea 	bl	80024c0 <_read>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_read_r+0x1e>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_read_r+0x1e>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	20007f10 	.word	0x20007f10

080092fc <_sbrk_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	4d06      	ldr	r5, [pc, #24]	; (8009318 <_sbrk_r+0x1c>)
 8009300:	2300      	movs	r3, #0
 8009302:	4604      	mov	r4, r0
 8009304:	4608      	mov	r0, r1
 8009306:	602b      	str	r3, [r5, #0]
 8009308:	f7f9 f948 	bl	800259c <_sbrk>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d102      	bne.n	8009316 <_sbrk_r+0x1a>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	b103      	cbz	r3, 8009316 <_sbrk_r+0x1a>
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	20007f10 	.word	0x20007f10

0800931c <__sccl>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	780b      	ldrb	r3, [r1, #0]
 8009320:	4604      	mov	r4, r0
 8009322:	2b5e      	cmp	r3, #94	; 0x5e
 8009324:	bf0b      	itete	eq
 8009326:	784b      	ldrbeq	r3, [r1, #1]
 8009328:	1c48      	addne	r0, r1, #1
 800932a:	1c88      	addeq	r0, r1, #2
 800932c:	2200      	movne	r2, #0
 800932e:	bf08      	it	eq
 8009330:	2201      	moveq	r2, #1
 8009332:	1e61      	subs	r1, r4, #1
 8009334:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8009338:	f801 2f01 	strb.w	r2, [r1, #1]!
 800933c:	42a9      	cmp	r1, r5
 800933e:	d1fb      	bne.n	8009338 <__sccl+0x1c>
 8009340:	b90b      	cbnz	r3, 8009346 <__sccl+0x2a>
 8009342:	3801      	subs	r0, #1
 8009344:	bd70      	pop	{r4, r5, r6, pc}
 8009346:	f082 0101 	eor.w	r1, r2, #1
 800934a:	54e1      	strb	r1, [r4, r3]
 800934c:	1c42      	adds	r2, r0, #1
 800934e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8009352:	2d2d      	cmp	r5, #45	; 0x2d
 8009354:	f102 36ff 	add.w	r6, r2, #4294967295
 8009358:	4610      	mov	r0, r2
 800935a:	d006      	beq.n	800936a <__sccl+0x4e>
 800935c:	2d5d      	cmp	r5, #93	; 0x5d
 800935e:	d0f1      	beq.n	8009344 <__sccl+0x28>
 8009360:	b90d      	cbnz	r5, 8009366 <__sccl+0x4a>
 8009362:	4630      	mov	r0, r6
 8009364:	e7ee      	b.n	8009344 <__sccl+0x28>
 8009366:	462b      	mov	r3, r5
 8009368:	e7ef      	b.n	800934a <__sccl+0x2e>
 800936a:	7816      	ldrb	r6, [r2, #0]
 800936c:	2e5d      	cmp	r6, #93	; 0x5d
 800936e:	d0fa      	beq.n	8009366 <__sccl+0x4a>
 8009370:	42b3      	cmp	r3, r6
 8009372:	dcf8      	bgt.n	8009366 <__sccl+0x4a>
 8009374:	4618      	mov	r0, r3
 8009376:	3001      	adds	r0, #1
 8009378:	4286      	cmp	r6, r0
 800937a:	5421      	strb	r1, [r4, r0]
 800937c:	dcfb      	bgt.n	8009376 <__sccl+0x5a>
 800937e:	43d8      	mvns	r0, r3
 8009380:	4430      	add	r0, r6
 8009382:	1c5d      	adds	r5, r3, #1
 8009384:	42b3      	cmp	r3, r6
 8009386:	bfa8      	it	ge
 8009388:	2000      	movge	r0, #0
 800938a:	182b      	adds	r3, r5, r0
 800938c:	3202      	adds	r2, #2
 800938e:	e7de      	b.n	800934e <__sccl+0x32>

08009390 <strncmp>:
 8009390:	b510      	push	{r4, lr}
 8009392:	b16a      	cbz	r2, 80093b0 <strncmp+0x20>
 8009394:	3901      	subs	r1, #1
 8009396:	1884      	adds	r4, r0, r2
 8009398:	f810 3b01 	ldrb.w	r3, [r0], #1
 800939c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d103      	bne.n	80093ac <strncmp+0x1c>
 80093a4:	42a0      	cmp	r0, r4
 80093a6:	d001      	beq.n	80093ac <strncmp+0x1c>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1f5      	bne.n	8009398 <strncmp+0x8>
 80093ac:	1a98      	subs	r0, r3, r2
 80093ae:	bd10      	pop	{r4, pc}
 80093b0:	4610      	mov	r0, r2
 80093b2:	e7fc      	b.n	80093ae <strncmp+0x1e>

080093b4 <_strtoul_l.isra.0>:
 80093b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093b8:	4e3b      	ldr	r6, [pc, #236]	; (80094a8 <_strtoul_l.isra.0+0xf4>)
 80093ba:	4686      	mov	lr, r0
 80093bc:	468c      	mov	ip, r1
 80093be:	4660      	mov	r0, ip
 80093c0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80093c4:	5da5      	ldrb	r5, [r4, r6]
 80093c6:	f015 0508 	ands.w	r5, r5, #8
 80093ca:	d1f8      	bne.n	80093be <_strtoul_l.isra.0+0xa>
 80093cc:	2c2d      	cmp	r4, #45	; 0x2d
 80093ce:	d134      	bne.n	800943a <_strtoul_l.isra.0+0x86>
 80093d0:	f89c 4000 	ldrb.w	r4, [ip]
 80093d4:	f04f 0801 	mov.w	r8, #1
 80093d8:	f100 0c02 	add.w	ip, r0, #2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d05e      	beq.n	800949e <_strtoul_l.isra.0+0xea>
 80093e0:	2b10      	cmp	r3, #16
 80093e2:	d10c      	bne.n	80093fe <_strtoul_l.isra.0+0x4a>
 80093e4:	2c30      	cmp	r4, #48	; 0x30
 80093e6:	d10a      	bne.n	80093fe <_strtoul_l.isra.0+0x4a>
 80093e8:	f89c 0000 	ldrb.w	r0, [ip]
 80093ec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80093f0:	2858      	cmp	r0, #88	; 0x58
 80093f2:	d14f      	bne.n	8009494 <_strtoul_l.isra.0+0xe0>
 80093f4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80093f8:	2310      	movs	r3, #16
 80093fa:	f10c 0c02 	add.w	ip, ip, #2
 80093fe:	f04f 37ff 	mov.w	r7, #4294967295
 8009402:	2500      	movs	r5, #0
 8009404:	fbb7 f7f3 	udiv	r7, r7, r3
 8009408:	fb03 f907 	mul.w	r9, r3, r7
 800940c:	ea6f 0909 	mvn.w	r9, r9
 8009410:	4628      	mov	r0, r5
 8009412:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009416:	2e09      	cmp	r6, #9
 8009418:	d818      	bhi.n	800944c <_strtoul_l.isra.0+0x98>
 800941a:	4634      	mov	r4, r6
 800941c:	42a3      	cmp	r3, r4
 800941e:	dd24      	ble.n	800946a <_strtoul_l.isra.0+0xb6>
 8009420:	2d00      	cmp	r5, #0
 8009422:	db1f      	blt.n	8009464 <_strtoul_l.isra.0+0xb0>
 8009424:	4287      	cmp	r7, r0
 8009426:	d31d      	bcc.n	8009464 <_strtoul_l.isra.0+0xb0>
 8009428:	d101      	bne.n	800942e <_strtoul_l.isra.0+0x7a>
 800942a:	45a1      	cmp	r9, r4
 800942c:	db1a      	blt.n	8009464 <_strtoul_l.isra.0+0xb0>
 800942e:	fb00 4003 	mla	r0, r0, r3, r4
 8009432:	2501      	movs	r5, #1
 8009434:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009438:	e7eb      	b.n	8009412 <_strtoul_l.isra.0+0x5e>
 800943a:	2c2b      	cmp	r4, #43	; 0x2b
 800943c:	bf08      	it	eq
 800943e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009442:	46a8      	mov	r8, r5
 8009444:	bf08      	it	eq
 8009446:	f100 0c02 	addeq.w	ip, r0, #2
 800944a:	e7c7      	b.n	80093dc <_strtoul_l.isra.0+0x28>
 800944c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009450:	2e19      	cmp	r6, #25
 8009452:	d801      	bhi.n	8009458 <_strtoul_l.isra.0+0xa4>
 8009454:	3c37      	subs	r4, #55	; 0x37
 8009456:	e7e1      	b.n	800941c <_strtoul_l.isra.0+0x68>
 8009458:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800945c:	2e19      	cmp	r6, #25
 800945e:	d804      	bhi.n	800946a <_strtoul_l.isra.0+0xb6>
 8009460:	3c57      	subs	r4, #87	; 0x57
 8009462:	e7db      	b.n	800941c <_strtoul_l.isra.0+0x68>
 8009464:	f04f 35ff 	mov.w	r5, #4294967295
 8009468:	e7e4      	b.n	8009434 <_strtoul_l.isra.0+0x80>
 800946a:	2d00      	cmp	r5, #0
 800946c:	da07      	bge.n	800947e <_strtoul_l.isra.0+0xca>
 800946e:	2322      	movs	r3, #34	; 0x22
 8009470:	f8ce 3000 	str.w	r3, [lr]
 8009474:	f04f 30ff 	mov.w	r0, #4294967295
 8009478:	b942      	cbnz	r2, 800948c <_strtoul_l.isra.0+0xd8>
 800947a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800947e:	f1b8 0f00 	cmp.w	r8, #0
 8009482:	d000      	beq.n	8009486 <_strtoul_l.isra.0+0xd2>
 8009484:	4240      	negs	r0, r0
 8009486:	2a00      	cmp	r2, #0
 8009488:	d0f7      	beq.n	800947a <_strtoul_l.isra.0+0xc6>
 800948a:	b10d      	cbz	r5, 8009490 <_strtoul_l.isra.0+0xdc>
 800948c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009490:	6011      	str	r1, [r2, #0]
 8009492:	e7f2      	b.n	800947a <_strtoul_l.isra.0+0xc6>
 8009494:	2430      	movs	r4, #48	; 0x30
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1b1      	bne.n	80093fe <_strtoul_l.isra.0+0x4a>
 800949a:	2308      	movs	r3, #8
 800949c:	e7af      	b.n	80093fe <_strtoul_l.isra.0+0x4a>
 800949e:	2c30      	cmp	r4, #48	; 0x30
 80094a0:	d0a2      	beq.n	80093e8 <_strtoul_l.isra.0+0x34>
 80094a2:	230a      	movs	r3, #10
 80094a4:	e7ab      	b.n	80093fe <_strtoul_l.isra.0+0x4a>
 80094a6:	bf00      	nop
 80094a8:	0800a329 	.word	0x0800a329

080094ac <_strtoul_r>:
 80094ac:	f7ff bf82 	b.w	80093b4 <_strtoul_l.isra.0>

080094b0 <__submore>:
 80094b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b4:	460c      	mov	r4, r1
 80094b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80094b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094bc:	4299      	cmp	r1, r3
 80094be:	d11d      	bne.n	80094fc <__submore+0x4c>
 80094c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80094c4:	f7ff fa34 	bl	8008930 <_malloc_r>
 80094c8:	b918      	cbnz	r0, 80094d2 <__submore+0x22>
 80094ca:	f04f 30ff 	mov.w	r0, #4294967295
 80094ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80094d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80094dc:	6360      	str	r0, [r4, #52]	; 0x34
 80094de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80094e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80094e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80094ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80094ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80094f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80094f6:	6020      	str	r0, [r4, #0]
 80094f8:	2000      	movs	r0, #0
 80094fa:	e7e8      	b.n	80094ce <__submore+0x1e>
 80094fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80094fe:	0077      	lsls	r7, r6, #1
 8009500:	463a      	mov	r2, r7
 8009502:	f000 fa2d 	bl	8009960 <_realloc_r>
 8009506:	4605      	mov	r5, r0
 8009508:	2800      	cmp	r0, #0
 800950a:	d0de      	beq.n	80094ca <__submore+0x1a>
 800950c:	eb00 0806 	add.w	r8, r0, r6
 8009510:	4601      	mov	r1, r0
 8009512:	4632      	mov	r2, r6
 8009514:	4640      	mov	r0, r8
 8009516:	f7fe fce3 	bl	8007ee0 <memcpy>
 800951a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800951e:	f8c4 8000 	str.w	r8, [r4]
 8009522:	e7e9      	b.n	80094f8 <__submore+0x48>

08009524 <__ascii_wctomb>:
 8009524:	b149      	cbz	r1, 800953a <__ascii_wctomb+0x16>
 8009526:	2aff      	cmp	r2, #255	; 0xff
 8009528:	bf85      	ittet	hi
 800952a:	238a      	movhi	r3, #138	; 0x8a
 800952c:	6003      	strhi	r3, [r0, #0]
 800952e:	700a      	strbls	r2, [r1, #0]
 8009530:	f04f 30ff 	movhi.w	r0, #4294967295
 8009534:	bf98      	it	ls
 8009536:	2001      	movls	r0, #1
 8009538:	4770      	bx	lr
 800953a:	4608      	mov	r0, r1
 800953c:	4770      	bx	lr
	...

08009540 <__assert_func>:
 8009540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009542:	4614      	mov	r4, r2
 8009544:	461a      	mov	r2, r3
 8009546:	4b09      	ldr	r3, [pc, #36]	; (800956c <__assert_func+0x2c>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4605      	mov	r5, r0
 800954c:	68d8      	ldr	r0, [r3, #12]
 800954e:	b14c      	cbz	r4, 8009564 <__assert_func+0x24>
 8009550:	4b07      	ldr	r3, [pc, #28]	; (8009570 <__assert_func+0x30>)
 8009552:	9100      	str	r1, [sp, #0]
 8009554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009558:	4906      	ldr	r1, [pc, #24]	; (8009574 <__assert_func+0x34>)
 800955a:	462b      	mov	r3, r5
 800955c:	f000 f9a6 	bl	80098ac <fiprintf>
 8009560:	f000 fc3e 	bl	8009de0 <abort>
 8009564:	4b04      	ldr	r3, [pc, #16]	; (8009578 <__assert_func+0x38>)
 8009566:	461c      	mov	r4, r3
 8009568:	e7f3      	b.n	8009552 <__assert_func+0x12>
 800956a:	bf00      	nop
 800956c:	20000030 	.word	0x20000030
 8009570:	0800a6c8 	.word	0x0800a6c8
 8009574:	0800a6d5 	.word	0x0800a6d5
 8009578:	0800a703 	.word	0x0800a703

0800957c <__sflush_r>:
 800957c:	898a      	ldrh	r2, [r1, #12]
 800957e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009582:	4605      	mov	r5, r0
 8009584:	0710      	lsls	r0, r2, #28
 8009586:	460c      	mov	r4, r1
 8009588:	d458      	bmi.n	800963c <__sflush_r+0xc0>
 800958a:	684b      	ldr	r3, [r1, #4]
 800958c:	2b00      	cmp	r3, #0
 800958e:	dc05      	bgt.n	800959c <__sflush_r+0x20>
 8009590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009592:	2b00      	cmp	r3, #0
 8009594:	dc02      	bgt.n	800959c <__sflush_r+0x20>
 8009596:	2000      	movs	r0, #0
 8009598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800959c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800959e:	2e00      	cmp	r6, #0
 80095a0:	d0f9      	beq.n	8009596 <__sflush_r+0x1a>
 80095a2:	2300      	movs	r3, #0
 80095a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095a8:	682f      	ldr	r7, [r5, #0]
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	d032      	beq.n	8009614 <__sflush_r+0x98>
 80095ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	075a      	lsls	r2, r3, #29
 80095b4:	d505      	bpl.n	80095c2 <__sflush_r+0x46>
 80095b6:	6863      	ldr	r3, [r4, #4]
 80095b8:	1ac0      	subs	r0, r0, r3
 80095ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095bc:	b10b      	cbz	r3, 80095c2 <__sflush_r+0x46>
 80095be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095c0:	1ac0      	subs	r0, r0, r3
 80095c2:	2300      	movs	r3, #0
 80095c4:	4602      	mov	r2, r0
 80095c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095c8:	6a21      	ldr	r1, [r4, #32]
 80095ca:	4628      	mov	r0, r5
 80095cc:	47b0      	blx	r6
 80095ce:	1c43      	adds	r3, r0, #1
 80095d0:	89a3      	ldrh	r3, [r4, #12]
 80095d2:	d106      	bne.n	80095e2 <__sflush_r+0x66>
 80095d4:	6829      	ldr	r1, [r5, #0]
 80095d6:	291d      	cmp	r1, #29
 80095d8:	d82c      	bhi.n	8009634 <__sflush_r+0xb8>
 80095da:	4a2a      	ldr	r2, [pc, #168]	; (8009684 <__sflush_r+0x108>)
 80095dc:	40ca      	lsrs	r2, r1
 80095de:	07d6      	lsls	r6, r2, #31
 80095e0:	d528      	bpl.n	8009634 <__sflush_r+0xb8>
 80095e2:	2200      	movs	r2, #0
 80095e4:	6062      	str	r2, [r4, #4]
 80095e6:	04d9      	lsls	r1, r3, #19
 80095e8:	6922      	ldr	r2, [r4, #16]
 80095ea:	6022      	str	r2, [r4, #0]
 80095ec:	d504      	bpl.n	80095f8 <__sflush_r+0x7c>
 80095ee:	1c42      	adds	r2, r0, #1
 80095f0:	d101      	bne.n	80095f6 <__sflush_r+0x7a>
 80095f2:	682b      	ldr	r3, [r5, #0]
 80095f4:	b903      	cbnz	r3, 80095f8 <__sflush_r+0x7c>
 80095f6:	6560      	str	r0, [r4, #84]	; 0x54
 80095f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095fa:	602f      	str	r7, [r5, #0]
 80095fc:	2900      	cmp	r1, #0
 80095fe:	d0ca      	beq.n	8009596 <__sflush_r+0x1a>
 8009600:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009604:	4299      	cmp	r1, r3
 8009606:	d002      	beq.n	800960e <__sflush_r+0x92>
 8009608:	4628      	mov	r0, r5
 800960a:	f7ff f941 	bl	8008890 <_free_r>
 800960e:	2000      	movs	r0, #0
 8009610:	6360      	str	r0, [r4, #52]	; 0x34
 8009612:	e7c1      	b.n	8009598 <__sflush_r+0x1c>
 8009614:	6a21      	ldr	r1, [r4, #32]
 8009616:	2301      	movs	r3, #1
 8009618:	4628      	mov	r0, r5
 800961a:	47b0      	blx	r6
 800961c:	1c41      	adds	r1, r0, #1
 800961e:	d1c7      	bne.n	80095b0 <__sflush_r+0x34>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d0c4      	beq.n	80095b0 <__sflush_r+0x34>
 8009626:	2b1d      	cmp	r3, #29
 8009628:	d001      	beq.n	800962e <__sflush_r+0xb2>
 800962a:	2b16      	cmp	r3, #22
 800962c:	d101      	bne.n	8009632 <__sflush_r+0xb6>
 800962e:	602f      	str	r7, [r5, #0]
 8009630:	e7b1      	b.n	8009596 <__sflush_r+0x1a>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009638:	81a3      	strh	r3, [r4, #12]
 800963a:	e7ad      	b.n	8009598 <__sflush_r+0x1c>
 800963c:	690f      	ldr	r7, [r1, #16]
 800963e:	2f00      	cmp	r7, #0
 8009640:	d0a9      	beq.n	8009596 <__sflush_r+0x1a>
 8009642:	0793      	lsls	r3, r2, #30
 8009644:	680e      	ldr	r6, [r1, #0]
 8009646:	bf08      	it	eq
 8009648:	694b      	ldreq	r3, [r1, #20]
 800964a:	600f      	str	r7, [r1, #0]
 800964c:	bf18      	it	ne
 800964e:	2300      	movne	r3, #0
 8009650:	eba6 0807 	sub.w	r8, r6, r7
 8009654:	608b      	str	r3, [r1, #8]
 8009656:	f1b8 0f00 	cmp.w	r8, #0
 800965a:	dd9c      	ble.n	8009596 <__sflush_r+0x1a>
 800965c:	6a21      	ldr	r1, [r4, #32]
 800965e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009660:	4643      	mov	r3, r8
 8009662:	463a      	mov	r2, r7
 8009664:	4628      	mov	r0, r5
 8009666:	47b0      	blx	r6
 8009668:	2800      	cmp	r0, #0
 800966a:	dc06      	bgt.n	800967a <__sflush_r+0xfe>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	f04f 30ff 	mov.w	r0, #4294967295
 8009678:	e78e      	b.n	8009598 <__sflush_r+0x1c>
 800967a:	4407      	add	r7, r0
 800967c:	eba8 0800 	sub.w	r8, r8, r0
 8009680:	e7e9      	b.n	8009656 <__sflush_r+0xda>
 8009682:	bf00      	nop
 8009684:	20400001 	.word	0x20400001

08009688 <_fflush_r>:
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	690b      	ldr	r3, [r1, #16]
 800968c:	4605      	mov	r5, r0
 800968e:	460c      	mov	r4, r1
 8009690:	b913      	cbnz	r3, 8009698 <_fflush_r+0x10>
 8009692:	2500      	movs	r5, #0
 8009694:	4628      	mov	r0, r5
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	b118      	cbz	r0, 80096a2 <_fflush_r+0x1a>
 800969a:	6983      	ldr	r3, [r0, #24]
 800969c:	b90b      	cbnz	r3, 80096a2 <_fflush_r+0x1a>
 800969e:	f000 f887 	bl	80097b0 <__sinit>
 80096a2:	4b14      	ldr	r3, [pc, #80]	; (80096f4 <_fflush_r+0x6c>)
 80096a4:	429c      	cmp	r4, r3
 80096a6:	d11b      	bne.n	80096e0 <_fflush_r+0x58>
 80096a8:	686c      	ldr	r4, [r5, #4]
 80096aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d0ef      	beq.n	8009692 <_fflush_r+0xa>
 80096b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096b4:	07d0      	lsls	r0, r2, #31
 80096b6:	d404      	bmi.n	80096c2 <_fflush_r+0x3a>
 80096b8:	0599      	lsls	r1, r3, #22
 80096ba:	d402      	bmi.n	80096c2 <_fflush_r+0x3a>
 80096bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096be:	f000 f927 	bl	8009910 <__retarget_lock_acquire_recursive>
 80096c2:	4628      	mov	r0, r5
 80096c4:	4621      	mov	r1, r4
 80096c6:	f7ff ff59 	bl	800957c <__sflush_r>
 80096ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096cc:	07da      	lsls	r2, r3, #31
 80096ce:	4605      	mov	r5, r0
 80096d0:	d4e0      	bmi.n	8009694 <_fflush_r+0xc>
 80096d2:	89a3      	ldrh	r3, [r4, #12]
 80096d4:	059b      	lsls	r3, r3, #22
 80096d6:	d4dd      	bmi.n	8009694 <_fflush_r+0xc>
 80096d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096da:	f000 f91a 	bl	8009912 <__retarget_lock_release_recursive>
 80096de:	e7d9      	b.n	8009694 <_fflush_r+0xc>
 80096e0:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <_fflush_r+0x70>)
 80096e2:	429c      	cmp	r4, r3
 80096e4:	d101      	bne.n	80096ea <_fflush_r+0x62>
 80096e6:	68ac      	ldr	r4, [r5, #8]
 80096e8:	e7df      	b.n	80096aa <_fflush_r+0x22>
 80096ea:	4b04      	ldr	r3, [pc, #16]	; (80096fc <_fflush_r+0x74>)
 80096ec:	429c      	cmp	r4, r3
 80096ee:	bf08      	it	eq
 80096f0:	68ec      	ldreq	r4, [r5, #12]
 80096f2:	e7da      	b.n	80096aa <_fflush_r+0x22>
 80096f4:	0800a724 	.word	0x0800a724
 80096f8:	0800a744 	.word	0x0800a744
 80096fc:	0800a704 	.word	0x0800a704

08009700 <std>:
 8009700:	2300      	movs	r3, #0
 8009702:	b510      	push	{r4, lr}
 8009704:	4604      	mov	r4, r0
 8009706:	e9c0 3300 	strd	r3, r3, [r0]
 800970a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800970e:	6083      	str	r3, [r0, #8]
 8009710:	8181      	strh	r1, [r0, #12]
 8009712:	6643      	str	r3, [r0, #100]	; 0x64
 8009714:	81c2      	strh	r2, [r0, #14]
 8009716:	6183      	str	r3, [r0, #24]
 8009718:	4619      	mov	r1, r3
 800971a:	2208      	movs	r2, #8
 800971c:	305c      	adds	r0, #92	; 0x5c
 800971e:	f7fb fbcd 	bl	8004ebc <memset>
 8009722:	4b05      	ldr	r3, [pc, #20]	; (8009738 <std+0x38>)
 8009724:	6263      	str	r3, [r4, #36]	; 0x24
 8009726:	4b05      	ldr	r3, [pc, #20]	; (800973c <std+0x3c>)
 8009728:	62a3      	str	r3, [r4, #40]	; 0x28
 800972a:	4b05      	ldr	r3, [pc, #20]	; (8009740 <std+0x40>)
 800972c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800972e:	4b05      	ldr	r3, [pc, #20]	; (8009744 <std+0x44>)
 8009730:	6224      	str	r4, [r4, #32]
 8009732:	6323      	str	r3, [r4, #48]	; 0x30
 8009734:	bd10      	pop	{r4, pc}
 8009736:	bf00      	nop
 8009738:	08005c65 	.word	0x08005c65
 800973c:	08005c8b 	.word	0x08005c8b
 8009740:	08005cc3 	.word	0x08005cc3
 8009744:	08005ce7 	.word	0x08005ce7

08009748 <_cleanup_r>:
 8009748:	4901      	ldr	r1, [pc, #4]	; (8009750 <_cleanup_r+0x8>)
 800974a:	f000 b8c1 	b.w	80098d0 <_fwalk_reent>
 800974e:	bf00      	nop
 8009750:	08009689 	.word	0x08009689

08009754 <__sfmoreglue>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	1e4a      	subs	r2, r1, #1
 8009758:	2568      	movs	r5, #104	; 0x68
 800975a:	4355      	muls	r5, r2
 800975c:	460e      	mov	r6, r1
 800975e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009762:	f7ff f8e5 	bl	8008930 <_malloc_r>
 8009766:	4604      	mov	r4, r0
 8009768:	b140      	cbz	r0, 800977c <__sfmoreglue+0x28>
 800976a:	2100      	movs	r1, #0
 800976c:	e9c0 1600 	strd	r1, r6, [r0]
 8009770:	300c      	adds	r0, #12
 8009772:	60a0      	str	r0, [r4, #8]
 8009774:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009778:	f7fb fba0 	bl	8004ebc <memset>
 800977c:	4620      	mov	r0, r4
 800977e:	bd70      	pop	{r4, r5, r6, pc}

08009780 <__sfp_lock_acquire>:
 8009780:	4801      	ldr	r0, [pc, #4]	; (8009788 <__sfp_lock_acquire+0x8>)
 8009782:	f000 b8c5 	b.w	8009910 <__retarget_lock_acquire_recursive>
 8009786:	bf00      	nop
 8009788:	20007f1c 	.word	0x20007f1c

0800978c <__sfp_lock_release>:
 800978c:	4801      	ldr	r0, [pc, #4]	; (8009794 <__sfp_lock_release+0x8>)
 800978e:	f000 b8c0 	b.w	8009912 <__retarget_lock_release_recursive>
 8009792:	bf00      	nop
 8009794:	20007f1c 	.word	0x20007f1c

08009798 <__sinit_lock_acquire>:
 8009798:	4801      	ldr	r0, [pc, #4]	; (80097a0 <__sinit_lock_acquire+0x8>)
 800979a:	f000 b8b9 	b.w	8009910 <__retarget_lock_acquire_recursive>
 800979e:	bf00      	nop
 80097a0:	20007f17 	.word	0x20007f17

080097a4 <__sinit_lock_release>:
 80097a4:	4801      	ldr	r0, [pc, #4]	; (80097ac <__sinit_lock_release+0x8>)
 80097a6:	f000 b8b4 	b.w	8009912 <__retarget_lock_release_recursive>
 80097aa:	bf00      	nop
 80097ac:	20007f17 	.word	0x20007f17

080097b0 <__sinit>:
 80097b0:	b510      	push	{r4, lr}
 80097b2:	4604      	mov	r4, r0
 80097b4:	f7ff fff0 	bl	8009798 <__sinit_lock_acquire>
 80097b8:	69a3      	ldr	r3, [r4, #24]
 80097ba:	b11b      	cbz	r3, 80097c4 <__sinit+0x14>
 80097bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097c0:	f7ff bff0 	b.w	80097a4 <__sinit_lock_release>
 80097c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80097c8:	6523      	str	r3, [r4, #80]	; 0x50
 80097ca:	4b13      	ldr	r3, [pc, #76]	; (8009818 <__sinit+0x68>)
 80097cc:	4a13      	ldr	r2, [pc, #76]	; (800981c <__sinit+0x6c>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80097d2:	42a3      	cmp	r3, r4
 80097d4:	bf04      	itt	eq
 80097d6:	2301      	moveq	r3, #1
 80097d8:	61a3      	streq	r3, [r4, #24]
 80097da:	4620      	mov	r0, r4
 80097dc:	f000 f820 	bl	8009820 <__sfp>
 80097e0:	6060      	str	r0, [r4, #4]
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 f81c 	bl	8009820 <__sfp>
 80097e8:	60a0      	str	r0, [r4, #8]
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 f818 	bl	8009820 <__sfp>
 80097f0:	2200      	movs	r2, #0
 80097f2:	60e0      	str	r0, [r4, #12]
 80097f4:	2104      	movs	r1, #4
 80097f6:	6860      	ldr	r0, [r4, #4]
 80097f8:	f7ff ff82 	bl	8009700 <std>
 80097fc:	68a0      	ldr	r0, [r4, #8]
 80097fe:	2201      	movs	r2, #1
 8009800:	2109      	movs	r1, #9
 8009802:	f7ff ff7d 	bl	8009700 <std>
 8009806:	68e0      	ldr	r0, [r4, #12]
 8009808:	2202      	movs	r2, #2
 800980a:	2112      	movs	r1, #18
 800980c:	f7ff ff78 	bl	8009700 <std>
 8009810:	2301      	movs	r3, #1
 8009812:	61a3      	str	r3, [r4, #24]
 8009814:	e7d2      	b.n	80097bc <__sinit+0xc>
 8009816:	bf00      	nop
 8009818:	0800a298 	.word	0x0800a298
 800981c:	08009749 	.word	0x08009749

08009820 <__sfp>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	4607      	mov	r7, r0
 8009824:	f7ff ffac 	bl	8009780 <__sfp_lock_acquire>
 8009828:	4b1e      	ldr	r3, [pc, #120]	; (80098a4 <__sfp+0x84>)
 800982a:	681e      	ldr	r6, [r3, #0]
 800982c:	69b3      	ldr	r3, [r6, #24]
 800982e:	b913      	cbnz	r3, 8009836 <__sfp+0x16>
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff ffbd 	bl	80097b0 <__sinit>
 8009836:	3648      	adds	r6, #72	; 0x48
 8009838:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800983c:	3b01      	subs	r3, #1
 800983e:	d503      	bpl.n	8009848 <__sfp+0x28>
 8009840:	6833      	ldr	r3, [r6, #0]
 8009842:	b30b      	cbz	r3, 8009888 <__sfp+0x68>
 8009844:	6836      	ldr	r6, [r6, #0]
 8009846:	e7f7      	b.n	8009838 <__sfp+0x18>
 8009848:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800984c:	b9d5      	cbnz	r5, 8009884 <__sfp+0x64>
 800984e:	4b16      	ldr	r3, [pc, #88]	; (80098a8 <__sfp+0x88>)
 8009850:	60e3      	str	r3, [r4, #12]
 8009852:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009856:	6665      	str	r5, [r4, #100]	; 0x64
 8009858:	f000 f859 	bl	800990e <__retarget_lock_init_recursive>
 800985c:	f7ff ff96 	bl	800978c <__sfp_lock_release>
 8009860:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009864:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009868:	6025      	str	r5, [r4, #0]
 800986a:	61a5      	str	r5, [r4, #24]
 800986c:	2208      	movs	r2, #8
 800986e:	4629      	mov	r1, r5
 8009870:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009874:	f7fb fb22 	bl	8004ebc <memset>
 8009878:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800987c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009880:	4620      	mov	r0, r4
 8009882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009884:	3468      	adds	r4, #104	; 0x68
 8009886:	e7d9      	b.n	800983c <__sfp+0x1c>
 8009888:	2104      	movs	r1, #4
 800988a:	4638      	mov	r0, r7
 800988c:	f7ff ff62 	bl	8009754 <__sfmoreglue>
 8009890:	4604      	mov	r4, r0
 8009892:	6030      	str	r0, [r6, #0]
 8009894:	2800      	cmp	r0, #0
 8009896:	d1d5      	bne.n	8009844 <__sfp+0x24>
 8009898:	f7ff ff78 	bl	800978c <__sfp_lock_release>
 800989c:	230c      	movs	r3, #12
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	e7ee      	b.n	8009880 <__sfp+0x60>
 80098a2:	bf00      	nop
 80098a4:	0800a298 	.word	0x0800a298
 80098a8:	ffff0001 	.word	0xffff0001

080098ac <fiprintf>:
 80098ac:	b40e      	push	{r1, r2, r3}
 80098ae:	b503      	push	{r0, r1, lr}
 80098b0:	4601      	mov	r1, r0
 80098b2:	ab03      	add	r3, sp, #12
 80098b4:	4805      	ldr	r0, [pc, #20]	; (80098cc <fiprintf+0x20>)
 80098b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ba:	6800      	ldr	r0, [r0, #0]
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	f000 f89f 	bl	8009a00 <_vfiprintf_r>
 80098c2:	b002      	add	sp, #8
 80098c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098c8:	b003      	add	sp, #12
 80098ca:	4770      	bx	lr
 80098cc:	20000030 	.word	0x20000030

080098d0 <_fwalk_reent>:
 80098d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098d4:	4606      	mov	r6, r0
 80098d6:	4688      	mov	r8, r1
 80098d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80098dc:	2700      	movs	r7, #0
 80098de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80098e2:	f1b9 0901 	subs.w	r9, r9, #1
 80098e6:	d505      	bpl.n	80098f4 <_fwalk_reent+0x24>
 80098e8:	6824      	ldr	r4, [r4, #0]
 80098ea:	2c00      	cmp	r4, #0
 80098ec:	d1f7      	bne.n	80098de <_fwalk_reent+0xe>
 80098ee:	4638      	mov	r0, r7
 80098f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098f4:	89ab      	ldrh	r3, [r5, #12]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d907      	bls.n	800990a <_fwalk_reent+0x3a>
 80098fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80098fe:	3301      	adds	r3, #1
 8009900:	d003      	beq.n	800990a <_fwalk_reent+0x3a>
 8009902:	4629      	mov	r1, r5
 8009904:	4630      	mov	r0, r6
 8009906:	47c0      	blx	r8
 8009908:	4307      	orrs	r7, r0
 800990a:	3568      	adds	r5, #104	; 0x68
 800990c:	e7e9      	b.n	80098e2 <_fwalk_reent+0x12>

0800990e <__retarget_lock_init_recursive>:
 800990e:	4770      	bx	lr

08009910 <__retarget_lock_acquire_recursive>:
 8009910:	4770      	bx	lr

08009912 <__retarget_lock_release_recursive>:
 8009912:	4770      	bx	lr

08009914 <memmove>:
 8009914:	4288      	cmp	r0, r1
 8009916:	b510      	push	{r4, lr}
 8009918:	eb01 0402 	add.w	r4, r1, r2
 800991c:	d902      	bls.n	8009924 <memmove+0x10>
 800991e:	4284      	cmp	r4, r0
 8009920:	4623      	mov	r3, r4
 8009922:	d807      	bhi.n	8009934 <memmove+0x20>
 8009924:	1e43      	subs	r3, r0, #1
 8009926:	42a1      	cmp	r1, r4
 8009928:	d008      	beq.n	800993c <memmove+0x28>
 800992a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800992e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009932:	e7f8      	b.n	8009926 <memmove+0x12>
 8009934:	4402      	add	r2, r0
 8009936:	4601      	mov	r1, r0
 8009938:	428a      	cmp	r2, r1
 800993a:	d100      	bne.n	800993e <memmove+0x2a>
 800993c:	bd10      	pop	{r4, pc}
 800993e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009946:	e7f7      	b.n	8009938 <memmove+0x24>

08009948 <__malloc_lock>:
 8009948:	4801      	ldr	r0, [pc, #4]	; (8009950 <__malloc_lock+0x8>)
 800994a:	f7ff bfe1 	b.w	8009910 <__retarget_lock_acquire_recursive>
 800994e:	bf00      	nop
 8009950:	20007f18 	.word	0x20007f18

08009954 <__malloc_unlock>:
 8009954:	4801      	ldr	r0, [pc, #4]	; (800995c <__malloc_unlock+0x8>)
 8009956:	f7ff bfdc 	b.w	8009912 <__retarget_lock_release_recursive>
 800995a:	bf00      	nop
 800995c:	20007f18 	.word	0x20007f18

08009960 <_realloc_r>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	4607      	mov	r7, r0
 8009964:	4614      	mov	r4, r2
 8009966:	460e      	mov	r6, r1
 8009968:	b921      	cbnz	r1, 8009974 <_realloc_r+0x14>
 800996a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800996e:	4611      	mov	r1, r2
 8009970:	f7fe bfde 	b.w	8008930 <_malloc_r>
 8009974:	b922      	cbnz	r2, 8009980 <_realloc_r+0x20>
 8009976:	f7fe ff8b 	bl	8008890 <_free_r>
 800997a:	4625      	mov	r5, r4
 800997c:	4628      	mov	r0, r5
 800997e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009980:	f000 fa9a 	bl	8009eb8 <_malloc_usable_size_r>
 8009984:	42a0      	cmp	r0, r4
 8009986:	d20f      	bcs.n	80099a8 <_realloc_r+0x48>
 8009988:	4621      	mov	r1, r4
 800998a:	4638      	mov	r0, r7
 800998c:	f7fe ffd0 	bl	8008930 <_malloc_r>
 8009990:	4605      	mov	r5, r0
 8009992:	2800      	cmp	r0, #0
 8009994:	d0f2      	beq.n	800997c <_realloc_r+0x1c>
 8009996:	4631      	mov	r1, r6
 8009998:	4622      	mov	r2, r4
 800999a:	f7fe faa1 	bl	8007ee0 <memcpy>
 800999e:	4631      	mov	r1, r6
 80099a0:	4638      	mov	r0, r7
 80099a2:	f7fe ff75 	bl	8008890 <_free_r>
 80099a6:	e7e9      	b.n	800997c <_realloc_r+0x1c>
 80099a8:	4635      	mov	r5, r6
 80099aa:	e7e7      	b.n	800997c <_realloc_r+0x1c>

080099ac <__sfputc_r>:
 80099ac:	6893      	ldr	r3, [r2, #8]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	b410      	push	{r4}
 80099b4:	6093      	str	r3, [r2, #8]
 80099b6:	da08      	bge.n	80099ca <__sfputc_r+0x1e>
 80099b8:	6994      	ldr	r4, [r2, #24]
 80099ba:	42a3      	cmp	r3, r4
 80099bc:	db01      	blt.n	80099c2 <__sfputc_r+0x16>
 80099be:	290a      	cmp	r1, #10
 80099c0:	d103      	bne.n	80099ca <__sfputc_r+0x1e>
 80099c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099c6:	f000 b94b 	b.w	8009c60 <__swbuf_r>
 80099ca:	6813      	ldr	r3, [r2, #0]
 80099cc:	1c58      	adds	r0, r3, #1
 80099ce:	6010      	str	r0, [r2, #0]
 80099d0:	7019      	strb	r1, [r3, #0]
 80099d2:	4608      	mov	r0, r1
 80099d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099d8:	4770      	bx	lr

080099da <__sfputs_r>:
 80099da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099dc:	4606      	mov	r6, r0
 80099de:	460f      	mov	r7, r1
 80099e0:	4614      	mov	r4, r2
 80099e2:	18d5      	adds	r5, r2, r3
 80099e4:	42ac      	cmp	r4, r5
 80099e6:	d101      	bne.n	80099ec <__sfputs_r+0x12>
 80099e8:	2000      	movs	r0, #0
 80099ea:	e007      	b.n	80099fc <__sfputs_r+0x22>
 80099ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f0:	463a      	mov	r2, r7
 80099f2:	4630      	mov	r0, r6
 80099f4:	f7ff ffda 	bl	80099ac <__sfputc_r>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d1f3      	bne.n	80099e4 <__sfputs_r+0xa>
 80099fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a00 <_vfiprintf_r>:
 8009a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a04:	460d      	mov	r5, r1
 8009a06:	b09d      	sub	sp, #116	; 0x74
 8009a08:	4614      	mov	r4, r2
 8009a0a:	4698      	mov	r8, r3
 8009a0c:	4606      	mov	r6, r0
 8009a0e:	b118      	cbz	r0, 8009a18 <_vfiprintf_r+0x18>
 8009a10:	6983      	ldr	r3, [r0, #24]
 8009a12:	b90b      	cbnz	r3, 8009a18 <_vfiprintf_r+0x18>
 8009a14:	f7ff fecc 	bl	80097b0 <__sinit>
 8009a18:	4b89      	ldr	r3, [pc, #548]	; (8009c40 <_vfiprintf_r+0x240>)
 8009a1a:	429d      	cmp	r5, r3
 8009a1c:	d11b      	bne.n	8009a56 <_vfiprintf_r+0x56>
 8009a1e:	6875      	ldr	r5, [r6, #4]
 8009a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a22:	07d9      	lsls	r1, r3, #31
 8009a24:	d405      	bmi.n	8009a32 <_vfiprintf_r+0x32>
 8009a26:	89ab      	ldrh	r3, [r5, #12]
 8009a28:	059a      	lsls	r2, r3, #22
 8009a2a:	d402      	bmi.n	8009a32 <_vfiprintf_r+0x32>
 8009a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a2e:	f7ff ff6f 	bl	8009910 <__retarget_lock_acquire_recursive>
 8009a32:	89ab      	ldrh	r3, [r5, #12]
 8009a34:	071b      	lsls	r3, r3, #28
 8009a36:	d501      	bpl.n	8009a3c <_vfiprintf_r+0x3c>
 8009a38:	692b      	ldr	r3, [r5, #16]
 8009a3a:	b9eb      	cbnz	r3, 8009a78 <_vfiprintf_r+0x78>
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	4630      	mov	r0, r6
 8009a40:	f000 f960 	bl	8009d04 <__swsetup_r>
 8009a44:	b1c0      	cbz	r0, 8009a78 <_vfiprintf_r+0x78>
 8009a46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a48:	07dc      	lsls	r4, r3, #31
 8009a4a:	d50e      	bpl.n	8009a6a <_vfiprintf_r+0x6a>
 8009a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a50:	b01d      	add	sp, #116	; 0x74
 8009a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a56:	4b7b      	ldr	r3, [pc, #492]	; (8009c44 <_vfiprintf_r+0x244>)
 8009a58:	429d      	cmp	r5, r3
 8009a5a:	d101      	bne.n	8009a60 <_vfiprintf_r+0x60>
 8009a5c:	68b5      	ldr	r5, [r6, #8]
 8009a5e:	e7df      	b.n	8009a20 <_vfiprintf_r+0x20>
 8009a60:	4b79      	ldr	r3, [pc, #484]	; (8009c48 <_vfiprintf_r+0x248>)
 8009a62:	429d      	cmp	r5, r3
 8009a64:	bf08      	it	eq
 8009a66:	68f5      	ldreq	r5, [r6, #12]
 8009a68:	e7da      	b.n	8009a20 <_vfiprintf_r+0x20>
 8009a6a:	89ab      	ldrh	r3, [r5, #12]
 8009a6c:	0598      	lsls	r0, r3, #22
 8009a6e:	d4ed      	bmi.n	8009a4c <_vfiprintf_r+0x4c>
 8009a70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a72:	f7ff ff4e 	bl	8009912 <__retarget_lock_release_recursive>
 8009a76:	e7e9      	b.n	8009a4c <_vfiprintf_r+0x4c>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a7c:	2320      	movs	r3, #32
 8009a7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a86:	2330      	movs	r3, #48	; 0x30
 8009a88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c4c <_vfiprintf_r+0x24c>
 8009a8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a90:	f04f 0901 	mov.w	r9, #1
 8009a94:	4623      	mov	r3, r4
 8009a96:	469a      	mov	sl, r3
 8009a98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a9c:	b10a      	cbz	r2, 8009aa2 <_vfiprintf_r+0xa2>
 8009a9e:	2a25      	cmp	r2, #37	; 0x25
 8009aa0:	d1f9      	bne.n	8009a96 <_vfiprintf_r+0x96>
 8009aa2:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa6:	d00b      	beq.n	8009ac0 <_vfiprintf_r+0xc0>
 8009aa8:	465b      	mov	r3, fp
 8009aaa:	4622      	mov	r2, r4
 8009aac:	4629      	mov	r1, r5
 8009aae:	4630      	mov	r0, r6
 8009ab0:	f7ff ff93 	bl	80099da <__sfputs_r>
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	f000 80aa 	beq.w	8009c0e <_vfiprintf_r+0x20e>
 8009aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009abc:	445a      	add	r2, fp
 8009abe:	9209      	str	r2, [sp, #36]	; 0x24
 8009ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 80a2 	beq.w	8009c0e <_vfiprintf_r+0x20e>
 8009aca:	2300      	movs	r3, #0
 8009acc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad4:	f10a 0a01 	add.w	sl, sl, #1
 8009ad8:	9304      	str	r3, [sp, #16]
 8009ada:	9307      	str	r3, [sp, #28]
 8009adc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ae0:	931a      	str	r3, [sp, #104]	; 0x68
 8009ae2:	4654      	mov	r4, sl
 8009ae4:	2205      	movs	r2, #5
 8009ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aea:	4858      	ldr	r0, [pc, #352]	; (8009c4c <_vfiprintf_r+0x24c>)
 8009aec:	f7f6 fb90 	bl	8000210 <memchr>
 8009af0:	9a04      	ldr	r2, [sp, #16]
 8009af2:	b9d8      	cbnz	r0, 8009b2c <_vfiprintf_r+0x12c>
 8009af4:	06d1      	lsls	r1, r2, #27
 8009af6:	bf44      	itt	mi
 8009af8:	2320      	movmi	r3, #32
 8009afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009afe:	0713      	lsls	r3, r2, #28
 8009b00:	bf44      	itt	mi
 8009b02:	232b      	movmi	r3, #43	; 0x2b
 8009b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b08:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b0e:	d015      	beq.n	8009b3c <_vfiprintf_r+0x13c>
 8009b10:	9a07      	ldr	r2, [sp, #28]
 8009b12:	4654      	mov	r4, sl
 8009b14:	2000      	movs	r0, #0
 8009b16:	f04f 0c0a 	mov.w	ip, #10
 8009b1a:	4621      	mov	r1, r4
 8009b1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b20:	3b30      	subs	r3, #48	; 0x30
 8009b22:	2b09      	cmp	r3, #9
 8009b24:	d94e      	bls.n	8009bc4 <_vfiprintf_r+0x1c4>
 8009b26:	b1b0      	cbz	r0, 8009b56 <_vfiprintf_r+0x156>
 8009b28:	9207      	str	r2, [sp, #28]
 8009b2a:	e014      	b.n	8009b56 <_vfiprintf_r+0x156>
 8009b2c:	eba0 0308 	sub.w	r3, r0, r8
 8009b30:	fa09 f303 	lsl.w	r3, r9, r3
 8009b34:	4313      	orrs	r3, r2
 8009b36:	9304      	str	r3, [sp, #16]
 8009b38:	46a2      	mov	sl, r4
 8009b3a:	e7d2      	b.n	8009ae2 <_vfiprintf_r+0xe2>
 8009b3c:	9b03      	ldr	r3, [sp, #12]
 8009b3e:	1d19      	adds	r1, r3, #4
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	9103      	str	r1, [sp, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	bfbb      	ittet	lt
 8009b48:	425b      	neglt	r3, r3
 8009b4a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b4e:	9307      	strge	r3, [sp, #28]
 8009b50:	9307      	strlt	r3, [sp, #28]
 8009b52:	bfb8      	it	lt
 8009b54:	9204      	strlt	r2, [sp, #16]
 8009b56:	7823      	ldrb	r3, [r4, #0]
 8009b58:	2b2e      	cmp	r3, #46	; 0x2e
 8009b5a:	d10c      	bne.n	8009b76 <_vfiprintf_r+0x176>
 8009b5c:	7863      	ldrb	r3, [r4, #1]
 8009b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b60:	d135      	bne.n	8009bce <_vfiprintf_r+0x1ce>
 8009b62:	9b03      	ldr	r3, [sp, #12]
 8009b64:	1d1a      	adds	r2, r3, #4
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	9203      	str	r2, [sp, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	bfb8      	it	lt
 8009b6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b72:	3402      	adds	r4, #2
 8009b74:	9305      	str	r3, [sp, #20]
 8009b76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c5c <_vfiprintf_r+0x25c>
 8009b7a:	7821      	ldrb	r1, [r4, #0]
 8009b7c:	2203      	movs	r2, #3
 8009b7e:	4650      	mov	r0, sl
 8009b80:	f7f6 fb46 	bl	8000210 <memchr>
 8009b84:	b140      	cbz	r0, 8009b98 <_vfiprintf_r+0x198>
 8009b86:	2340      	movs	r3, #64	; 0x40
 8009b88:	eba0 000a 	sub.w	r0, r0, sl
 8009b8c:	fa03 f000 	lsl.w	r0, r3, r0
 8009b90:	9b04      	ldr	r3, [sp, #16]
 8009b92:	4303      	orrs	r3, r0
 8009b94:	3401      	adds	r4, #1
 8009b96:	9304      	str	r3, [sp, #16]
 8009b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9c:	482c      	ldr	r0, [pc, #176]	; (8009c50 <_vfiprintf_r+0x250>)
 8009b9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ba2:	2206      	movs	r2, #6
 8009ba4:	f7f6 fb34 	bl	8000210 <memchr>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d03f      	beq.n	8009c2c <_vfiprintf_r+0x22c>
 8009bac:	4b29      	ldr	r3, [pc, #164]	; (8009c54 <_vfiprintf_r+0x254>)
 8009bae:	bb1b      	cbnz	r3, 8009bf8 <_vfiprintf_r+0x1f8>
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	3307      	adds	r3, #7
 8009bb4:	f023 0307 	bic.w	r3, r3, #7
 8009bb8:	3308      	adds	r3, #8
 8009bba:	9303      	str	r3, [sp, #12]
 8009bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bbe:	443b      	add	r3, r7
 8009bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bc2:	e767      	b.n	8009a94 <_vfiprintf_r+0x94>
 8009bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bc8:	460c      	mov	r4, r1
 8009bca:	2001      	movs	r0, #1
 8009bcc:	e7a5      	b.n	8009b1a <_vfiprintf_r+0x11a>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	3401      	adds	r4, #1
 8009bd2:	9305      	str	r3, [sp, #20]
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	f04f 0c0a 	mov.w	ip, #10
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009be0:	3a30      	subs	r2, #48	; 0x30
 8009be2:	2a09      	cmp	r2, #9
 8009be4:	d903      	bls.n	8009bee <_vfiprintf_r+0x1ee>
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0c5      	beq.n	8009b76 <_vfiprintf_r+0x176>
 8009bea:	9105      	str	r1, [sp, #20]
 8009bec:	e7c3      	b.n	8009b76 <_vfiprintf_r+0x176>
 8009bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e7f0      	b.n	8009bda <_vfiprintf_r+0x1da>
 8009bf8:	ab03      	add	r3, sp, #12
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	462a      	mov	r2, r5
 8009bfe:	4b16      	ldr	r3, [pc, #88]	; (8009c58 <_vfiprintf_r+0x258>)
 8009c00:	a904      	add	r1, sp, #16
 8009c02:	4630      	mov	r0, r6
 8009c04:	f7fb fa02 	bl	800500c <_printf_float>
 8009c08:	4607      	mov	r7, r0
 8009c0a:	1c78      	adds	r0, r7, #1
 8009c0c:	d1d6      	bne.n	8009bbc <_vfiprintf_r+0x1bc>
 8009c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c10:	07d9      	lsls	r1, r3, #31
 8009c12:	d405      	bmi.n	8009c20 <_vfiprintf_r+0x220>
 8009c14:	89ab      	ldrh	r3, [r5, #12]
 8009c16:	059a      	lsls	r2, r3, #22
 8009c18:	d402      	bmi.n	8009c20 <_vfiprintf_r+0x220>
 8009c1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c1c:	f7ff fe79 	bl	8009912 <__retarget_lock_release_recursive>
 8009c20:	89ab      	ldrh	r3, [r5, #12]
 8009c22:	065b      	lsls	r3, r3, #25
 8009c24:	f53f af12 	bmi.w	8009a4c <_vfiprintf_r+0x4c>
 8009c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c2a:	e711      	b.n	8009a50 <_vfiprintf_r+0x50>
 8009c2c:	ab03      	add	r3, sp, #12
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	462a      	mov	r2, r5
 8009c32:	4b09      	ldr	r3, [pc, #36]	; (8009c58 <_vfiprintf_r+0x258>)
 8009c34:	a904      	add	r1, sp, #16
 8009c36:	4630      	mov	r0, r6
 8009c38:	f7fb fc8c 	bl	8005554 <_printf_i>
 8009c3c:	e7e4      	b.n	8009c08 <_vfiprintf_r+0x208>
 8009c3e:	bf00      	nop
 8009c40:	0800a724 	.word	0x0800a724
 8009c44:	0800a744 	.word	0x0800a744
 8009c48:	0800a704 	.word	0x0800a704
 8009c4c:	0800a69c 	.word	0x0800a69c
 8009c50:	0800a6a6 	.word	0x0800a6a6
 8009c54:	0800500d 	.word	0x0800500d
 8009c58:	080099db 	.word	0x080099db
 8009c5c:	0800a6a2 	.word	0x0800a6a2

08009c60 <__swbuf_r>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	460e      	mov	r6, r1
 8009c64:	4614      	mov	r4, r2
 8009c66:	4605      	mov	r5, r0
 8009c68:	b118      	cbz	r0, 8009c72 <__swbuf_r+0x12>
 8009c6a:	6983      	ldr	r3, [r0, #24]
 8009c6c:	b90b      	cbnz	r3, 8009c72 <__swbuf_r+0x12>
 8009c6e:	f7ff fd9f 	bl	80097b0 <__sinit>
 8009c72:	4b21      	ldr	r3, [pc, #132]	; (8009cf8 <__swbuf_r+0x98>)
 8009c74:	429c      	cmp	r4, r3
 8009c76:	d12b      	bne.n	8009cd0 <__swbuf_r+0x70>
 8009c78:	686c      	ldr	r4, [r5, #4]
 8009c7a:	69a3      	ldr	r3, [r4, #24]
 8009c7c:	60a3      	str	r3, [r4, #8]
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	071a      	lsls	r2, r3, #28
 8009c82:	d52f      	bpl.n	8009ce4 <__swbuf_r+0x84>
 8009c84:	6923      	ldr	r3, [r4, #16]
 8009c86:	b36b      	cbz	r3, 8009ce4 <__swbuf_r+0x84>
 8009c88:	6923      	ldr	r3, [r4, #16]
 8009c8a:	6820      	ldr	r0, [r4, #0]
 8009c8c:	1ac0      	subs	r0, r0, r3
 8009c8e:	6963      	ldr	r3, [r4, #20]
 8009c90:	b2f6      	uxtb	r6, r6
 8009c92:	4283      	cmp	r3, r0
 8009c94:	4637      	mov	r7, r6
 8009c96:	dc04      	bgt.n	8009ca2 <__swbuf_r+0x42>
 8009c98:	4621      	mov	r1, r4
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f7ff fcf4 	bl	8009688 <_fflush_r>
 8009ca0:	bb30      	cbnz	r0, 8009cf0 <__swbuf_r+0x90>
 8009ca2:	68a3      	ldr	r3, [r4, #8]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	60a3      	str	r3, [r4, #8]
 8009ca8:	6823      	ldr	r3, [r4, #0]
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	6022      	str	r2, [r4, #0]
 8009cae:	701e      	strb	r6, [r3, #0]
 8009cb0:	6963      	ldr	r3, [r4, #20]
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	4283      	cmp	r3, r0
 8009cb6:	d004      	beq.n	8009cc2 <__swbuf_r+0x62>
 8009cb8:	89a3      	ldrh	r3, [r4, #12]
 8009cba:	07db      	lsls	r3, r3, #31
 8009cbc:	d506      	bpl.n	8009ccc <__swbuf_r+0x6c>
 8009cbe:	2e0a      	cmp	r6, #10
 8009cc0:	d104      	bne.n	8009ccc <__swbuf_r+0x6c>
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	f7ff fcdf 	bl	8009688 <_fflush_r>
 8009cca:	b988      	cbnz	r0, 8009cf0 <__swbuf_r+0x90>
 8009ccc:	4638      	mov	r0, r7
 8009cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cd0:	4b0a      	ldr	r3, [pc, #40]	; (8009cfc <__swbuf_r+0x9c>)
 8009cd2:	429c      	cmp	r4, r3
 8009cd4:	d101      	bne.n	8009cda <__swbuf_r+0x7a>
 8009cd6:	68ac      	ldr	r4, [r5, #8]
 8009cd8:	e7cf      	b.n	8009c7a <__swbuf_r+0x1a>
 8009cda:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <__swbuf_r+0xa0>)
 8009cdc:	429c      	cmp	r4, r3
 8009cde:	bf08      	it	eq
 8009ce0:	68ec      	ldreq	r4, [r5, #12]
 8009ce2:	e7ca      	b.n	8009c7a <__swbuf_r+0x1a>
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f000 f80c 	bl	8009d04 <__swsetup_r>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	d0cb      	beq.n	8009c88 <__swbuf_r+0x28>
 8009cf0:	f04f 37ff 	mov.w	r7, #4294967295
 8009cf4:	e7ea      	b.n	8009ccc <__swbuf_r+0x6c>
 8009cf6:	bf00      	nop
 8009cf8:	0800a724 	.word	0x0800a724
 8009cfc:	0800a744 	.word	0x0800a744
 8009d00:	0800a704 	.word	0x0800a704

08009d04 <__swsetup_r>:
 8009d04:	4b32      	ldr	r3, [pc, #200]	; (8009dd0 <__swsetup_r+0xcc>)
 8009d06:	b570      	push	{r4, r5, r6, lr}
 8009d08:	681d      	ldr	r5, [r3, #0]
 8009d0a:	4606      	mov	r6, r0
 8009d0c:	460c      	mov	r4, r1
 8009d0e:	b125      	cbz	r5, 8009d1a <__swsetup_r+0x16>
 8009d10:	69ab      	ldr	r3, [r5, #24]
 8009d12:	b913      	cbnz	r3, 8009d1a <__swsetup_r+0x16>
 8009d14:	4628      	mov	r0, r5
 8009d16:	f7ff fd4b 	bl	80097b0 <__sinit>
 8009d1a:	4b2e      	ldr	r3, [pc, #184]	; (8009dd4 <__swsetup_r+0xd0>)
 8009d1c:	429c      	cmp	r4, r3
 8009d1e:	d10f      	bne.n	8009d40 <__swsetup_r+0x3c>
 8009d20:	686c      	ldr	r4, [r5, #4]
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d28:	0719      	lsls	r1, r3, #28
 8009d2a:	d42c      	bmi.n	8009d86 <__swsetup_r+0x82>
 8009d2c:	06dd      	lsls	r5, r3, #27
 8009d2e:	d411      	bmi.n	8009d54 <__swsetup_r+0x50>
 8009d30:	2309      	movs	r3, #9
 8009d32:	6033      	str	r3, [r6, #0]
 8009d34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d38:	81a3      	strh	r3, [r4, #12]
 8009d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3e:	e03e      	b.n	8009dbe <__swsetup_r+0xba>
 8009d40:	4b25      	ldr	r3, [pc, #148]	; (8009dd8 <__swsetup_r+0xd4>)
 8009d42:	429c      	cmp	r4, r3
 8009d44:	d101      	bne.n	8009d4a <__swsetup_r+0x46>
 8009d46:	68ac      	ldr	r4, [r5, #8]
 8009d48:	e7eb      	b.n	8009d22 <__swsetup_r+0x1e>
 8009d4a:	4b24      	ldr	r3, [pc, #144]	; (8009ddc <__swsetup_r+0xd8>)
 8009d4c:	429c      	cmp	r4, r3
 8009d4e:	bf08      	it	eq
 8009d50:	68ec      	ldreq	r4, [r5, #12]
 8009d52:	e7e6      	b.n	8009d22 <__swsetup_r+0x1e>
 8009d54:	0758      	lsls	r0, r3, #29
 8009d56:	d512      	bpl.n	8009d7e <__swsetup_r+0x7a>
 8009d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d5a:	b141      	cbz	r1, 8009d6e <__swsetup_r+0x6a>
 8009d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d60:	4299      	cmp	r1, r3
 8009d62:	d002      	beq.n	8009d6a <__swsetup_r+0x66>
 8009d64:	4630      	mov	r0, r6
 8009d66:	f7fe fd93 	bl	8008890 <_free_r>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	6363      	str	r3, [r4, #52]	; 0x34
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d74:	81a3      	strh	r3, [r4, #12]
 8009d76:	2300      	movs	r3, #0
 8009d78:	6063      	str	r3, [r4, #4]
 8009d7a:	6923      	ldr	r3, [r4, #16]
 8009d7c:	6023      	str	r3, [r4, #0]
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	f043 0308 	orr.w	r3, r3, #8
 8009d84:	81a3      	strh	r3, [r4, #12]
 8009d86:	6923      	ldr	r3, [r4, #16]
 8009d88:	b94b      	cbnz	r3, 8009d9e <__swsetup_r+0x9a>
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d94:	d003      	beq.n	8009d9e <__swsetup_r+0x9a>
 8009d96:	4621      	mov	r1, r4
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f000 f84d 	bl	8009e38 <__smakebuf_r>
 8009d9e:	89a0      	ldrh	r0, [r4, #12]
 8009da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009da4:	f010 0301 	ands.w	r3, r0, #1
 8009da8:	d00a      	beq.n	8009dc0 <__swsetup_r+0xbc>
 8009daa:	2300      	movs	r3, #0
 8009dac:	60a3      	str	r3, [r4, #8]
 8009dae:	6963      	ldr	r3, [r4, #20]
 8009db0:	425b      	negs	r3, r3
 8009db2:	61a3      	str	r3, [r4, #24]
 8009db4:	6923      	ldr	r3, [r4, #16]
 8009db6:	b943      	cbnz	r3, 8009dca <__swsetup_r+0xc6>
 8009db8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dbc:	d1ba      	bne.n	8009d34 <__swsetup_r+0x30>
 8009dbe:	bd70      	pop	{r4, r5, r6, pc}
 8009dc0:	0781      	lsls	r1, r0, #30
 8009dc2:	bf58      	it	pl
 8009dc4:	6963      	ldrpl	r3, [r4, #20]
 8009dc6:	60a3      	str	r3, [r4, #8]
 8009dc8:	e7f4      	b.n	8009db4 <__swsetup_r+0xb0>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	e7f7      	b.n	8009dbe <__swsetup_r+0xba>
 8009dce:	bf00      	nop
 8009dd0:	20000030 	.word	0x20000030
 8009dd4:	0800a724 	.word	0x0800a724
 8009dd8:	0800a744 	.word	0x0800a744
 8009ddc:	0800a704 	.word	0x0800a704

08009de0 <abort>:
 8009de0:	b508      	push	{r3, lr}
 8009de2:	2006      	movs	r0, #6
 8009de4:	f000 f898 	bl	8009f18 <raise>
 8009de8:	2001      	movs	r0, #1
 8009dea:	f7f8 fb5f 	bl	80024ac <_exit>

08009dee <__swhatbuf_r>:
 8009dee:	b570      	push	{r4, r5, r6, lr}
 8009df0:	460e      	mov	r6, r1
 8009df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df6:	2900      	cmp	r1, #0
 8009df8:	b096      	sub	sp, #88	; 0x58
 8009dfa:	4614      	mov	r4, r2
 8009dfc:	461d      	mov	r5, r3
 8009dfe:	da07      	bge.n	8009e10 <__swhatbuf_r+0x22>
 8009e00:	2300      	movs	r3, #0
 8009e02:	602b      	str	r3, [r5, #0]
 8009e04:	89b3      	ldrh	r3, [r6, #12]
 8009e06:	061a      	lsls	r2, r3, #24
 8009e08:	d410      	bmi.n	8009e2c <__swhatbuf_r+0x3e>
 8009e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e0e:	e00e      	b.n	8009e2e <__swhatbuf_r+0x40>
 8009e10:	466a      	mov	r2, sp
 8009e12:	f000 f89d 	bl	8009f50 <_fstat_r>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	dbf2      	blt.n	8009e00 <__swhatbuf_r+0x12>
 8009e1a:	9a01      	ldr	r2, [sp, #4]
 8009e1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009e20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e24:	425a      	negs	r2, r3
 8009e26:	415a      	adcs	r2, r3
 8009e28:	602a      	str	r2, [r5, #0]
 8009e2a:	e7ee      	b.n	8009e0a <__swhatbuf_r+0x1c>
 8009e2c:	2340      	movs	r3, #64	; 0x40
 8009e2e:	2000      	movs	r0, #0
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	b016      	add	sp, #88	; 0x58
 8009e34:	bd70      	pop	{r4, r5, r6, pc}
	...

08009e38 <__smakebuf_r>:
 8009e38:	898b      	ldrh	r3, [r1, #12]
 8009e3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e3c:	079d      	lsls	r5, r3, #30
 8009e3e:	4606      	mov	r6, r0
 8009e40:	460c      	mov	r4, r1
 8009e42:	d507      	bpl.n	8009e54 <__smakebuf_r+0x1c>
 8009e44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	6123      	str	r3, [r4, #16]
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	6163      	str	r3, [r4, #20]
 8009e50:	b002      	add	sp, #8
 8009e52:	bd70      	pop	{r4, r5, r6, pc}
 8009e54:	ab01      	add	r3, sp, #4
 8009e56:	466a      	mov	r2, sp
 8009e58:	f7ff ffc9 	bl	8009dee <__swhatbuf_r>
 8009e5c:	9900      	ldr	r1, [sp, #0]
 8009e5e:	4605      	mov	r5, r0
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7fe fd65 	bl	8008930 <_malloc_r>
 8009e66:	b948      	cbnz	r0, 8009e7c <__smakebuf_r+0x44>
 8009e68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e6c:	059a      	lsls	r2, r3, #22
 8009e6e:	d4ef      	bmi.n	8009e50 <__smakebuf_r+0x18>
 8009e70:	f023 0303 	bic.w	r3, r3, #3
 8009e74:	f043 0302 	orr.w	r3, r3, #2
 8009e78:	81a3      	strh	r3, [r4, #12]
 8009e7a:	e7e3      	b.n	8009e44 <__smakebuf_r+0xc>
 8009e7c:	4b0d      	ldr	r3, [pc, #52]	; (8009eb4 <__smakebuf_r+0x7c>)
 8009e7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	6020      	str	r0, [r4, #0]
 8009e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e88:	81a3      	strh	r3, [r4, #12]
 8009e8a:	9b00      	ldr	r3, [sp, #0]
 8009e8c:	6163      	str	r3, [r4, #20]
 8009e8e:	9b01      	ldr	r3, [sp, #4]
 8009e90:	6120      	str	r0, [r4, #16]
 8009e92:	b15b      	cbz	r3, 8009eac <__smakebuf_r+0x74>
 8009e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f000 f86b 	bl	8009f74 <_isatty_r>
 8009e9e:	b128      	cbz	r0, 8009eac <__smakebuf_r+0x74>
 8009ea0:	89a3      	ldrh	r3, [r4, #12]
 8009ea2:	f023 0303 	bic.w	r3, r3, #3
 8009ea6:	f043 0301 	orr.w	r3, r3, #1
 8009eaa:	81a3      	strh	r3, [r4, #12]
 8009eac:	89a0      	ldrh	r0, [r4, #12]
 8009eae:	4305      	orrs	r5, r0
 8009eb0:	81a5      	strh	r5, [r4, #12]
 8009eb2:	e7cd      	b.n	8009e50 <__smakebuf_r+0x18>
 8009eb4:	08009749 	.word	0x08009749

08009eb8 <_malloc_usable_size_r>:
 8009eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ebc:	1f18      	subs	r0, r3, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	bfbc      	itt	lt
 8009ec2:	580b      	ldrlt	r3, [r1, r0]
 8009ec4:	18c0      	addlt	r0, r0, r3
 8009ec6:	4770      	bx	lr

08009ec8 <_raise_r>:
 8009ec8:	291f      	cmp	r1, #31
 8009eca:	b538      	push	{r3, r4, r5, lr}
 8009ecc:	4604      	mov	r4, r0
 8009ece:	460d      	mov	r5, r1
 8009ed0:	d904      	bls.n	8009edc <_raise_r+0x14>
 8009ed2:	2316      	movs	r3, #22
 8009ed4:	6003      	str	r3, [r0, #0]
 8009ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eda:	bd38      	pop	{r3, r4, r5, pc}
 8009edc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009ede:	b112      	cbz	r2, 8009ee6 <_raise_r+0x1e>
 8009ee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ee4:	b94b      	cbnz	r3, 8009efa <_raise_r+0x32>
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f000 f830 	bl	8009f4c <_getpid_r>
 8009eec:	462a      	mov	r2, r5
 8009eee:	4601      	mov	r1, r0
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ef6:	f000 b817 	b.w	8009f28 <_kill_r>
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d00a      	beq.n	8009f14 <_raise_r+0x4c>
 8009efe:	1c59      	adds	r1, r3, #1
 8009f00:	d103      	bne.n	8009f0a <_raise_r+0x42>
 8009f02:	2316      	movs	r3, #22
 8009f04:	6003      	str	r3, [r0, #0]
 8009f06:	2001      	movs	r0, #1
 8009f08:	e7e7      	b.n	8009eda <_raise_r+0x12>
 8009f0a:	2400      	movs	r4, #0
 8009f0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009f10:	4628      	mov	r0, r5
 8009f12:	4798      	blx	r3
 8009f14:	2000      	movs	r0, #0
 8009f16:	e7e0      	b.n	8009eda <_raise_r+0x12>

08009f18 <raise>:
 8009f18:	4b02      	ldr	r3, [pc, #8]	; (8009f24 <raise+0xc>)
 8009f1a:	4601      	mov	r1, r0
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	f7ff bfd3 	b.w	8009ec8 <_raise_r>
 8009f22:	bf00      	nop
 8009f24:	20000030 	.word	0x20000030

08009f28 <_kill_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d07      	ldr	r5, [pc, #28]	; (8009f48 <_kill_r+0x20>)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	4611      	mov	r1, r2
 8009f34:	602b      	str	r3, [r5, #0]
 8009f36:	f7f8 faa9 	bl	800248c <_kill>
 8009f3a:	1c43      	adds	r3, r0, #1
 8009f3c:	d102      	bne.n	8009f44 <_kill_r+0x1c>
 8009f3e:	682b      	ldr	r3, [r5, #0]
 8009f40:	b103      	cbz	r3, 8009f44 <_kill_r+0x1c>
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	bd38      	pop	{r3, r4, r5, pc}
 8009f46:	bf00      	nop
 8009f48:	20007f10 	.word	0x20007f10

08009f4c <_getpid_r>:
 8009f4c:	f7f8 ba96 	b.w	800247c <_getpid>

08009f50 <_fstat_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4d07      	ldr	r5, [pc, #28]	; (8009f70 <_fstat_r+0x20>)
 8009f54:	2300      	movs	r3, #0
 8009f56:	4604      	mov	r4, r0
 8009f58:	4608      	mov	r0, r1
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	602b      	str	r3, [r5, #0]
 8009f5e:	f7f8 faf4 	bl	800254a <_fstat>
 8009f62:	1c43      	adds	r3, r0, #1
 8009f64:	d102      	bne.n	8009f6c <_fstat_r+0x1c>
 8009f66:	682b      	ldr	r3, [r5, #0]
 8009f68:	b103      	cbz	r3, 8009f6c <_fstat_r+0x1c>
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	bd38      	pop	{r3, r4, r5, pc}
 8009f6e:	bf00      	nop
 8009f70:	20007f10 	.word	0x20007f10

08009f74 <_isatty_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	4d06      	ldr	r5, [pc, #24]	; (8009f90 <_isatty_r+0x1c>)
 8009f78:	2300      	movs	r3, #0
 8009f7a:	4604      	mov	r4, r0
 8009f7c:	4608      	mov	r0, r1
 8009f7e:	602b      	str	r3, [r5, #0]
 8009f80:	f7f8 faf3 	bl	800256a <_isatty>
 8009f84:	1c43      	adds	r3, r0, #1
 8009f86:	d102      	bne.n	8009f8e <_isatty_r+0x1a>
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	b103      	cbz	r3, 8009f8e <_isatty_r+0x1a>
 8009f8c:	6023      	str	r3, [r4, #0]
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}
 8009f90:	20007f10 	.word	0x20007f10

08009f94 <_init>:
 8009f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f96:	bf00      	nop
 8009f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9a:	bc08      	pop	{r3}
 8009f9c:	469e      	mov	lr, r3
 8009f9e:	4770      	bx	lr

08009fa0 <_fini>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	bf00      	nop
 8009fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa6:	bc08      	pop	{r3}
 8009fa8:	469e      	mov	lr, r3
 8009faa:	4770      	bx	lr
